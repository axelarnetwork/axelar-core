syntax = "proto3";
package bitcoin.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/bitcoin/types";

import "gogoproto/gogo.proto";
import "tss/exported/v1beta1/types.proto";

option (gogoproto.goproto_getters_all) = false;

message Transaction {
  bytes tx = 1;
  bool assign_next_key = 2;
  tss.exported.v1beta1.KeyRole next_key_role = 3;
  string next_key_id = 4 [ (gogoproto.customname) = "NextKeyID" ];
}

// OutPointInfo describes all the necessary information to confirm the outPoint
// of a transaction
message OutPointInfo {
  option (gogoproto.goproto_stringer) = false;

  string out_point = 1;
  int64 amount = 2
      [ (gogoproto.casttype) = "github.com/btcsuite/btcutil.Amount" ];
  string address = 3;
}

enum AddressRole {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.goproto_enum_stringer) = true;

  ADDRESS_ROLE_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "None" ];
  ADDRESS_ROLE_DEPOSIT = 1 [ (gogoproto.enumvalue_customname) = "Deposit" ];
  ADDRESS_ROLE_CONSOLIDATION = 2
      [ (gogoproto.enumvalue_customname) = "Consolidation" ];
}

// AddressInfo is a wrapper containing the Bitcoin P2WSH address, it's
// corresponding script and the underlying key
message AddressInfo {
  string address = 1;
  AddressRole role = 2;
  bytes redeem_script = 3;
  string key_id = 4 [ (gogoproto.customname) = "KeyID" ];
  uint32 max_sig_count = 5;
}

message Network { string name = 1; }

enum SignState {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.goproto_enum_stringer) = true;

  SIGN_STATE_UNSPECIFIED = 0;
  SIGN_STATE_SIGNING_PENDING_TRANSFERS = 1
      [ (gogoproto.enumvalue_customname) = "Signing" ];
  SIGN_STATE_SIGNED_NOT_CONFIRMED = 2
      [ (gogoproto.enumvalue_customname) = "Signed" ];
  SIGN_STATE_READY_TO_SIGN = 3 [ (gogoproto.enumvalue_customname) = "Ready" ];
}
