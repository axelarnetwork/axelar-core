syntax = "proto3";
package axelar.tss.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/tss/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "axelar/snapshot/v1beta1/tx.proto";
import "axelar/tss/v1beta1/tx.proto";
import "axelar/tss/v1beta1/query.proto";

option (gogoproto.goproto_registration) = true;

// Msg defines the tss Msg service.
service MsgService {
  rpc RegisterExternalKeys(tss.v1beta1.RegisterExternalKeysRequest)
      returns (tss.v1beta1.RegisterExternalKeysResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/register_external_keys"
      body : "*"
    };
  }

  rpc HeartBeat(tss.v1beta1.HeartBeatRequest)
      returns (tss.v1beta1.HeartBeatResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/heartbeat"
      body : "*"
    };
  }

  rpc StartKeygen(tss.v1beta1.StartKeygenRequest)
      returns (tss.v1beta1.StartKeygenResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/start_keygen"
      body : "*"
    };
  }

  rpc ProcessKeygenTraffic(tss.v1beta1.ProcessKeygenTrafficRequest)
      returns (tss.v1beta1.ProcessKeygenTrafficResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/process_keygen_traffic"
      body : "*"
    };
  }

  rpc RotateKey(tss.v1beta1.RotateKeyRequest)
      returns (tss.v1beta1.RotateKeyResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/rotate_key"
      body : "*"
    };
  }

  rpc VotePubKey(tss.v1beta1.VotePubKeyRequest)
      returns (tss.v1beta1.VotePubKeyResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/vote_pub_key"
      body : "*"
    };
  };

  rpc ProcessSignTraffic(tss.v1beta1.ProcessSignTrafficRequest)
      returns (tss.v1beta1.ProcessSignTrafficResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/process_sign_traffic"
      body : "*"
    };
  }

  rpc VoteSig(tss.v1beta1.VoteSigRequest)
      returns (tss.v1beta1.VoteSigResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/vote_sig"
      body : "*"
    };
  }

  rpc SubmitMultisigPubKeys(tss.v1beta1.SubmitMultisigPubKeysRequest)
      returns (tss.v1beta1.SubmitMultisigPubKeysResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/submit_multisig_pub_keys"
      body : "*"
    };
  }

  rpc SubmitMultisigSignatures(tss.v1beta1.SubmitMultisigSignaturesRequest)
      returns (tss.v1beta1.SubmitMultisigSignaturesResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/submit_multisig_signatures"
      body : "*"
    };
  }
}

// Query defines the gRPC querier service.
service QueryService {

  // NextKeyID returns the key ID assigned for the next rotation on a given
  // chain and for the given key role
  rpc NextKeyID(NextKeyIDRequest) returns (NextKeyIDResponse) {
    option (google.api.http).get =
        "/axelar/tss/v1beta1/next_key_id/{chain}/{key_role}";
  }

  // AssignableKey returns true if there is no assigned key for the
  // next rotation on a given chain, and false otherwise
  rpc AssignableKey(AssignableKeyRequest) returns (AssignableKeyResponse) {
    option (google.api.http).get =
        "/axelar/tss/v1beta1/assignable_key/{chain}/{key_role}";
  }

  // ValidatorMultisigKeys returns the validator's multisig pubkeys
  // corresponding to each active key ID
  rpc ValidatorMultisigKeys(ValidatorMultisigKeysRequest)
      returns (ValidatorMultisigKeysResponse) {
    option (google.api.http).get =
        "/axelar/tss/v1beta1/validator_multisig_keys/{address}";
  }
}
