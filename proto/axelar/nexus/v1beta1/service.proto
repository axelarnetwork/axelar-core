syntax = "proto3";
package axelar.nexus.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/nexus/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "axelar/nexus/v1beta1/tx.proto";
import "axelar/nexus/v1beta1/query.proto";

option (gogoproto.goproto_registration) = true;

// Msg defines the nexus Msg service.
service MsgService {
  rpc RegisterChainMaintainer(RegisterChainMaintainerRequest)
      returns (RegisterChainMaintainerResponse) {
    option (google.api.http) = {
      post : "/axelar/nexus/registerChainMaintainer"
      body : "*"
    };
  }

  rpc DeregisterChainMaintainer(DeregisterChainMaintainerRequest)
      returns (DeregisterChainMaintainerResponse) {
    option (google.api.http) = {
      post : "/axelar/nexus/deregisterChainMaintainer"
      body : "*"
    };
  }

  rpc ActivateChain(ActivateChainRequest) returns (ActivateChainResponse) {
    option (google.api.http) = {
      post : "/axelar/nexus/activate-chain"
      body : "*"
    };
  }

  rpc DeactivateChain(nexus.v1beta1.DeactivateChainRequest)
      returns (nexus.v1beta1.DeactivateChainResponse) {
    option (google.api.http) = {
      post : "/axelar/nexus/deactivate-chain"
      body : "*"
    };
  }

  rpc RegisterAssetFee(RegisterAssetFeeRequest)
      returns (RegisterAssetFeeResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/register-asset-fee"
      body : "*"
    };
  }
}

// QueryService defines the gRPC querier service.
service QueryService {
  // LatestDepositAddress queries the a deposit address by recipient
  rpc LatestDepositAddress(LatestDepositAddressRequest)
      returns (LatestDepositAddressResponse) {
    option (google.api.http).get = "/nexus/v1beta1/latest_deposit_address/"
                                   "{recipient_chain}/{recipient_addr}";
  }

  // TransfersForChain queries transfers by chain
  rpc TransfersForChain(TransfersForChainRequest)
      returns (TransfersForChainResponse) {
    option (google.api.http).get = "/nexus/v1beta1/transfers_for_chain";
  }

  // Fee queries the fee info by chain and asset
  rpc Fee(FeeRequest) returns (FeeResponse) {
    option (google.api.http).get = "/axelar/nexus/v1beta1/fee";
  }

  // TransferFee queries the transfer fee by the source, destination chain,
  // asset and amount
  rpc TransferFee(TransferFeeRequest) returns (TransferFeeResponse) {
    option (google.api.http).get = "/axelar/nexus/v1beta1/transfer_fee";
  }

  // Chains queries the chains registered on the network
  rpc Chains(ChainsRequest) returns (ChainsResponse) {
    option (google.api.http).get = "/axelar/nexus/v1beta1/chains";
  }

  // Assets queries the assets registered for a chain
  rpc Assets(AssetsRequest) returns (AssetsResponse) {
    option (google.api.http).get = "/axelar/nexus/v1beta1/assets/{chain}";
  }

  // ChainState queries the state of a registered chain on the network
  rpc ChainState(ChainStateRequest) returns (ChainStateResponse) {
    option (google.api.http).get = "/axelar/nexus/v1beta1/chain_state/{chain}";
  }

  // ChainsByAsset queries the chains that support an asset on the network
  rpc ChainsByAsset(ChainsByAssetRequest) returns (ChainsByAssetResponse) {
    option (google.api.http).get =
        "/axelar/nexus/v1beta1/chains_by_asset/{asset}";
  }
}
