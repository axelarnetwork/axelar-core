syntax = "proto3";
package axelar.nexus.exported.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/nexus/exported";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "axelar/tss/exported/v1beta1/types.proto";

option (gogoproto.goproto_getters_all) = false;

// Chain represents the properties of a registered blockchain
message Chain {
  reserved 2; // native_asset was removed in 0.14

  string name = 1 [ (gogoproto.casttype) = "ChainName" ];
  bool supports_foreign_assets = 3;
  tss.exported.v1beta1.KeyType key_type = 4;
  string module = 5;
}

// CrossChainAddress represents a generalized address on any registered chain
message CrossChainAddress {
  Chain chain = 1 [ (gogoproto.nullable) = false ];
  string address = 2;
}

// CrossChainTransfer represents a generalized transfer of some asset to a
// registered blockchain
message CrossChainTransfer {
  CrossChainAddress recipient = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin asset = 2 [ (gogoproto.nullable) = false ];
  uint64 id = 3
      [ (gogoproto.customname) = "ID", (gogoproto.casttype) = "TransferID" ];
  TransferState state = 4;
}

enum TransferState {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.goproto_enum_stringer) = true;

  TRANSFER_STATE_UNSPECIFIED = 0;
  TRANSFER_STATE_PENDING = 1 [ (gogoproto.enumvalue_customname) = "Pending" ];
  TRANSFER_STATE_ARCHIVED = 2 [ (gogoproto.enumvalue_customname) = "Archived" ];
  TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3
      [ (gogoproto.enumvalue_customname) = "InsufficientAmount" ];
}

// TransferFee represents accumulated fees generated by the network
message TransferFee {
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message FeeInfo {
  string chain = 1 [ (gogoproto.casttype) = "ChainName" ];
  string asset = 2;
  bytes fee_rate = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  bytes min_fee = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  bytes max_fee = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message Asset {
  string denom = 1;
  reserved 2; // min_amount was removed in v0.15
  bool is_native_asset = 3;
}

enum TransferDirection {
  option (gogoproto.goproto_enum_prefix) = false;

  TRANSFER_DIRECTION_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "Unspecified" ];
  TRANSFER_DIRECTION_FROM = 1
      [ (gogoproto.enumvalue_customname) = "TransferDirectionFrom" ];
  TRANSFER_DIRECTION_TO = 2
      [ (gogoproto.enumvalue_customname) = "TransferDirectionTo" ];
}

message GeneralMessage {
  enum Status {
    option (gogoproto.goproto_enum_prefix) = false;
    option (gogoproto.goproto_enum_stringer) = true;

    STATUS_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "NonExistent" ];
    STATUS_APPROVED = 1 [ (gogoproto.enumvalue_customname) = "Approved" ];
    STATUS_PROCESSING = 2 [ (gogoproto.enumvalue_customname) = "Processing" ];
    STATUS_EXECUTED = 3 [ (gogoproto.enumvalue_customname) = "Executed" ];
    STATUS_FAILED = 4 [ (gogoproto.enumvalue_customname) = "Failed" ];
  }

  string id = 1 [ (gogoproto.customname) = "ID" ];
  CrossChainAddress sender = 2 [ (gogoproto.nullable) = false ];
  CrossChainAddress recipient = 3 [ (gogoproto.nullable) = false ];
  bytes payload_hash = 4;
  Status status = 5;
  cosmos.base.v1beta1.Coin asset = 6;
  bytes source_tx_id = 7 [ (gogoproto.customname) = "SourceTxID" ];
  uint64 source_tx_index = 8;
}

message WasmMessage {
  string source_chain = 1 [ (gogoproto.casttype) = "ChainName" ];
  string source_address = 2;
  string destination_chain = 3 [ (gogoproto.casttype) = "ChainName" ];
  string destination_address = 4;
  bytes payload_hash = 5 [ (gogoproto.casttype) = "WasmBytes" ];
  bytes source_tx_id = 6 [
    (gogoproto.customname) = "SourceTxID",
    (gogoproto.casttype) = "WasmBytes"
  ];
  uint64 source_tx_index = 7 [ (gogoproto.jsontag) = "source_tx_index" ];
  bytes sender = 8 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  string id = 9 [
    (gogoproto.customname) = "ID"
  ];
}
