syntax = "proto3";
package axelar.evm.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/evm/types";

import "gogoproto/gogo.proto";
import "axelar/evm/v1beta1/types.proto";

option (gogoproto.goproto_getters_all) = false;

// DepositQueryParams describe the parameters used to query for an EVM
// deposit address
message DepositQueryParams {
  string address = 1;
  string asset = 2;
  string chain = 3
      [ (gogoproto.casttype) =
            "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" ];
}

message BatchedCommandsRequest {
  string chain = 1;
  // id defines an optional id for the commandsbatch. If not specified the
  // latest will be returned
  string id = 2;
}

message BatchedCommandsResponse {
  string id = 1 [ (gogoproto.customname) = "ID" ];
  string data = 2;
  BatchedCommandsStatus status = 3;
  string key_id = 4 [
    (gogoproto.customname) = "KeyID",
    (gogoproto.casttype) =
        "github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID"
  ];
  reserved 5; // signature was removed in v0.20.0
  string execute_data = 6;
  string prev_batched_commands_id = 7
      [ (gogoproto.customname) = "PrevBatchedCommandsID" ];
  repeated string command_ids = 8 [ (gogoproto.customname) = "CommandIDs" ];
  Proof proof = 9;
}

message KeyAddressRequest {
  reserved 2, 3;

  string chain = 1;
  string key_id = 4 [
    (gogoproto.customname) = "KeyID",
    (gogoproto.casttype) =
        "github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID"
  ];
}

message KeyAddressResponse {
  message WeightedAddress {
    string address = 1;
    string weight = 2;
  };

  string key_id = 1 [
    (gogoproto.customname) = "KeyID",
    (gogoproto.casttype) =
        "github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID"
  ];
  repeated WeightedAddress addresses = 2 [ (gogoproto.nullable) = false ];
  string threshold = 3;
}

message QueryTokenAddressResponse {
  option deprecated = true; // Deprecated in v19

  string address = 1;
  bool confirmed = 2;
}

message QueryDepositStateParams {
  bytes tx_id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "Hash",
    (gogoproto.customname) = "TxID"
  ];
  bytes burner_address = 2
      [ (gogoproto.nullable) = false, (gogoproto.customtype) = "Address" ];
}

message DepositStateRequest {
  string chain = 1
      [ (gogoproto.casttype) =
            "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" ];
  QueryDepositStateParams params = 2;
}

message DepositStateResponse { DepositStatus status = 2; }

message EventRequest {
  string chain = 1;
  string event_id = 2;
}

message EventResponse { Event event = 1; }

message QueryBurnerAddressResponse { string address = 1; }

message ChainsRequest {}

message ChainsResponse {
  repeated string chains = 1
      [ (gogoproto.casttype) =
            "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" ];
}

message PendingCommandsRequest { string chain = 1; }

message PendingCommandsResponse {
  repeated QueryCommandResponse commands = 1 [ (gogoproto.nullable) = false ];
}

message QueryCommandResponse {
  string id = 1 [ (gogoproto.customname) = "ID" ];
  string type = 2;
  map<string, string> params = 3 [ (gogoproto.nullable) = false ];
  string key_id = 4 [ (gogoproto.customname) = "KeyID" ];
  uint32 max_gas_cost = 5;
}

message BurnerInfoRequest {
  bytes address = 1
      [ (gogoproto.nullable) = false, (gogoproto.customtype) = "Address" ];
}

message BurnerInfoResponse {
  string chain = 1
      [ (gogoproto.casttype) =
            "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" ];
  BurnerInfo burner_info = 2;
}

message ConfirmationHeightRequest { string chain = 1; }

message ConfirmationHeightResponse { uint64 height = 1; }

message GatewayAddressRequest { string chain = 1; }

message GatewayAddressResponse { string address = 1; }

message BytecodeRequest {
  string chain = 1;
  string contract = 2;
}

message BytecodeResponse { string bytecode = 1; }

enum TokenType {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.goproto_enum_stringer) = true;

  TOKEN_TYPE_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "Unspecified" ];
  TOKEN_TYPE_INTERNAL = 1 [ (gogoproto.enumvalue_customname) = "Internal" ];
  TOKEN_TYPE_EXTERNAL = 2 [ (gogoproto.enumvalue_customname) = "External" ];
}

// ERC20TokensRequest describes the chain for which the type of ERC20 tokens are
// requested.
message ERC20TokensRequest {
  string chain = 1;
  TokenType type = 2;
}

// ERC20TokensResponse describes the asset and symbol for all
// ERC20 tokens requested for a chain
message ERC20TokensResponse {
  message Token {
    string asset = 1;
    string symbol = 2;
  }

  repeated Token tokens = 1 [ (gogoproto.nullable) = false ];
}

message TokenInfoRequest {
  string chain = 1;
  oneof find_by {
    string asset = 2;
    string symbol = 3;
  }
}

message TokenInfoResponse {
  string asset = 1;
  TokenDetails details = 2 [ (gogoproto.nullable) = false ];
  string address = 3;
  bool confirmed = 4;
  bool is_external = 5;
  string burner_code_hash = 6;
}

message Proof {
  repeated string addresses = 1;
  repeated string weights = 2;
  string threshold = 3;
  repeated string signatures = 4;
}
