syntax = "proto3";
package axelar.multisig.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/multisig/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "axelar/multisig/v1beta1/tx.proto";
import "axelar/multisig/v1beta1/query.proto";

option (gogoproto.goproto_registration) = true;

// Msg defines the multisig Msg service.
service MsgService {
  rpc StartKeygen(StartKeygenRequest) returns (StartKeygenResponse) {
    option (google.api.http) = {
      post : "/axelar/multisig/start_keygen"
      body : "*"
    };
  }

  rpc SubmitPubKey(SubmitPubKeyRequest) returns (SubmitPubKeyResponse) {
    option (google.api.http) = {
      post : "/axelar/multisig/submit_pub_key"
      body : "*"
    };
  }

  rpc SubmitSignature(SubmitSignatureRequest)
      returns (SubmitSignatureResponse) {
    option (google.api.http) = {
      post : "/axelar/multisig/submit_signature"
      body : "*"
    };
  }

  rpc RotateKey(RotateKeyRequest) returns (RotateKeyResponse) {
    option (google.api.http) = {
      post : "/axelar/multisig/rotate_key"
      body : "*"
    };
  }
}

// Query defines the gRPC querier service.
service QueryService {
  // KeyID returns the key ID of a key assigned to a given chain.
  // If no key is assigned, it returns the grpc NOT_FOUND error.
  rpc KeyID(KeyIDRequest) returns (KeyIDResponse) {
    option (google.api.http).get = "/axelar/multisig/v1beta1/key_id/{chain}";
  }

  // NextKeyID returns the key ID assigned for the next rotation on a given
  // chain. If no key rotation is in progress, it returns the grpc NOT_FOUND
  // error.
  rpc NextKeyID(NextKeyIDRequest) returns (NextKeyIDResponse) {
    option (google.api.http).get =
        "/axelar/multisig/v1beta1/next_key_id/{chain}";
  }

  // Key returns the key corresponding to a given key ID.
  // If no key is found, it returns the grpc NOT_FOUND error.
  rpc Key(KeyRequest) returns (KeyResponse) {
    option (google.api.http).get = "/axelar/multisig/v1beta1/key";
  }

  // KeygenSession returns the keygen session info for a given key ID.
  // If no key is found, it returns the grpc NOT_FOUND error.
  rpc KeygenSession(KeygenSessionRequest) returns (KeygenSessionResponse) {
    option (google.api.http).get = "/axelar/multisig/v1beta1/keygen_session";
  }
}
