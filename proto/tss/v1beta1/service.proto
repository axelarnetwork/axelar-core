syntax = "proto3";
package tss.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/tss/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "broadcast/v1beta1/tx.proto";
import "tss/v1beta1/tx.proto";

option (gogoproto.goproto_registration) = true;

// Msg defines the tss Msg service.
service MsgService {
  rpc StartKeygen(tss.v1beta1.StartKeygenRequest)
      returns (tss.v1beta1.StartKeygenResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/startKeygen"
      body : "*"
    };
  }
  rpc KeygenTraffic(tss.v1beta1.KeygenTrafficRequest)
      returns (tss.v1beta1.KeygenTrafficResponse);
  rpc AssignKey(tss.v1beta1.AssignKeyRequest)
      returns (tss.v1beta1.AssignKeyResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/assign/{chain}"
      body : "*"
    };
  }
  rpc RotateKey(tss.v1beta1.RotateKeyRequest)
      returns (tss.v1beta1.RotateKeyResponse) {
    option (google.api.http) = {
      post : "/axelar/tss/assign/{chain}"
      body : "*"
    };
  }
  rpc VotePubKey(tss.v1beta1.VotePubKeyRequest)
      returns (tss.v1beta1.VotePubKeyResponse);

  rpc SignTraffic(tss.v1beta1.SignTrafficRequest)
      returns (tss.v1beta1.SignTrafficResponse);
  rpc VoteSig(tss.v1beta1.VoteSigRequest) returns (tss.v1beta1.VoteSigResponse);

  rpc Deregister(tss.v1beta1.DeregisterRequest)
      returns (tss.v1beta1.DeregisterResponse);
}
