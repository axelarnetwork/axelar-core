syntax = "proto3";
package tss.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/tss/types";

import "gogoproto/gogo.proto";
import "tss/exported/v1beta1/types.proto";
import "tss/tofnd/v1beta1/tofnd.proto";
import "vote/exported/v1beta1/types.proto";

option (gogoproto.goproto_getters_all) = false;

// StartKeygenRequest indicate the start of keygen
message StartKeygenRequest {
  string sender = 1 [ (gogoproto.casttype) =
                          "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  string key_id = 2 [ (gogoproto.customname) = "KeyID" ];
  tss.exported.v1beta1.KeyRole key_role = 3;
}

message StartKeygenResponse {}

message RotateKeyRequest {
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  string chain = 2;
  tss.exported.v1beta1.KeyRole key_role = 3;
  string key_id = 4 [ (gogoproto.customname) = "KeyID" ];
}

message RotateKeyResponse {}

// ProcessKeygenTrafficRequest protocol message
message ProcessKeygenTrafficRequest {
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  string session_id = 2 [ (gogoproto.customname) = "SessionID" ];
  tss.tofnd.v1beta1.TrafficOut payload = 3;
}

message ProcessKeygenTrafficResponse {}

// ProcessSignTrafficRequest protocol message
message ProcessSignTrafficRequest {
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  string session_id = 2 [ (gogoproto.customname) = "SessionID" ];
  tss.tofnd.v1beta1.TrafficOut payload = 3;
}

message ProcessSignTrafficResponse {}

// VotePubKeyRequest represents the message to vote on a public key
message VotePubKeyRequest {
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  vote.exported.v1beta1.PollKey poll_key = 2 [ (gogoproto.nullable) = false ];
  tss.tofnd.v1beta1.MessageOut.KeygenResult result = 3;
}
message VotePubKeyResponse { string log = 1; }

// VoteSigRequest represents a message to vote for a signature
message VoteSigRequest {
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  vote.exported.v1beta1.PollKey poll_key = 2 [ (gogoproto.nullable) = false ];
  tss.tofnd.v1beta1.MessageOut.SignResult result = 3;
}

message VoteSigResponse { string log = 1; }

message AckRequest {
  bytes sender = 1 [ (gogoproto.casttype) =
                         "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  // can be either a key ID or a sig ID, depending on the type
  string id = 2 [ (gogoproto.customname) = "ID" ];
  tss.exported.v1beta1.AckType ack_type = 3;
  int64 height = 4;
}

message AckResponse {}
