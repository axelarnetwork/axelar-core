syntax = "proto3";
package tss.exported.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/tss/exported";

import "gogoproto/gogo.proto";

// KeyRequirement defines requirements for keys
message KeyRequirement {
  string chain_name = 1;
  KeyRole key_role = 2;
  int64 min_validator_subset_size = 3;
  KeyShareDistributionPolicy key_share_distribution_policy = 4;
}

enum KeyRole {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.goproto_enum_stringer) = true;

  KEY_ROLE_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "Unknown" ];
  KEY_ROLE_MASTER_KEY = 1 [ (gogoproto.enumvalue_customname) = "MasterKey" ];
  KEY_ROLE_SECONDARY_KEY = 2
      [ (gogoproto.enumvalue_customname) = "SecondaryKey" ];
  KEY_ROLE_EXTERNAL_KEY = 3
      [ (gogoproto.enumvalue_customname) = "ExternalKey" ];
}

enum KeyShareDistributionPolicy {
  option (gogoproto.goproto_enum_prefix) = false;
  option (gogoproto.goproto_enum_stringer) = true;

  KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "Unspecified" ];
  KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE = 1
      [ (gogoproto.enumvalue_customname) = "WeightedByStake" ];
  KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR = 2
      [ (gogoproto.enumvalue_customname) = "OnePerValidator" ];
}

enum AckType {
  option (gogoproto.goproto_enum_prefix) = true;
  option (gogoproto.goproto_enum_stringer) = true;

  ACK_TYPE_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "Unspecified" ];
  ACK_TYPE_KEYGEN = 1 [ (gogoproto.enumvalue_customname) = "Keygen" ];
  ACK_TYPE_SIGN = 2 [ (gogoproto.enumvalue_customname) = "Sign" ];
}

// SignInfo holds information about a sign request
message SignInfo {
  string key_id = 1 [ (gogoproto.customname) = "KeyID" ];
  string sig_id = 2 [ (gogoproto.customname) = "SigID" ];
  bytes msg = 3;
  int64 snapshot_counter = 4;
}