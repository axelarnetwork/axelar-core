syntax = "proto3";
package evm.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/evm/types";

import "gogoproto/gogo.proto";
import "evm/v1beta1/tx.proto";
import "nexus/exported/v1beta1/types.proto";
import "tss/exported/v1beta1/types.proto";

option (gogoproto.goproto_getters_all) = false;

// NetworkInfo describes information about a network
message NetworkInfo {
  string name = 1;
  bytes id = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// BurnerInfo describes information required to burn token at an burner address
// that is deposited by an user
message BurnerInfo {
  bytes token_address = 1
      [ (gogoproto.nullable) = false, (gogoproto.customtype) = "Address" ];
  string destination_chain = 2;
  string symbol = 3;
  string asset = 4;
  bytes salt = 5
      [ (gogoproto.nullable) = false, (gogoproto.customtype) = "Hash" ];
}

// ERC20Deposit contains information for an ERC20 deposit
message ERC20Deposit {
  bytes tx_id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "Hash",
    (gogoproto.customname) = "TxID"
  ];
  bytes amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false
  ];
  string asset = 3;
  string destination_chain = 4;
  bytes burner_address = 5
      [ (gogoproto.nullable) = false, (gogoproto.customtype) = "Address" ];
}

// ERC20TokenDeployment describes information about an ERC20 token
message ERC20TokenDeployment {
  string asset = 1;
  string token_address = 2
      [ (gogoproto.nullable) = false, (gogoproto.customtype) = "Address" ];
}

message Command {
  bytes id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "ID",
    (gogoproto.customtype) = "CommandID"
  ];
  string command = 2;
  bytes params = 3;
  string key_id = 4 [ (gogoproto.customname) = "KeyID" ];
}

message BatchedCommands {
  enum Status {
    option (gogoproto.goproto_enum_prefix) = false;

    STATUS_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "Unspecified" ];
    STATUS_SIGNING = 1 [ (gogoproto.enumvalue_customname) = "Signing" ];
    STATUS_ABORTED = 2 [ (gogoproto.enumvalue_customname) = "Aborted" ];
    STATUS_SIGNED = 3 [ (gogoproto.enumvalue_customname) = "Signed" ];
  }

  bytes id = 1 [ (gogoproto.customname) = "ID" ];
  repeated bytes command_ids = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "CommandIDs",
    (gogoproto.customtype) = "CommandID"
  ];
  bytes data = 3;
  bytes sig_hash = 4
      [ (gogoproto.nullable) = false, (gogoproto.customtype) = "Hash" ];
  Status status = 5;
  string key_id = 6 [ (gogoproto.customname) = "KeyID" ];
}

// TransferOwnership contains information for a transfer ownership
message TransferOwnership {
  bytes tx_id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "Hash",
    (gogoproto.customname) = "TxID"
  ];

  string next_key_id = 3 [ (gogoproto.customname) = "NextKeyID" ];
}

enum DepositStatus {
  option (gogoproto.goproto_enum_prefix) = true;
  option (gogoproto.goproto_enum_stringer) = true;

  DEPOSIT_STATUS_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "None" ];
  DEPOSIT_STATUS_PENDING = 1 [ (gogoproto.enumvalue_customname) = "Pending" ];
  DEPOSIT_STATUS_CONFIRMED = 2
      [ (gogoproto.enumvalue_customname) = "Confirmed" ];
  DEPOSIT_STATUS_BURNED = 3 [ (gogoproto.enumvalue_customname) = "Burned" ];
}
