syntax = "proto3";
package axelarnet.v1beta1;

option go_package = "github.com/axelarnetwork/axelar-core/x/axelarnet/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "axelarnet/v1beta1/tx.proto";
import "axelarnet/v1beta1/query.proto";

option (gogoproto.goproto_registration) = true;

// Msg defines the axelarnet Msg service.
service MsgService {
  rpc Link(LinkRequest) returns (LinkResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/link/{recipient_chain}"
      body : "*"
    };
  }
  rpc ConfirmDeposit(ConfirmDepositRequest) returns (ConfirmDepositResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/confirm-deposit"
      body : "*"
    };
  }
  rpc ExecutePendingTransfers(ExecutePendingTransfersRequest)
      returns (ExecutePendingTransfersResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/execute-pending-transfers"
      body : "*"
    };
  }
  rpc RegisterIBCPath(RegisterIBCPathRequest)
      returns (RegisterIBCPathResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/register-ibc-path"
      body : "*"
    };
  }
  rpc AddCosmosBasedChain(AddCosmosBasedChainRequest)
      returns (AddCosmosBasedChainResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/add-cosmos-based-chain"
      body : "*"
    };
  }
  rpc RegisterAsset(RegisterAssetRequest) returns (RegisterAssetResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/register-asset"
      body : "*"
    };
  }

  rpc RouteIBCTransfers(RouteIBCTransfersRequest)
      returns (RouteIBCTransfersResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/route-ibc-transfers"
      body : "*"
    };
  }
  rpc RegisterFeeCollector(RegisterFeeCollectorRequest)
      returns (RegisterFeeCollectorResponse) {
    option (google.api.http) = {
      post : "/axelar/axelarnet/register-fee-collector"
      body : "*"
    };
  }
}

// QueryService defines the gRPC querier service.
service QueryService {
  rpc PendingIBCTransferCount(PendingIBCTransferCountRequest)
      returns (PendingIBCTransferCountResponse) {
    option (google.api.http).get =
        "/axelar/axelarnet/v1beta1/ibc_transfer_count";
  }
}
