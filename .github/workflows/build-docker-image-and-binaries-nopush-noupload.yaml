name: Test parallel builds

on:
  push:
    branches:
      - 'feat/add-parrallel-docker-builds'

jobs:
  release-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
        arch: [amd64, arm64, arm]
        exclude:
          - {os: "macos-latest", arch: "arm"}

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Get Bytecode Version
        id: bytecode_version
        run: echo ::set-output name=VERSION::$(cat contract-artifacts/version-config.json | jq -r '.gateway')

      - name: Download Bytecode
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: axelarnetwork/solidity-cgp-gateway
          workflow: publish-bytecode.yaml
          name: Bytecode-${{ steps.bytecode_version.outputs.VERSION }}
          path: contract-artifacts/gateway

      - name: Populate Bytecode
        run: |
          bash ./scripts/populate-bytecode.sh

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.5

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build and sign binary for ubuntu amd64
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        env:
          SEMVER: 8.8.8
          ARCH: amd64
          OS: linux
        run: |
          make build
          mv ./bin/axelard ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"
          gpg --armor --detach-sign  ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Build and sign binary for ubuntu arm64
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'arm64'
        env:
          SEMVER: 8.8.8
          ARCH: arm64
          OS: linux
        run: |
          make build
          mv ./bin/axelard ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"
          gpg --armor --detach-sign  ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Build and sign binary for ubuntu arm
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'arm'
        env:
          ARCH: arm
          OS: linux
          SEMVER: 8.8.8
        run: |
          make build
          mv ./bin/axelard ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"
          gpg --armor --detach-sign  ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Build and sign binary for macos arm64
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        env:
          ARCH: arm64
          OS: darwin
          SEMVER: 8.8.8
        run: |
          make build
          mv ./bin/axelard ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"
          gpg --armor --detach-sign  ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Build and sign binary for macos amd64
        if: matrix.os == 'macos-latest' && matrix.arch == 'amd64'
        env:
          ARCH: amd64
          OS: darwin
          SEMVER: 8.8.8
        run: |
          make build
          mv ./bin/axelard ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"
          gpg --armor --detach-sign  ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Check architecture
        run: |
          for i in `ls | grep -v .asc`
          do
            file ./bin/axelard-* 
          done
          
      - name: Check ledger support
        if: matrix.arch == 'amd64'
        run: |
          for i in `ls | grep -v .asc`
          do  
            ./bin/axelard-* version --long 2>&1 | grep "build_tags: ledger" 
          done

      - name: Create zip and sha256 files
        working-directory: ./bin
        run: |
          for i in `ls | grep -v .asc`
          do
            shasum -a 256 $i | awk '{print $1}' > $i.sha256
            zip $i.zip $i
            shasum -a 256 $i.zip | awk '{print $1}' > $i.zip.sha256
          done

  release-docker:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Set up ssh agent
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.CICD_RSA_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          config: .github/buildkit-config.toml

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME_ROS }}
          password: ${{ secrets.DOCKER_HUB_TOKEN_ROS }}

      - name: Get Bytecode Version
        id: bytecode_version
        run: echo ::set-output name=VERSION::$(cat contract-artifacts/version-config.json | jq -r '.gateway')

      - name: Download Bytecode
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: axelarnetwork/solidity-cgp-gateway
          workflow: publish-bytecode.yaml
          name: Bytecode-${{ steps.bytecode_version.outputs.VERSION }}
          path: contract-artifacts/gateway

      - name: Populate Bytecode
        run: |
          bash ./scripts/populate-bytecode.sh

      - name: Build and push docker image for linux/amd64
        run: |
          make build-push-docker-images
        env:
          PLATFORM: 'linux/amd64'
          SEMVER: 8.8.8

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Sign the images with GitHub OIDC
        run: cosign sign --oidc-issuer https://token.actions.githubusercontent.com ${TAGS}
        env:
          TAGS: tototesteur/axelar-core:8.8.8
          COSIGN_EXPERIMENTAL: 1
