name: Test parallel builds

on:
  push:
    branches:
      - 'feat/add-parrallel-docker-builds'

jobs:
  release-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
        arch: [amd64]

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Get Bytecode Version
        id: bytecode_version
        run: echo ::set-output name=VERSION::$(cat contract-artifacts/version-config.json | jq -r '.gateway')

      - name: Download Bytecode
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: axelarnetwork/solidity-cgp-gateway
          workflow: publish-bytecode.yaml
          name: Bytecode-${{ steps.bytecode_version.outputs.VERSION }}
          path: contract-artifacts/gateway

      - name: Populate Bytecode
        run: |
          bash ./scripts/populate-bytecode.sh

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.5

      - name: Build Binaries for Linux/MacOS
        env:
          SEMVER: 7.7.7
        run: |
          if [ "$RUNNER_OS" == "Linux" ]
          then
              OS="linux"
          else
              OS="darwin"
          fi
          ARCH="${{ matrix.arch }}"
          make build
          mv ./bin/axelard ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Unit test (check ledger support)
        run: |
          ./bin/axelard-* version --long 2>&1 | grep "build_tags: ledger"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign Binaries
        working-directory: ./bin
        env:
          SEMVER: 7.7.7
        run: |
          if [ "$RUNNER_OS" == "Linux" ]
          then
              OS="linux"
          else
              OS="darwin"
          fi
          ARCH="${{ matrix.arch }}"
          gpg --armor --detach-sign  axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Create zip and sha256 files
        working-directory: ./bin
        run: |
          for i in `ls | grep -v .asc`
          do
            shasum -a 256 $i | awk '{print $1}' > $i.sha256
            zip $i.zip $i
            shasum -a 256 $i.zip | awk '{print $1}' > $i.zip.sha256
          done

  release-docker:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        number: [1,2,3,4]

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          submodules: recursive

      - name: Set up ssh agent
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.CICD_RSA_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          config: .github/buildkit-config.toml

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME_ROS }}
          password: ${{ secrets.DOCKER_HUB_TOKEN_ROS }}

      - name: Get Bytecode Version
        id: bytecode_version
        run: echo ::set-output name=VERSION::$(cat contract-artifacts/version-config.json | jq -r '.gateway')

      - name: Download Bytecode
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: axelarnetwork/solidity-cgp-gateway
          workflow: publish-bytecode.yaml
          name: Bytecode-${{ steps.bytecode_version.outputs.VERSION }}
          path: contract-artifacts/gateway

      - name: Populate Bytecode
        run: |
          bash ./scripts/populate-bytecode.sh

      - name: Build and push docker image for linux/arm64
        if: matrix.number == '1'
        run: |
          make build-push-docker-images
        env:
          PLATFORM: 'linux/arm64'
          SUFFIX: 'linux-arm64'
          SEMVER: 7.7.7

      - name: Build and push docker image for linux/amd64
        if: matrix.number == '2'
        run: |
          make build-push-docker-images
        env:
          PLATFORM: 'linux/amd64'
          SUFFIX: 'linux-amd64'
          SEMVER: 7.7.7

      - name: Build and push docker image for linux/arm/v7
        if: matrix.number == '3'
        run: |
          make build-push-docker-images
        env:
          PLATFORM: 'linux/arm/v7'
          SUFFIX: 'linux-armv7'
          SEMVER: 7.7.7

      - name: Build and push docker image for linux/arm/v6
        if: matrix.number == '4'
        run: |
          make build-push-docker-images
        env:
          PLATFORM: 'linux/arm/v6'
          SUFFIX: 'linux-armv6'
          SEMVER: 7.7.7

  combine-sign:

    needs: release-docker
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME_ROS }}
          password: ${{ secrets.DOCKER_HUB_TOKEN_ROS }}

      - name: Create multiarch manifest
        run: |
          docker manifest create tototesteur/axelar-core:${SEMVER} \
          tototesteur/axelar-core-linux-arm64:${SEMVER} \
          tototesteur/axelar-core-linux-amd64:${SEMVER} \
          tototesteur/axelar-core-linux-armv6:${SEMVER} \
          tototesteur/axelar-core-linux-armv7:${SEMVER}
        env:
          SEMVER: 7.7.7

      - name: push manifest
        run: |
          docker manifest push tototesteur/axelar-core:${SEMVER}
        env:
          SEMVER: 7.7.7

      - name: Sign the images with GitHub OIDC
        run: cosign sign --oidc-issuer https://token.actions.githubusercontent.com ${TAGS}
        env:
          TAGS: tototesteur/axelar-core:7.7.7
          COSIGN_EXPERIMENTAL: 1
