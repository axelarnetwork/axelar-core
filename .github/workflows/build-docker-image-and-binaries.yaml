name: Upload Binaries and Docker Image

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Github tag to release binaries for (reusing an existing tag will make the pipeline fail)
        required: true
        default: latest

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
        arch: [amd64, arm64, arm]
        exclude:
          - {os: "macos-latest", arch: "arm"}

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Validate tag
        env:
          SEMVER: ${{ github.event.inputs.tag }}
        run: |
          if [[ $SEMVER =~ v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; then echo "Tag is okay" && exit 0; else echo "invalid tag" && exit 1; fi
          aws s3 ls s3://axelar-releases/axelard/"$SEMVER" && echo "tag already exists, use a new one" && exit 1          

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          ref: ${{ github.event.inputs.tag }}
          submodules: recursive

      - name: Get Bytecode Version
        id: bytecode_version
        run: echo ::set-output name=VERSION::$(cat contract-artifacts/version-config.json | jq -r '.gateway')

      - name: Download Bytecode
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: axelarnetwork/solidity-cgp-gateway
          workflow: publish-bytecode.yaml
          name: Bytecode-${{ steps.bytecode_version.outputs.VERSION }}
          path: contract-artifacts/gateway

      - name: Populate Bytecode
        run: |
          bash ./scripts/populate-bytecode.sh

      - name: Install Cosign
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        uses: sigstore/cosign-installer@main

      - name: Set up ssh agent
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        uses: webfactory/ssh-agent@v0.5.2
        with:
          ssh-private-key: ${{ secrets.CICD_RSA_KEY }}

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          config: .github/buildkit-config.toml

      - name: Login to DockerHub
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push docker image for all platforms
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        run: |
          make build-push-docker-images
        env:
          SEMVER: ${{ github.event.inputs.tag }}

      - name: Sign the images with GitHub OIDC
        if: matrix.os == 'ubuntu-18.04' && matrix.arch == 'amd64'
        run: cosign sign --oidc-issuer https://token.actions.githubusercontent.com ${TAGS}
        env:
          TAGS: axelarnet/axelar-core:${{ github.event.inputs.tag }}
          COSIGN_EXPERIMENTAL: 1

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.5

      - name: Build Binaries for Linux/MacOS
        env:
          SEMVER: ${{ github.event.inputs.tag }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ]
          then
              OS="linux"
          else
              OS="darwin"
          fi
          ARCH="${{ matrix.arch }}"
          make build
          mv ./bin/axelard ./bin/axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Unit test (check ledger support)
        run: |
          ./bin/axelard-* version --long 2>&1 | grep "build_tags: ledger"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign Binaries
        working-directory: ./bin
        env:
          SEMVER: ${{ github.event.inputs.tag }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ]
          then
              OS="linux"
          else
              OS="darwin"
          fi
          ARCH="${{ matrix.arch }}"
          gpg --armor --detach-sign  axelard-"$OS"-"$ARCH"-"$SEMVER"

      - name: Create zip and sha256 files
        working-directory: ./bin
        run: |
          for i in `ls | grep -v .asc`
          do
            shasum -a 256 $i | awk '{print $1}' > $i.sha256
            zip $i.zip $i
            shasum -a 256 $i.zip | awk '{print $1}' > $i.zip.sha256
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./bin/*
          tag: ${{ github.event.inputs.tag }}
          overwrite: true
          file_glob: true

      - name: Upload binaries to S3
        env:
          S3_PATH: s3://axelar-releases/axelard/${{ github.event.inputs.tag }}
        run: |
          aws s3 cp ./bin ${S3_PATH}/ --recursive
