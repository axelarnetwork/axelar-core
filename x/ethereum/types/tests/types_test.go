package tests

import (
	"math/big"
	"testing"

	"github.com/axelarnetwork/axelar-core/x/ethereum/types"
	"github.com/stretchr/testify/assert"

	"github.com/ethereum/go-ethereum/common"
)

func TestCreateExecuteMintData_SingleMint(t *testing.T) {
	chainID := big.NewInt(1)
	var commandID [32]byte
	copy(commandID[:], common.FromHex("0xec78d9c22c08bb9f0ecd5d95571ae83e3f22219c5a9278c3270691d50abfd91b"))
	address := "0x63FC2aD3d021a4D7e64323529a55a9442C444dA0"
	denom := "AAT"
	amount := big.NewInt(9999)

	expected := "0000000000000000000000000000000000000000000000000000000000000001ec78d9c22c08bb9f0ecd5d95571ae83e3f22219c5a9278c3270691d50abfd91b000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000096d696e74546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000014141540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000063fc2ad3d021a4d7e64323529a55a9442c444da00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000270f"
	actual, err := types.CreateExecuteMintData(
		chainID,
		commandID,
		[]string{address},
		[]string{denom},
		[]*big.Int{amount},
	)

	assert.NoError(t, err)
	assert.Equal(t, expected, common.Bytes2Hex(actual))
}

func TestCreateExecuteMintData_MultipleMint(t *testing.T) {
	chainID := big.NewInt(1)
	var commandID [32]byte
	copy(commandID[:], common.FromHex("0xec78d9c22c08bb9f0ecd5d95571ae83e3f22219c5a9278c3270691d50abfd91b"))
	addressA := "0x63FC2aD3d021a4D7e64323529a55a9442C444dA0"
	addressB := "0x4183d62963434056e75e9854BC4ba92AA43A2d08"
	denomA := "AAT"
	denomB := "ABTC"
	amountA := big.NewInt(9999)
	amountB := big.NewInt(9999999)

	expected := "0000000000000000000000000000000000000000000000000000000000000001ec78d9c22c08bb9f0ecd5d95571ae83e3f22219c5a9278c3270691d50abfd91b000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000096d696e74546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000241415400000000000000000000000000000000000000000000000000000000004142544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000063fc2ad3d021a4d7e64323529a55a9442c444da00000000000000000000000004183d62963434056e75e9854bc4ba92aa43a2d080000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000270f000000000000000000000000000000000000000000000000000000000098967f"
	actual, err := types.CreateExecuteMintData(
		chainID,
		commandID,
		[]string{addressA, addressB},
		[]string{denomA, denomB},
		[]*big.Int{amountA, amountB},
	)

	assert.NoError(t, err)
	assert.Equal(t, expected, common.Bytes2Hex(actual))
}

func TestGetEthereumSignHash_CorrectEthereumSignHash(t *testing.T) {
	data := common.FromHex("0000000000000000000000000000000000000000000000000000000000000001ec78d9c22c08bb9f0ecd5d95571ae83e3f22219c5a9278c3270691d50abfd91b000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000096d696e74546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000014141540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000063fc2ad3d021a4d7e64323529a55a9442c444da00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000270f")

	expected := "0xe7bce8f57491e71212d930096bacf9288c711e5f27200946edd570e3a93546bf"
	actual := types.GetEthereumSignHash(data)

	assert.Equal(t, expected, actual.Hex())
}
