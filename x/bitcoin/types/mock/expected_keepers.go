// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"crypto/ecdsa"
	utils "github.com/axelarnetwork/axelar-core/utils"
	"github.com/axelarnetwork/axelar-core/x/bitcoin/types"
	nexus "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	snapshot "github.com/axelarnetwork/axelar-core/x/snapshot/exported"
	github_com_axelarnetwork_axelar_core_x_tss_exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/btcsuite/btcd/wire"
	github_com_btcsuite_btcutil "github.com/btcsuite/btcutil"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/tendermint/tendermint/libs/log"
	"sync"
	time "time"
)

// Ensure, that VoterMock does implement types.Voter.
// If this is not the case, regenerate this file with moq.
var _ types.Voter = &VoterMock{}

// VoterMock is a mock implementation of types.Voter.
//
// 	func TestSomethingThatUsesVoter(t *testing.T) {
//
// 		// make and configure a mocked types.Voter
// 		mockedVoter := &VoterMock{
// 			GetPollFunc: func(ctx sdk.Context, pollKey exported.PollKey) exported.Poll {
// 				panic("mock out the GetPoll method")
// 			},
// 			InitializePollFunc: func(ctx sdk.Context, key exported.PollKey, voters []sdk.ValAddress, pollProperties ...exported.PollProperty) error {
// 				panic("mock out the InitializePoll method")
// 			},
// 			InitializePollWithSnapshotFunc: func(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error {
// 				panic("mock out the InitializePollWithSnapshot method")
// 			},
// 		}
//
// 		// use mockedVoter in code that requires types.Voter
// 		// and then make assertions.
//
// 	}
type VoterMock struct {
	// GetPollFunc mocks the GetPoll method.
	GetPollFunc func(ctx sdk.Context, pollKey exported.PollKey) exported.Poll

	// InitializePollFunc mocks the InitializePoll method.
	InitializePollFunc func(ctx sdk.Context, key exported.PollKey, voters []sdk.ValAddress, pollProperties ...exported.PollProperty) error

	// InitializePollWithSnapshotFunc mocks the InitializePollWithSnapshot method.
	InitializePollWithSnapshotFunc func(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error

	// calls tracks calls to the methods.
	calls struct {
		// GetPoll holds details about calls to the GetPoll method.
		GetPoll []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// PollKey is the pollKey argument value.
			PollKey exported.PollKey
		}
		// InitializePoll holds details about calls to the InitializePoll method.
		InitializePoll []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Key is the key argument value.
			Key exported.PollKey
			// Voters is the voters argument value.
			Voters []sdk.ValAddress
			// PollProperties is the pollProperties argument value.
			PollProperties []exported.PollProperty
		}
		// InitializePollWithSnapshot holds details about calls to the InitializePollWithSnapshot method.
		InitializePollWithSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Key is the key argument value.
			Key exported.PollKey
			// SnapshotSeqNo is the snapshotSeqNo argument value.
			SnapshotSeqNo int64
			// PollProperties is the pollProperties argument value.
			PollProperties []exported.PollProperty
		}
	}
	lockGetPoll                    sync.RWMutex
	lockInitializePoll             sync.RWMutex
	lockInitializePollWithSnapshot sync.RWMutex
}

// GetPoll calls GetPollFunc.
func (mock *VoterMock) GetPoll(ctx sdk.Context, pollKey exported.PollKey) exported.Poll {
	if mock.GetPollFunc == nil {
		panic("VoterMock.GetPollFunc: method is nil but Voter.GetPoll was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		PollKey exported.PollKey
	}{
		Ctx:     ctx,
		PollKey: pollKey,
	}
	mock.lockGetPoll.Lock()
	mock.calls.GetPoll = append(mock.calls.GetPoll, callInfo)
	mock.lockGetPoll.Unlock()
	return mock.GetPollFunc(ctx, pollKey)
}

// GetPollCalls gets all the calls that were made to GetPoll.
// Check the length with:
//     len(mockedVoter.GetPollCalls())
func (mock *VoterMock) GetPollCalls() []struct {
	Ctx     sdk.Context
	PollKey exported.PollKey
} {
	var calls []struct {
		Ctx     sdk.Context
		PollKey exported.PollKey
	}
	mock.lockGetPoll.RLock()
	calls = mock.calls.GetPoll
	mock.lockGetPoll.RUnlock()
	return calls
}

// InitializePoll calls InitializePollFunc.
func (mock *VoterMock) InitializePoll(ctx sdk.Context, key exported.PollKey, voters []sdk.ValAddress, pollProperties ...exported.PollProperty) error {
	if mock.InitializePollFunc == nil {
		panic("VoterMock.InitializePollFunc: method is nil but Voter.InitializePoll was just called")
	}
	callInfo := struct {
		Ctx            sdk.Context
		Key            exported.PollKey
		Voters         []sdk.ValAddress
		PollProperties []exported.PollProperty
	}{
		Ctx:            ctx,
		Key:            key,
		Voters:         voters,
		PollProperties: pollProperties,
	}
	mock.lockInitializePoll.Lock()
	mock.calls.InitializePoll = append(mock.calls.InitializePoll, callInfo)
	mock.lockInitializePoll.Unlock()
	return mock.InitializePollFunc(ctx, key, voters, pollProperties...)
}

// InitializePollCalls gets all the calls that were made to InitializePoll.
// Check the length with:
//     len(mockedVoter.InitializePollCalls())
func (mock *VoterMock) InitializePollCalls() []struct {
	Ctx            sdk.Context
	Key            exported.PollKey
	Voters         []sdk.ValAddress
	PollProperties []exported.PollProperty
} {
	var calls []struct {
		Ctx            sdk.Context
		Key            exported.PollKey
		Voters         []sdk.ValAddress
		PollProperties []exported.PollProperty
	}
	mock.lockInitializePoll.RLock()
	calls = mock.calls.InitializePoll
	mock.lockInitializePoll.RUnlock()
	return calls
}

// InitializePollWithSnapshot calls InitializePollWithSnapshotFunc.
func (mock *VoterMock) InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error {
	if mock.InitializePollWithSnapshotFunc == nil {
		panic("VoterMock.InitializePollWithSnapshotFunc: method is nil but Voter.InitializePollWithSnapshot was just called")
	}
	callInfo := struct {
		Ctx            sdk.Context
		Key            exported.PollKey
		SnapshotSeqNo  int64
		PollProperties []exported.PollProperty
	}{
		Ctx:            ctx,
		Key:            key,
		SnapshotSeqNo:  snapshotSeqNo,
		PollProperties: pollProperties,
	}
	mock.lockInitializePollWithSnapshot.Lock()
	mock.calls.InitializePollWithSnapshot = append(mock.calls.InitializePollWithSnapshot, callInfo)
	mock.lockInitializePollWithSnapshot.Unlock()
	return mock.InitializePollWithSnapshotFunc(ctx, key, snapshotSeqNo, pollProperties...)
}

// InitializePollWithSnapshotCalls gets all the calls that were made to InitializePollWithSnapshot.
// Check the length with:
//     len(mockedVoter.InitializePollWithSnapshotCalls())
func (mock *VoterMock) InitializePollWithSnapshotCalls() []struct {
	Ctx            sdk.Context
	Key            exported.PollKey
	SnapshotSeqNo  int64
	PollProperties []exported.PollProperty
} {
	var calls []struct {
		Ctx            sdk.Context
		Key            exported.PollKey
		SnapshotSeqNo  int64
		PollProperties []exported.PollProperty
	}
	mock.lockInitializePollWithSnapshot.RLock()
	calls = mock.calls.InitializePollWithSnapshot
	mock.lockInitializePollWithSnapshot.RUnlock()
	return calls
}

// Ensure, that SignerMock does implement types.Signer.
// If this is not the case, regenerate this file with moq.
var _ types.Signer = &SignerMock{}

// SignerMock is a mock implementation of types.Signer.
//
// 	func TestSomethingThatUsesSigner(t *testing.T) {
//
// 		// make and configure a mocked types.Signer
// 		mockedSigner := &SignerMock{
// 			AssertMatchesRequirementsFunc: func(ctx sdk.Context, snapshotter snapshot.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
// 				panic("mock out the AssertMatchesRequirements method")
// 			},
// 			AssignNextKeyFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error {
// 				panic("mock out the AssignNextKey method")
// 			},
// 			GetCurrentKeyFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetCurrentKey method")
// 			},
// 			GetCurrentKeyIDFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
// 				panic("mock out the GetCurrentKeyID method")
// 			},
// 			GetExternalKeyIDsFunc: func(ctx sdk.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
// 				panic("mock out the GetExternalKeyIDs method")
// 			},
// 			GetExternalMultisigThresholdFunc: func(ctx sdk.Context) utils.Threshold {
// 				panic("mock out the GetExternalMultisigThreshold method")
// 			},
// 			GetKeyFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetKey method")
// 			},
// 			GetKeyByRotationCountFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, rotationCount int64) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetKeyByRotationCount method")
// 			},
// 			GetKeyForSigIDFunc: func(ctx sdk.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetKeyForSigID method")
// 			},
// 			GetKeyUnbondingLockingKeyRotationCountFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetKeyUnbondingLockingKeyRotationCount method")
// 			},
// 			GetNextKeyFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetNextKey method")
// 			},
// 			GetOldActiveKeysFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.Key, error) {
// 				panic("mock out the GetOldActiveKeys method")
// 			},
// 			GetRotationCountFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) int64 {
// 				panic("mock out the GetRotationCount method")
// 			},
// 			GetRotationCountOfKeyIDFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
// 				panic("mock out the GetRotationCountOfKeyID method")
// 			},
// 			GetSigFunc: func(ctx sdk.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
// 				panic("mock out the GetSig method")
// 			},
// 			GetSnapshotCounterForKeyIDFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
// 				panic("mock out the GetSnapshotCounterForKeyID method")
// 			},
// 			RotateKeyFunc: func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
// 				panic("mock out the RotateKey method")
// 			},
// 			SetInfoForSigFunc: func(ctx sdk.Context, sigID string, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo)  {
// 				panic("mock out the SetInfoForSig method")
// 			},
// 			SetKeyFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, key ecdsa.PublicKey)  {
// 				panic("mock out the SetKey method")
// 			},
// 			SetSigFunc: func(ctx sdk.Context, sigID string, signature []byte)  {
// 				panic("mock out the SetSig method")
// 			},
// 			SetSigStatusFunc: func(ctx sdk.Context, sigID string, status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus)  {
// 				panic("mock out the SetSigStatus method")
// 			},
// 			StartSignFunc: func(ctx sdk.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter snapshot.Snapshotter, voter interface{InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error}) error {
// 				panic("mock out the StartSign method")
// 			},
// 		}
//
// 		// use mockedSigner in code that requires types.Signer
// 		// and then make assertions.
//
// 	}
type SignerMock struct {
	// AssertMatchesRequirementsFunc mocks the AssertMatchesRequirements method.
	AssertMatchesRequirementsFunc func(ctx sdk.Context, snapshotter snapshot.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error

	// AssignNextKeyFunc mocks the AssignNextKey method.
	AssignNextKeyFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error

	// GetCurrentKeyFunc mocks the GetCurrentKey method.
	GetCurrentKeyFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetCurrentKeyIDFunc mocks the GetCurrentKeyID method.
	GetCurrentKeyIDFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool)

	// GetExternalKeyIDsFunc mocks the GetExternalKeyIDs method.
	GetExternalKeyIDsFunc func(ctx sdk.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool)

	// GetExternalMultisigThresholdFunc mocks the GetExternalMultisigThreshold method.
	GetExternalMultisigThresholdFunc func(ctx sdk.Context) utils.Threshold

	// GetKeyFunc mocks the GetKey method.
	GetKeyFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetKeyByRotationCountFunc mocks the GetKeyByRotationCount method.
	GetKeyByRotationCountFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, rotationCount int64) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetKeyForSigIDFunc mocks the GetKeyForSigID method.
	GetKeyForSigIDFunc func(ctx sdk.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetKeyUnbondingLockingKeyRotationCountFunc mocks the GetKeyUnbondingLockingKeyRotationCount method.
	GetKeyUnbondingLockingKeyRotationCountFunc func(ctx sdk.Context) int64

	// GetNextKeyFunc mocks the GetNextKey method.
	GetNextKeyFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetOldActiveKeysFunc mocks the GetOldActiveKeys method.
	GetOldActiveKeysFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.Key, error)

	// GetRotationCountFunc mocks the GetRotationCount method.
	GetRotationCountFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) int64

	// GetRotationCountOfKeyIDFunc mocks the GetRotationCountOfKeyID method.
	GetRotationCountOfKeyIDFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool)

	// GetSigFunc mocks the GetSig method.
	GetSigFunc func(ctx sdk.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus)

	// GetSnapshotCounterForKeyIDFunc mocks the GetSnapshotCounterForKeyID method.
	GetSnapshotCounterForKeyIDFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool)

	// RotateKeyFunc mocks the RotateKey method.
	RotateKeyFunc func(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error

	// SetInfoForSigFunc mocks the SetInfoForSig method.
	SetInfoForSigFunc func(ctx sdk.Context, sigID string, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo)

	// SetKeyFunc mocks the SetKey method.
	SetKeyFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, key ecdsa.PublicKey)

	// SetSigFunc mocks the SetSig method.
	SetSigFunc func(ctx sdk.Context, sigID string, signature []byte)

	// SetSigStatusFunc mocks the SetSigStatus method.
	SetSigStatusFunc func(ctx sdk.Context, sigID string, status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus)

	// StartSignFunc mocks the StartSign method.
	StartSignFunc func(ctx sdk.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter snapshot.Snapshotter, voter interface {
		InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error
	}) error

	// calls tracks calls to the methods.
	calls struct {
		// AssertMatchesRequirements holds details about calls to the AssertMatchesRequirements method.
		AssertMatchesRequirements []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Snapshotter is the snapshotter argument value.
			Snapshotter snapshot.Snapshotter
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// AssignNextKey holds details about calls to the AssignNextKey method.
		AssignNextKey []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetCurrentKey holds details about calls to the GetCurrentKey method.
		GetCurrentKey []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetCurrentKeyID holds details about calls to the GetCurrentKeyID method.
		GetCurrentKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetExternalKeyIDs holds details about calls to the GetExternalKeyIDs method.
		GetExternalKeyIDs []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// GetExternalMultisigThreshold holds details about calls to the GetExternalMultisigThreshold method.
		GetExternalMultisigThreshold []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetKey holds details about calls to the GetKey method.
		GetKey []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetKeyByRotationCount holds details about calls to the GetKeyByRotationCount method.
		GetKeyByRotationCount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
			// RotationCount is the rotationCount argument value.
			RotationCount int64
		}
		// GetKeyForSigID holds details about calls to the GetKeyForSigID method.
		GetKeyForSigID []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetKeyUnbondingLockingKeyRotationCount holds details about calls to the GetKeyUnbondingLockingKeyRotationCount method.
		GetKeyUnbondingLockingKeyRotationCount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetNextKey holds details about calls to the GetNextKey method.
		GetNextKey []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetOldActiveKeys holds details about calls to the GetOldActiveKeys method.
		GetOldActiveKeys []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetRotationCount holds details about calls to the GetRotationCount method.
		GetRotationCount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetRotationCountOfKeyID holds details about calls to the GetRotationCountOfKeyID method.
		GetRotationCountOfKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetSig holds details about calls to the GetSig method.
		GetSig []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetSnapshotCounterForKeyID holds details about calls to the GetSnapshotCounterForKeyID method.
		GetSnapshotCounterForKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// RotateKey holds details about calls to the RotateKey method.
		RotateKey []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// SetInfoForSig holds details about calls to the SetInfoForSig method.
		SetInfoForSig []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// SigID is the sigID argument value.
			SigID string
			// Info is the info argument value.
			Info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		}
		// SetKey holds details about calls to the SetKey method.
		SetKey []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// Key is the key argument value.
			Key ecdsa.PublicKey
		}
		// SetSig holds details about calls to the SetSig method.
		SetSig []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// SigID is the sigID argument value.
			SigID string
			// Signature is the signature argument value.
			Signature []byte
		}
		// SetSigStatus holds details about calls to the SetSigStatus method.
		SetSigStatus []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// SigID is the sigID argument value.
			SigID string
			// Status is the status argument value.
			Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
		}
		// StartSign holds details about calls to the StartSign method.
		StartSign []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Info is the info argument value.
			Info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
			// Snapshotter is the snapshotter argument value.
			Snapshotter snapshot.Snapshotter
			// Voter is the voter argument value.
			Voter interface {
				InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error
			}
		}
	}
	lockAssertMatchesRequirements              sync.RWMutex
	lockAssignNextKey                          sync.RWMutex
	lockGetCurrentKey                          sync.RWMutex
	lockGetCurrentKeyID                        sync.RWMutex
	lockGetExternalKeyIDs                      sync.RWMutex
	lockGetExternalMultisigThreshold           sync.RWMutex
	lockGetKey                                 sync.RWMutex
	lockGetKeyByRotationCount                  sync.RWMutex
	lockGetKeyForSigID                         sync.RWMutex
	lockGetKeyUnbondingLockingKeyRotationCount sync.RWMutex
	lockGetNextKey                             sync.RWMutex
	lockGetOldActiveKeys                       sync.RWMutex
	lockGetRotationCount                       sync.RWMutex
	lockGetRotationCountOfKeyID                sync.RWMutex
	lockGetSig                                 sync.RWMutex
	lockGetSnapshotCounterForKeyID             sync.RWMutex
	lockRotateKey                              sync.RWMutex
	lockSetInfoForSig                          sync.RWMutex
	lockSetKey                                 sync.RWMutex
	lockSetSig                                 sync.RWMutex
	lockSetSigStatus                           sync.RWMutex
	lockStartSign                              sync.RWMutex
}

// AssertMatchesRequirements calls AssertMatchesRequirementsFunc.
func (mock *SignerMock) AssertMatchesRequirements(ctx sdk.Context, snapshotter snapshot.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
	if mock.AssertMatchesRequirementsFunc == nil {
		panic("SignerMock.AssertMatchesRequirementsFunc: method is nil but Signer.AssertMatchesRequirements was just called")
	}
	callInfo := struct {
		Ctx         sdk.Context
		Snapshotter snapshot.Snapshotter
		Chain       nexus.Chain
		KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:         ctx,
		Snapshotter: snapshotter,
		Chain:       chain,
		KeyID:       keyID,
		KeyRole:     keyRole,
	}
	mock.lockAssertMatchesRequirements.Lock()
	mock.calls.AssertMatchesRequirements = append(mock.calls.AssertMatchesRequirements, callInfo)
	mock.lockAssertMatchesRequirements.Unlock()
	return mock.AssertMatchesRequirementsFunc(ctx, snapshotter, chain, keyID, keyRole)
}

// AssertMatchesRequirementsCalls gets all the calls that were made to AssertMatchesRequirements.
// Check the length with:
//     len(mockedSigner.AssertMatchesRequirementsCalls())
func (mock *SignerMock) AssertMatchesRequirementsCalls() []struct {
	Ctx         sdk.Context
	Snapshotter snapshot.Snapshotter
	Chain       nexus.Chain
	KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx         sdk.Context
		Snapshotter snapshot.Snapshotter
		Chain       nexus.Chain
		KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockAssertMatchesRequirements.RLock()
	calls = mock.calls.AssertMatchesRequirements
	mock.lockAssertMatchesRequirements.RUnlock()
	return calls
}

// AssignNextKey calls AssignNextKeyFunc.
func (mock *SignerMock) AssignNextKey(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error {
	if mock.AssignNextKeyFunc == nil {
		panic("SignerMock.AssignNextKeyFunc: method is nil but Signer.AssignNextKey was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
		KeyID:   keyID,
	}
	mock.lockAssignNextKey.Lock()
	mock.calls.AssignNextKey = append(mock.calls.AssignNextKey, callInfo)
	mock.lockAssignNextKey.Unlock()
	return mock.AssignNextKeyFunc(ctx, chain, keyRole, keyID)
}

// AssignNextKeyCalls gets all the calls that were made to AssignNextKey.
// Check the length with:
//     len(mockedSigner.AssignNextKeyCalls())
func (mock *SignerMock) AssignNextKeyCalls() []struct {
	Ctx     sdk.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockAssignNextKey.RLock()
	calls = mock.calls.AssignNextKey
	mock.lockAssignNextKey.RUnlock()
	return calls
}

// GetCurrentKey calls GetCurrentKeyFunc.
func (mock *SignerMock) GetCurrentKey(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetCurrentKeyFunc == nil {
		panic("SignerMock.GetCurrentKeyFunc: method is nil but Signer.GetCurrentKey was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKey.Lock()
	mock.calls.GetCurrentKey = append(mock.calls.GetCurrentKey, callInfo)
	mock.lockGetCurrentKey.Unlock()
	return mock.GetCurrentKeyFunc(ctx, chain, keyRole)
}

// GetCurrentKeyCalls gets all the calls that were made to GetCurrentKey.
// Check the length with:
//     len(mockedSigner.GetCurrentKeyCalls())
func (mock *SignerMock) GetCurrentKeyCalls() []struct {
	Ctx     sdk.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetCurrentKey.RLock()
	calls = mock.calls.GetCurrentKey
	mock.lockGetCurrentKey.RUnlock()
	return calls
}

// GetCurrentKeyID calls GetCurrentKeyIDFunc.
func (mock *SignerMock) GetCurrentKeyID(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
	if mock.GetCurrentKeyIDFunc == nil {
		panic("SignerMock.GetCurrentKeyIDFunc: method is nil but Signer.GetCurrentKeyID was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKeyID.Lock()
	mock.calls.GetCurrentKeyID = append(mock.calls.GetCurrentKeyID, callInfo)
	mock.lockGetCurrentKeyID.Unlock()
	return mock.GetCurrentKeyIDFunc(ctx, chain, keyRole)
}

// GetCurrentKeyIDCalls gets all the calls that were made to GetCurrentKeyID.
// Check the length with:
//     len(mockedSigner.GetCurrentKeyIDCalls())
func (mock *SignerMock) GetCurrentKeyIDCalls() []struct {
	Ctx     sdk.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetCurrentKeyID.RLock()
	calls = mock.calls.GetCurrentKeyID
	mock.lockGetCurrentKeyID.RUnlock()
	return calls
}

// GetExternalKeyIDs calls GetExternalKeyIDsFunc.
func (mock *SignerMock) GetExternalKeyIDs(ctx sdk.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
	if mock.GetExternalKeyIDsFunc == nil {
		panic("SignerMock.GetExternalKeyIDsFunc: method is nil but Signer.GetExternalKeyIDs was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetExternalKeyIDs.Lock()
	mock.calls.GetExternalKeyIDs = append(mock.calls.GetExternalKeyIDs, callInfo)
	mock.lockGetExternalKeyIDs.Unlock()
	return mock.GetExternalKeyIDsFunc(ctx, chain)
}

// GetExternalKeyIDsCalls gets all the calls that were made to GetExternalKeyIDs.
// Check the length with:
//     len(mockedSigner.GetExternalKeyIDsCalls())
func (mock *SignerMock) GetExternalKeyIDsCalls() []struct {
	Ctx   sdk.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   sdk.Context
		Chain nexus.Chain
	}
	mock.lockGetExternalKeyIDs.RLock()
	calls = mock.calls.GetExternalKeyIDs
	mock.lockGetExternalKeyIDs.RUnlock()
	return calls
}

// GetExternalMultisigThreshold calls GetExternalMultisigThresholdFunc.
func (mock *SignerMock) GetExternalMultisigThreshold(ctx sdk.Context) utils.Threshold {
	if mock.GetExternalMultisigThresholdFunc == nil {
		panic("SignerMock.GetExternalMultisigThresholdFunc: method is nil but Signer.GetExternalMultisigThreshold was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetExternalMultisigThreshold.Lock()
	mock.calls.GetExternalMultisigThreshold = append(mock.calls.GetExternalMultisigThreshold, callInfo)
	mock.lockGetExternalMultisigThreshold.Unlock()
	return mock.GetExternalMultisigThresholdFunc(ctx)
}

// GetExternalMultisigThresholdCalls gets all the calls that were made to GetExternalMultisigThreshold.
// Check the length with:
//     len(mockedSigner.GetExternalMultisigThresholdCalls())
func (mock *SignerMock) GetExternalMultisigThresholdCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetExternalMultisigThreshold.RLock()
	calls = mock.calls.GetExternalMultisigThreshold
	mock.lockGetExternalMultisigThreshold.RUnlock()
	return calls
}

// GetKey calls GetKeyFunc.
func (mock *SignerMock) GetKey(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetKeyFunc == nil {
		panic("SignerMock.GetKeyFunc: method is nil but Signer.GetKey was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetKey.Lock()
	mock.calls.GetKey = append(mock.calls.GetKey, callInfo)
	mock.lockGetKey.Unlock()
	return mock.GetKeyFunc(ctx, keyID)
}

// GetKeyCalls gets all the calls that were made to GetKey.
// Check the length with:
//     len(mockedSigner.GetKeyCalls())
func (mock *SignerMock) GetKeyCalls() []struct {
	Ctx   sdk.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetKey.RLock()
	calls = mock.calls.GetKey
	mock.lockGetKey.RUnlock()
	return calls
}

// GetKeyByRotationCount calls GetKeyByRotationCountFunc.
func (mock *SignerMock) GetKeyByRotationCount(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, rotationCount int64) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetKeyByRotationCountFunc == nil {
		panic("SignerMock.GetKeyByRotationCountFunc: method is nil but Signer.GetKeyByRotationCount was just called")
	}
	callInfo := struct {
		Ctx           sdk.Context
		Chain         nexus.Chain
		KeyRole       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		RotationCount int64
	}{
		Ctx:           ctx,
		Chain:         chain,
		KeyRole:       keyRole,
		RotationCount: rotationCount,
	}
	mock.lockGetKeyByRotationCount.Lock()
	mock.calls.GetKeyByRotationCount = append(mock.calls.GetKeyByRotationCount, callInfo)
	mock.lockGetKeyByRotationCount.Unlock()
	return mock.GetKeyByRotationCountFunc(ctx, chain, keyRole, rotationCount)
}

// GetKeyByRotationCountCalls gets all the calls that were made to GetKeyByRotationCount.
// Check the length with:
//     len(mockedSigner.GetKeyByRotationCountCalls())
func (mock *SignerMock) GetKeyByRotationCountCalls() []struct {
	Ctx           sdk.Context
	Chain         nexus.Chain
	KeyRole       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	RotationCount int64
} {
	var calls []struct {
		Ctx           sdk.Context
		Chain         nexus.Chain
		KeyRole       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		RotationCount int64
	}
	mock.lockGetKeyByRotationCount.RLock()
	calls = mock.calls.GetKeyByRotationCount
	mock.lockGetKeyByRotationCount.RUnlock()
	return calls
}

// GetKeyForSigID calls GetKeyForSigIDFunc.
func (mock *SignerMock) GetKeyForSigID(ctx sdk.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetKeyForSigIDFunc == nil {
		panic("SignerMock.GetKeyForSigIDFunc: method is nil but Signer.GetKeyForSigID was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetKeyForSigID.Lock()
	mock.calls.GetKeyForSigID = append(mock.calls.GetKeyForSigID, callInfo)
	mock.lockGetKeyForSigID.Unlock()
	return mock.GetKeyForSigIDFunc(ctx, sigID)
}

// GetKeyForSigIDCalls gets all the calls that were made to GetKeyForSigID.
// Check the length with:
//     len(mockedSigner.GetKeyForSigIDCalls())
func (mock *SignerMock) GetKeyForSigIDCalls() []struct {
	Ctx   sdk.Context
	SigID string
} {
	var calls []struct {
		Ctx   sdk.Context
		SigID string
	}
	mock.lockGetKeyForSigID.RLock()
	calls = mock.calls.GetKeyForSigID
	mock.lockGetKeyForSigID.RUnlock()
	return calls
}

// GetKeyUnbondingLockingKeyRotationCount calls GetKeyUnbondingLockingKeyRotationCountFunc.
func (mock *SignerMock) GetKeyUnbondingLockingKeyRotationCount(ctx sdk.Context) int64 {
	if mock.GetKeyUnbondingLockingKeyRotationCountFunc == nil {
		panic("SignerMock.GetKeyUnbondingLockingKeyRotationCountFunc: method is nil but Signer.GetKeyUnbondingLockingKeyRotationCount was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetKeyUnbondingLockingKeyRotationCount.Lock()
	mock.calls.GetKeyUnbondingLockingKeyRotationCount = append(mock.calls.GetKeyUnbondingLockingKeyRotationCount, callInfo)
	mock.lockGetKeyUnbondingLockingKeyRotationCount.Unlock()
	return mock.GetKeyUnbondingLockingKeyRotationCountFunc(ctx)
}

// GetKeyUnbondingLockingKeyRotationCountCalls gets all the calls that were made to GetKeyUnbondingLockingKeyRotationCount.
// Check the length with:
//     len(mockedSigner.GetKeyUnbondingLockingKeyRotationCountCalls())
func (mock *SignerMock) GetKeyUnbondingLockingKeyRotationCountCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetKeyUnbondingLockingKeyRotationCount.RLock()
	calls = mock.calls.GetKeyUnbondingLockingKeyRotationCount
	mock.lockGetKeyUnbondingLockingKeyRotationCount.RUnlock()
	return calls
}

// GetNextKey calls GetNextKeyFunc.
func (mock *SignerMock) GetNextKey(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetNextKeyFunc == nil {
		panic("SignerMock.GetNextKeyFunc: method is nil but Signer.GetNextKey was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetNextKey.Lock()
	mock.calls.GetNextKey = append(mock.calls.GetNextKey, callInfo)
	mock.lockGetNextKey.Unlock()
	return mock.GetNextKeyFunc(ctx, chain, keyRole)
}

// GetNextKeyCalls gets all the calls that were made to GetNextKey.
// Check the length with:
//     len(mockedSigner.GetNextKeyCalls())
func (mock *SignerMock) GetNextKeyCalls() []struct {
	Ctx     sdk.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetNextKey.RLock()
	calls = mock.calls.GetNextKey
	mock.lockGetNextKey.RUnlock()
	return calls
}

// GetOldActiveKeys calls GetOldActiveKeysFunc.
func (mock *SignerMock) GetOldActiveKeys(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.Key, error) {
	if mock.GetOldActiveKeysFunc == nil {
		panic("SignerMock.GetOldActiveKeysFunc: method is nil but Signer.GetOldActiveKeys was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetOldActiveKeys.Lock()
	mock.calls.GetOldActiveKeys = append(mock.calls.GetOldActiveKeys, callInfo)
	mock.lockGetOldActiveKeys.Unlock()
	return mock.GetOldActiveKeysFunc(ctx, chain, keyRole)
}

// GetOldActiveKeysCalls gets all the calls that were made to GetOldActiveKeys.
// Check the length with:
//     len(mockedSigner.GetOldActiveKeysCalls())
func (mock *SignerMock) GetOldActiveKeysCalls() []struct {
	Ctx     sdk.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetOldActiveKeys.RLock()
	calls = mock.calls.GetOldActiveKeys
	mock.lockGetOldActiveKeys.RUnlock()
	return calls
}

// GetRotationCount calls GetRotationCountFunc.
func (mock *SignerMock) GetRotationCount(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) int64 {
	if mock.GetRotationCountFunc == nil {
		panic("SignerMock.GetRotationCountFunc: method is nil but Signer.GetRotationCount was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetRotationCount.Lock()
	mock.calls.GetRotationCount = append(mock.calls.GetRotationCount, callInfo)
	mock.lockGetRotationCount.Unlock()
	return mock.GetRotationCountFunc(ctx, chain, keyRole)
}

// GetRotationCountCalls gets all the calls that were made to GetRotationCount.
// Check the length with:
//     len(mockedSigner.GetRotationCountCalls())
func (mock *SignerMock) GetRotationCountCalls() []struct {
	Ctx     sdk.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetRotationCount.RLock()
	calls = mock.calls.GetRotationCount
	mock.lockGetRotationCount.RUnlock()
	return calls
}

// GetRotationCountOfKeyID calls GetRotationCountOfKeyIDFunc.
func (mock *SignerMock) GetRotationCountOfKeyID(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
	if mock.GetRotationCountOfKeyIDFunc == nil {
		panic("SignerMock.GetRotationCountOfKeyIDFunc: method is nil but Signer.GetRotationCountOfKeyID was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetRotationCountOfKeyID.Lock()
	mock.calls.GetRotationCountOfKeyID = append(mock.calls.GetRotationCountOfKeyID, callInfo)
	mock.lockGetRotationCountOfKeyID.Unlock()
	return mock.GetRotationCountOfKeyIDFunc(ctx, keyID)
}

// GetRotationCountOfKeyIDCalls gets all the calls that were made to GetRotationCountOfKeyID.
// Check the length with:
//     len(mockedSigner.GetRotationCountOfKeyIDCalls())
func (mock *SignerMock) GetRotationCountOfKeyIDCalls() []struct {
	Ctx   sdk.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetRotationCountOfKeyID.RLock()
	calls = mock.calls.GetRotationCountOfKeyID
	mock.lockGetRotationCountOfKeyID.RUnlock()
	return calls
}

// GetSig calls GetSigFunc.
func (mock *SignerMock) GetSig(ctx sdk.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
	if mock.GetSigFunc == nil {
		panic("SignerMock.GetSigFunc: method is nil but Signer.GetSig was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetSig.Lock()
	mock.calls.GetSig = append(mock.calls.GetSig, callInfo)
	mock.lockGetSig.Unlock()
	return mock.GetSigFunc(ctx, sigID)
}

// GetSigCalls gets all the calls that were made to GetSig.
// Check the length with:
//     len(mockedSigner.GetSigCalls())
func (mock *SignerMock) GetSigCalls() []struct {
	Ctx   sdk.Context
	SigID string
} {
	var calls []struct {
		Ctx   sdk.Context
		SigID string
	}
	mock.lockGetSig.RLock()
	calls = mock.calls.GetSig
	mock.lockGetSig.RUnlock()
	return calls
}

// GetSnapshotCounterForKeyID calls GetSnapshotCounterForKeyIDFunc.
func (mock *SignerMock) GetSnapshotCounterForKeyID(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
	if mock.GetSnapshotCounterForKeyIDFunc == nil {
		panic("SignerMock.GetSnapshotCounterForKeyIDFunc: method is nil but Signer.GetSnapshotCounterForKeyID was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetSnapshotCounterForKeyID.Lock()
	mock.calls.GetSnapshotCounterForKeyID = append(mock.calls.GetSnapshotCounterForKeyID, callInfo)
	mock.lockGetSnapshotCounterForKeyID.Unlock()
	return mock.GetSnapshotCounterForKeyIDFunc(ctx, keyID)
}

// GetSnapshotCounterForKeyIDCalls gets all the calls that were made to GetSnapshotCounterForKeyID.
// Check the length with:
//     len(mockedSigner.GetSnapshotCounterForKeyIDCalls())
func (mock *SignerMock) GetSnapshotCounterForKeyIDCalls() []struct {
	Ctx   sdk.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetSnapshotCounterForKeyID.RLock()
	calls = mock.calls.GetSnapshotCounterForKeyID
	mock.lockGetSnapshotCounterForKeyID.RUnlock()
	return calls
}

// RotateKey calls RotateKeyFunc.
func (mock *SignerMock) RotateKey(ctx sdk.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
	if mock.RotateKeyFunc == nil {
		panic("SignerMock.RotateKeyFunc: method is nil but Signer.RotateKey was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockRotateKey.Lock()
	mock.calls.RotateKey = append(mock.calls.RotateKey, callInfo)
	mock.lockRotateKey.Unlock()
	return mock.RotateKeyFunc(ctx, chain, keyRole)
}

// RotateKeyCalls gets all the calls that were made to RotateKey.
// Check the length with:
//     len(mockedSigner.RotateKeyCalls())
func (mock *SignerMock) RotateKeyCalls() []struct {
	Ctx     sdk.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     sdk.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockRotateKey.RLock()
	calls = mock.calls.RotateKey
	mock.lockRotateKey.RUnlock()
	return calls
}

// SetInfoForSig calls SetInfoForSigFunc.
func (mock *SignerMock) SetInfoForSig(ctx sdk.Context, sigID string, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo) {
	if mock.SetInfoForSigFunc == nil {
		panic("SignerMock.SetInfoForSigFunc: method is nil but Signer.SetInfoForSig was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		SigID string
		Info  github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	}{
		Ctx:   ctx,
		SigID: sigID,
		Info:  info,
	}
	mock.lockSetInfoForSig.Lock()
	mock.calls.SetInfoForSig = append(mock.calls.SetInfoForSig, callInfo)
	mock.lockSetInfoForSig.Unlock()
	mock.SetInfoForSigFunc(ctx, sigID, info)
}

// SetInfoForSigCalls gets all the calls that were made to SetInfoForSig.
// Check the length with:
//     len(mockedSigner.SetInfoForSigCalls())
func (mock *SignerMock) SetInfoForSigCalls() []struct {
	Ctx   sdk.Context
	SigID string
	Info  github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
} {
	var calls []struct {
		Ctx   sdk.Context
		SigID string
		Info  github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	}
	mock.lockSetInfoForSig.RLock()
	calls = mock.calls.SetInfoForSig
	mock.lockSetInfoForSig.RUnlock()
	return calls
}

// SetKey calls SetKeyFunc.
func (mock *SignerMock) SetKey(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, key ecdsa.PublicKey) {
	if mock.SetKeyFunc == nil {
		panic("SignerMock.SetKeyFunc: method is nil but Signer.SetKey was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Key   ecdsa.PublicKey
	}{
		Ctx:   ctx,
		KeyID: keyID,
		Key:   key,
	}
	mock.lockSetKey.Lock()
	mock.calls.SetKey = append(mock.calls.SetKey, callInfo)
	mock.lockSetKey.Unlock()
	mock.SetKeyFunc(ctx, keyID, key)
}

// SetKeyCalls gets all the calls that were made to SetKey.
// Check the length with:
//     len(mockedSigner.SetKeyCalls())
func (mock *SignerMock) SetKeyCalls() []struct {
	Ctx   sdk.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	Key   ecdsa.PublicKey
} {
	var calls []struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Key   ecdsa.PublicKey
	}
	mock.lockSetKey.RLock()
	calls = mock.calls.SetKey
	mock.lockSetKey.RUnlock()
	return calls
}

// SetSig calls SetSigFunc.
func (mock *SignerMock) SetSig(ctx sdk.Context, sigID string, signature []byte) {
	if mock.SetSigFunc == nil {
		panic("SignerMock.SetSigFunc: method is nil but Signer.SetSig was just called")
	}
	callInfo := struct {
		Ctx       sdk.Context
		SigID     string
		Signature []byte
	}{
		Ctx:       ctx,
		SigID:     sigID,
		Signature: signature,
	}
	mock.lockSetSig.Lock()
	mock.calls.SetSig = append(mock.calls.SetSig, callInfo)
	mock.lockSetSig.Unlock()
	mock.SetSigFunc(ctx, sigID, signature)
}

// SetSigCalls gets all the calls that were made to SetSig.
// Check the length with:
//     len(mockedSigner.SetSigCalls())
func (mock *SignerMock) SetSigCalls() []struct {
	Ctx       sdk.Context
	SigID     string
	Signature []byte
} {
	var calls []struct {
		Ctx       sdk.Context
		SigID     string
		Signature []byte
	}
	mock.lockSetSig.RLock()
	calls = mock.calls.SetSig
	mock.lockSetSig.RUnlock()
	return calls
}

// SetSigStatus calls SetSigStatusFunc.
func (mock *SignerMock) SetSigStatus(ctx sdk.Context, sigID string, status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
	if mock.SetSigStatusFunc == nil {
		panic("SignerMock.SetSigStatusFunc: method is nil but Signer.SetSigStatus was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		SigID  string
		Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
	}{
		Ctx:    ctx,
		SigID:  sigID,
		Status: status,
	}
	mock.lockSetSigStatus.Lock()
	mock.calls.SetSigStatus = append(mock.calls.SetSigStatus, callInfo)
	mock.lockSetSigStatus.Unlock()
	mock.SetSigStatusFunc(ctx, sigID, status)
}

// SetSigStatusCalls gets all the calls that were made to SetSigStatus.
// Check the length with:
//     len(mockedSigner.SetSigStatusCalls())
func (mock *SignerMock) SetSigStatusCalls() []struct {
	Ctx    sdk.Context
	SigID  string
	Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
} {
	var calls []struct {
		Ctx    sdk.Context
		SigID  string
		Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
	}
	mock.lockSetSigStatus.RLock()
	calls = mock.calls.SetSigStatus
	mock.lockSetSigStatus.RUnlock()
	return calls
}

// StartSign calls StartSignFunc.
func (mock *SignerMock) StartSign(ctx sdk.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter snapshot.Snapshotter, voter interface {
	InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error
}) error {
	if mock.StartSignFunc == nil {
		panic("SignerMock.StartSignFunc: method is nil but Signer.StartSign was just called")
	}
	callInfo := struct {
		Ctx         sdk.Context
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snapshotter snapshot.Snapshotter
		Voter       interface {
			InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error
		}
	}{
		Ctx:         ctx,
		Info:        info,
		Snapshotter: snapshotter,
		Voter:       voter,
	}
	mock.lockStartSign.Lock()
	mock.calls.StartSign = append(mock.calls.StartSign, callInfo)
	mock.lockStartSign.Unlock()
	return mock.StartSignFunc(ctx, info, snapshotter, voter)
}

// StartSignCalls gets all the calls that were made to StartSign.
// Check the length with:
//     len(mockedSigner.StartSignCalls())
func (mock *SignerMock) StartSignCalls() []struct {
	Ctx         sdk.Context
	Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	Snapshotter snapshot.Snapshotter
	Voter       interface {
		InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error
	}
} {
	var calls []struct {
		Ctx         sdk.Context
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snapshotter snapshot.Snapshotter
		Voter       interface {
			InitializePollWithSnapshot(ctx sdk.Context, key exported.PollKey, snapshotSeqNo int64, pollProperties ...exported.PollProperty) error
		}
	}
	mock.lockStartSign.RLock()
	calls = mock.calls.StartSign
	mock.lockStartSign.RUnlock()
	return calls
}

// Ensure, that NexusMock does implement types.Nexus.
// If this is not the case, regenerate this file with moq.
var _ types.Nexus = &NexusMock{}

// NexusMock is a mock implementation of types.Nexus.
//
// 	func TestSomethingThatUsesNexus(t *testing.T) {
//
// 		// make and configure a mocked types.Nexus
// 		mockedNexus := &NexusMock{
// 			ArchivePendingTransferFunc: func(ctx sdk.Context, transfer nexus.CrossChainTransfer)  {
// 				panic("mock out the ArchivePendingTransfer method")
// 			},
// 			EnqueueForTransferFunc: func(ctx sdk.Context, sender nexus.CrossChainAddress, amount sdk.Coin) error {
// 				panic("mock out the EnqueueForTransfer method")
// 			},
// 			GetChainFunc: func(ctx sdk.Context, chain string) (nexus.Chain, bool) {
// 				panic("mock out the GetChain method")
// 			},
// 			GetChainMaintainersFunc: func(ctx sdk.Context, chain nexus.Chain) []sdk.ValAddress {
// 				panic("mock out the GetChainMaintainers method")
// 			},
// 			GetRecipientFunc: func(ctx sdk.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool) {
// 				panic("mock out the GetRecipient method")
// 			},
// 			GetTransfersForChainFunc: func(ctx sdk.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer {
// 				panic("mock out the GetTransfersForChain method")
// 			},
// 			IsAssetRegisteredFunc: func(ctx sdk.Context, chainName string, denom string) bool {
// 				panic("mock out the IsAssetRegistered method")
// 			},
// 			IsChainActivatedFunc: func(ctx sdk.Context, chain nexus.Chain) bool {
// 				panic("mock out the IsChainActivated method")
// 			},
// 			LinkAddressesFunc: func(ctx sdk.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress)  {
// 				panic("mock out the LinkAddresses method")
// 			},
// 		}
//
// 		// use mockedNexus in code that requires types.Nexus
// 		// and then make assertions.
//
// 	}
type NexusMock struct {
	// ArchivePendingTransferFunc mocks the ArchivePendingTransfer method.
	ArchivePendingTransferFunc func(ctx sdk.Context, transfer nexus.CrossChainTransfer)

	// EnqueueForTransferFunc mocks the EnqueueForTransfer method.
	EnqueueForTransferFunc func(ctx sdk.Context, sender nexus.CrossChainAddress, amount sdk.Coin) error

	// GetChainFunc mocks the GetChain method.
	GetChainFunc func(ctx sdk.Context, chain string) (nexus.Chain, bool)

	// GetChainMaintainersFunc mocks the GetChainMaintainers method.
	GetChainMaintainersFunc func(ctx sdk.Context, chain nexus.Chain) []sdk.ValAddress

	// GetRecipientFunc mocks the GetRecipient method.
	GetRecipientFunc func(ctx sdk.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool)

	// GetTransfersForChainFunc mocks the GetTransfersForChain method.
	GetTransfersForChainFunc func(ctx sdk.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer

	// IsAssetRegisteredFunc mocks the IsAssetRegistered method.
	IsAssetRegisteredFunc func(ctx sdk.Context, chainName string, denom string) bool

	// IsChainActivatedFunc mocks the IsChainActivated method.
	IsChainActivatedFunc func(ctx sdk.Context, chain nexus.Chain) bool

	// LinkAddressesFunc mocks the LinkAddresses method.
	LinkAddressesFunc func(ctx sdk.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress)

	// calls tracks calls to the methods.
	calls struct {
		// ArchivePendingTransfer holds details about calls to the ArchivePendingTransfer method.
		ArchivePendingTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Transfer is the transfer argument value.
			Transfer nexus.CrossChainTransfer
		}
		// EnqueueForTransfer holds details about calls to the EnqueueForTransfer method.
		EnqueueForTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
			// Amount is the amount argument value.
			Amount sdk.Coin
		}
		// GetChain holds details about calls to the GetChain method.
		GetChain []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetChainMaintainers holds details about calls to the GetChainMaintainers method.
		GetChainMaintainers []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// GetRecipient holds details about calls to the GetRecipient method.
		GetRecipient []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
		}
		// GetTransfersForChain holds details about calls to the GetTransfersForChain method.
		GetTransfersForChain []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// State is the state argument value.
			State nexus.TransferState
		}
		// IsAssetRegistered holds details about calls to the IsAssetRegistered method.
		IsAssetRegistered []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// ChainName is the chainName argument value.
			ChainName string
			// Denom is the denom argument value.
			Denom string
		}
		// IsChainActivated holds details about calls to the IsChainActivated method.
		IsChainActivated []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// LinkAddresses holds details about calls to the LinkAddresses method.
		LinkAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
			// Recipient is the recipient argument value.
			Recipient nexus.CrossChainAddress
		}
	}
	lockArchivePendingTransfer sync.RWMutex
	lockEnqueueForTransfer     sync.RWMutex
	lockGetChain               sync.RWMutex
	lockGetChainMaintainers    sync.RWMutex
	lockGetRecipient           sync.RWMutex
	lockGetTransfersForChain   sync.RWMutex
	lockIsAssetRegistered      sync.RWMutex
	lockIsChainActivated       sync.RWMutex
	lockLinkAddresses          sync.RWMutex
}

// ArchivePendingTransfer calls ArchivePendingTransferFunc.
func (mock *NexusMock) ArchivePendingTransfer(ctx sdk.Context, transfer nexus.CrossChainTransfer) {
	if mock.ArchivePendingTransferFunc == nil {
		panic("NexusMock.ArchivePendingTransferFunc: method is nil but Nexus.ArchivePendingTransfer was just called")
	}
	callInfo := struct {
		Ctx      sdk.Context
		Transfer nexus.CrossChainTransfer
	}{
		Ctx:      ctx,
		Transfer: transfer,
	}
	mock.lockArchivePendingTransfer.Lock()
	mock.calls.ArchivePendingTransfer = append(mock.calls.ArchivePendingTransfer, callInfo)
	mock.lockArchivePendingTransfer.Unlock()
	mock.ArchivePendingTransferFunc(ctx, transfer)
}

// ArchivePendingTransferCalls gets all the calls that were made to ArchivePendingTransfer.
// Check the length with:
//     len(mockedNexus.ArchivePendingTransferCalls())
func (mock *NexusMock) ArchivePendingTransferCalls() []struct {
	Ctx      sdk.Context
	Transfer nexus.CrossChainTransfer
} {
	var calls []struct {
		Ctx      sdk.Context
		Transfer nexus.CrossChainTransfer
	}
	mock.lockArchivePendingTransfer.RLock()
	calls = mock.calls.ArchivePendingTransfer
	mock.lockArchivePendingTransfer.RUnlock()
	return calls
}

// EnqueueForTransfer calls EnqueueForTransferFunc.
func (mock *NexusMock) EnqueueForTransfer(ctx sdk.Context, sender nexus.CrossChainAddress, amount sdk.Coin) error {
	if mock.EnqueueForTransferFunc == nil {
		panic("NexusMock.EnqueueForTransferFunc: method is nil but Nexus.EnqueueForTransfer was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		Sender nexus.CrossChainAddress
		Amount sdk.Coin
	}{
		Ctx:    ctx,
		Sender: sender,
		Amount: amount,
	}
	mock.lockEnqueueForTransfer.Lock()
	mock.calls.EnqueueForTransfer = append(mock.calls.EnqueueForTransfer, callInfo)
	mock.lockEnqueueForTransfer.Unlock()
	return mock.EnqueueForTransferFunc(ctx, sender, amount)
}

// EnqueueForTransferCalls gets all the calls that were made to EnqueueForTransfer.
// Check the length with:
//     len(mockedNexus.EnqueueForTransferCalls())
func (mock *NexusMock) EnqueueForTransferCalls() []struct {
	Ctx    sdk.Context
	Sender nexus.CrossChainAddress
	Amount sdk.Coin
} {
	var calls []struct {
		Ctx    sdk.Context
		Sender nexus.CrossChainAddress
		Amount sdk.Coin
	}
	mock.lockEnqueueForTransfer.RLock()
	calls = mock.calls.EnqueueForTransfer
	mock.lockEnqueueForTransfer.RUnlock()
	return calls
}

// GetChain calls GetChainFunc.
func (mock *NexusMock) GetChain(ctx sdk.Context, chain string) (nexus.Chain, bool) {
	if mock.GetChainFunc == nil {
		panic("NexusMock.GetChainFunc: method is nil but Nexus.GetChain was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChain.Lock()
	mock.calls.GetChain = append(mock.calls.GetChain, callInfo)
	mock.lockGetChain.Unlock()
	return mock.GetChainFunc(ctx, chain)
}

// GetChainCalls gets all the calls that were made to GetChain.
// Check the length with:
//     len(mockedNexus.GetChainCalls())
func (mock *NexusMock) GetChainCalls() []struct {
	Ctx   sdk.Context
	Chain string
} {
	var calls []struct {
		Ctx   sdk.Context
		Chain string
	}
	mock.lockGetChain.RLock()
	calls = mock.calls.GetChain
	mock.lockGetChain.RUnlock()
	return calls
}

// GetChainMaintainers calls GetChainMaintainersFunc.
func (mock *NexusMock) GetChainMaintainers(ctx sdk.Context, chain nexus.Chain) []sdk.ValAddress {
	if mock.GetChainMaintainersFunc == nil {
		panic("NexusMock.GetChainMaintainersFunc: method is nil but Nexus.GetChainMaintainers was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChainMaintainers.Lock()
	mock.calls.GetChainMaintainers = append(mock.calls.GetChainMaintainers, callInfo)
	mock.lockGetChainMaintainers.Unlock()
	return mock.GetChainMaintainersFunc(ctx, chain)
}

// GetChainMaintainersCalls gets all the calls that were made to GetChainMaintainers.
// Check the length with:
//     len(mockedNexus.GetChainMaintainersCalls())
func (mock *NexusMock) GetChainMaintainersCalls() []struct {
	Ctx   sdk.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   sdk.Context
		Chain nexus.Chain
	}
	mock.lockGetChainMaintainers.RLock()
	calls = mock.calls.GetChainMaintainers
	mock.lockGetChainMaintainers.RUnlock()
	return calls
}

// GetRecipient calls GetRecipientFunc.
func (mock *NexusMock) GetRecipient(ctx sdk.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool) {
	if mock.GetRecipientFunc == nil {
		panic("NexusMock.GetRecipientFunc: method is nil but Nexus.GetRecipient was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		Sender nexus.CrossChainAddress
	}{
		Ctx:    ctx,
		Sender: sender,
	}
	mock.lockGetRecipient.Lock()
	mock.calls.GetRecipient = append(mock.calls.GetRecipient, callInfo)
	mock.lockGetRecipient.Unlock()
	return mock.GetRecipientFunc(ctx, sender)
}

// GetRecipientCalls gets all the calls that were made to GetRecipient.
// Check the length with:
//     len(mockedNexus.GetRecipientCalls())
func (mock *NexusMock) GetRecipientCalls() []struct {
	Ctx    sdk.Context
	Sender nexus.CrossChainAddress
} {
	var calls []struct {
		Ctx    sdk.Context
		Sender nexus.CrossChainAddress
	}
	mock.lockGetRecipient.RLock()
	calls = mock.calls.GetRecipient
	mock.lockGetRecipient.RUnlock()
	return calls
}

// GetTransfersForChain calls GetTransfersForChainFunc.
func (mock *NexusMock) GetTransfersForChain(ctx sdk.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer {
	if mock.GetTransfersForChainFunc == nil {
		panic("NexusMock.GetTransfersForChainFunc: method is nil but Nexus.GetTransfersForChain was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		Chain nexus.Chain
		State nexus.TransferState
	}{
		Ctx:   ctx,
		Chain: chain,
		State: state,
	}
	mock.lockGetTransfersForChain.Lock()
	mock.calls.GetTransfersForChain = append(mock.calls.GetTransfersForChain, callInfo)
	mock.lockGetTransfersForChain.Unlock()
	return mock.GetTransfersForChainFunc(ctx, chain, state)
}

// GetTransfersForChainCalls gets all the calls that were made to GetTransfersForChain.
// Check the length with:
//     len(mockedNexus.GetTransfersForChainCalls())
func (mock *NexusMock) GetTransfersForChainCalls() []struct {
	Ctx   sdk.Context
	Chain nexus.Chain
	State nexus.TransferState
} {
	var calls []struct {
		Ctx   sdk.Context
		Chain nexus.Chain
		State nexus.TransferState
	}
	mock.lockGetTransfersForChain.RLock()
	calls = mock.calls.GetTransfersForChain
	mock.lockGetTransfersForChain.RUnlock()
	return calls
}

// IsAssetRegistered calls IsAssetRegisteredFunc.
func (mock *NexusMock) IsAssetRegistered(ctx sdk.Context, chainName string, denom string) bool {
	if mock.IsAssetRegisteredFunc == nil {
		panic("NexusMock.IsAssetRegisteredFunc: method is nil but Nexus.IsAssetRegistered was just called")
	}
	callInfo := struct {
		Ctx       sdk.Context
		ChainName string
		Denom     string
	}{
		Ctx:       ctx,
		ChainName: chainName,
		Denom:     denom,
	}
	mock.lockIsAssetRegistered.Lock()
	mock.calls.IsAssetRegistered = append(mock.calls.IsAssetRegistered, callInfo)
	mock.lockIsAssetRegistered.Unlock()
	return mock.IsAssetRegisteredFunc(ctx, chainName, denom)
}

// IsAssetRegisteredCalls gets all the calls that were made to IsAssetRegistered.
// Check the length with:
//     len(mockedNexus.IsAssetRegisteredCalls())
func (mock *NexusMock) IsAssetRegisteredCalls() []struct {
	Ctx       sdk.Context
	ChainName string
	Denom     string
} {
	var calls []struct {
		Ctx       sdk.Context
		ChainName string
		Denom     string
	}
	mock.lockIsAssetRegistered.RLock()
	calls = mock.calls.IsAssetRegistered
	mock.lockIsAssetRegistered.RUnlock()
	return calls
}

// IsChainActivated calls IsChainActivatedFunc.
func (mock *NexusMock) IsChainActivated(ctx sdk.Context, chain nexus.Chain) bool {
	if mock.IsChainActivatedFunc == nil {
		panic("NexusMock.IsChainActivatedFunc: method is nil but Nexus.IsChainActivated was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockIsChainActivated.Lock()
	mock.calls.IsChainActivated = append(mock.calls.IsChainActivated, callInfo)
	mock.lockIsChainActivated.Unlock()
	return mock.IsChainActivatedFunc(ctx, chain)
}

// IsChainActivatedCalls gets all the calls that were made to IsChainActivated.
// Check the length with:
//     len(mockedNexus.IsChainActivatedCalls())
func (mock *NexusMock) IsChainActivatedCalls() []struct {
	Ctx   sdk.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   sdk.Context
		Chain nexus.Chain
	}
	mock.lockIsChainActivated.RLock()
	calls = mock.calls.IsChainActivated
	mock.lockIsChainActivated.RUnlock()
	return calls
}

// LinkAddresses calls LinkAddressesFunc.
func (mock *NexusMock) LinkAddresses(ctx sdk.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress) {
	if mock.LinkAddressesFunc == nil {
		panic("NexusMock.LinkAddressesFunc: method is nil but Nexus.LinkAddresses was just called")
	}
	callInfo := struct {
		Ctx       sdk.Context
		Sender    nexus.CrossChainAddress
		Recipient nexus.CrossChainAddress
	}{
		Ctx:       ctx,
		Sender:    sender,
		Recipient: recipient,
	}
	mock.lockLinkAddresses.Lock()
	mock.calls.LinkAddresses = append(mock.calls.LinkAddresses, callInfo)
	mock.lockLinkAddresses.Unlock()
	mock.LinkAddressesFunc(ctx, sender, recipient)
}

// LinkAddressesCalls gets all the calls that were made to LinkAddresses.
// Check the length with:
//     len(mockedNexus.LinkAddressesCalls())
func (mock *NexusMock) LinkAddressesCalls() []struct {
	Ctx       sdk.Context
	Sender    nexus.CrossChainAddress
	Recipient nexus.CrossChainAddress
} {
	var calls []struct {
		Ctx       sdk.Context
		Sender    nexus.CrossChainAddress
		Recipient nexus.CrossChainAddress
	}
	mock.lockLinkAddresses.RLock()
	calls = mock.calls.LinkAddresses
	mock.lockLinkAddresses.RUnlock()
	return calls
}

// Ensure, that SnapshotterMock does implement types.Snapshotter.
// If this is not the case, regenerate this file with moq.
var _ types.Snapshotter = &SnapshotterMock{}

// SnapshotterMock is a mock implementation of types.Snapshotter.
//
// 	func TestSomethingThatUsesSnapshotter(t *testing.T) {
//
// 		// make and configure a mocked types.Snapshotter
// 		mockedSnapshotter := &SnapshotterMock{
// 			GetLatestCounterFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetLatestCounter method")
// 			},
// 			GetLatestSnapshotFunc: func(ctx sdk.Context) (snapshot.Snapshot, bool) {
// 				panic("mock out the GetLatestSnapshot method")
// 			},
// 			GetOperatorFunc: func(ctx sdk.Context, proxy sdk.AccAddress) sdk.ValAddress {
// 				panic("mock out the GetOperator method")
// 			},
// 			GetProxyFunc: func(ctx sdk.Context, principal sdk.ValAddress) (sdk.AccAddress, bool) {
// 				panic("mock out the GetProxy method")
// 			},
// 			GetSnapshotFunc: func(ctx sdk.Context, seqNo int64) (snapshot.Snapshot, bool) {
// 				panic("mock out the GetSnapshot method")
// 			},
// 			GetValidatorIllegibilityFunc: func(ctx sdk.Context, validator snapshot.SDKValidator) (snapshot.ValidatorIllegibility, error) {
// 				panic("mock out the GetValidatorIllegibility method")
// 			},
// 			TakeSnapshotFunc: func(ctx sdk.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (snapshot.Snapshot, error) {
// 				panic("mock out the TakeSnapshot method")
// 			},
// 		}
//
// 		// use mockedSnapshotter in code that requires types.Snapshotter
// 		// and then make assertions.
//
// 	}
type SnapshotterMock struct {
	// GetLatestCounterFunc mocks the GetLatestCounter method.
	GetLatestCounterFunc func(ctx sdk.Context) int64

	// GetLatestSnapshotFunc mocks the GetLatestSnapshot method.
	GetLatestSnapshotFunc func(ctx sdk.Context) (snapshot.Snapshot, bool)

	// GetOperatorFunc mocks the GetOperator method.
	GetOperatorFunc func(ctx sdk.Context, proxy sdk.AccAddress) sdk.ValAddress

	// GetProxyFunc mocks the GetProxy method.
	GetProxyFunc func(ctx sdk.Context, principal sdk.ValAddress) (sdk.AccAddress, bool)

	// GetSnapshotFunc mocks the GetSnapshot method.
	GetSnapshotFunc func(ctx sdk.Context, seqNo int64) (snapshot.Snapshot, bool)

	// GetValidatorIllegibilityFunc mocks the GetValidatorIllegibility method.
	GetValidatorIllegibilityFunc func(ctx sdk.Context, validator snapshot.SDKValidator) (snapshot.ValidatorIllegibility, error)

	// TakeSnapshotFunc mocks the TakeSnapshot method.
	TakeSnapshotFunc func(ctx sdk.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (snapshot.Snapshot, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLatestCounter holds details about calls to the GetLatestCounter method.
		GetLatestCounter []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetLatestSnapshot holds details about calls to the GetLatestSnapshot method.
		GetLatestSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetOperator holds details about calls to the GetOperator method.
		GetOperator []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Proxy is the proxy argument value.
			Proxy sdk.AccAddress
		}
		// GetProxy holds details about calls to the GetProxy method.
		GetProxy []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Principal is the principal argument value.
			Principal sdk.ValAddress
		}
		// GetSnapshot holds details about calls to the GetSnapshot method.
		GetSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// SeqNo is the seqNo argument value.
			SeqNo int64
		}
		// GetValidatorIllegibility holds details about calls to the GetValidatorIllegibility method.
		GetValidatorIllegibility []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Validator is the validator argument value.
			Validator snapshot.SDKValidator
		}
		// TakeSnapshot holds details about calls to the TakeSnapshot method.
		TakeSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyRequirement is the keyRequirement argument value.
			KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
		}
	}
	lockGetLatestCounter         sync.RWMutex
	lockGetLatestSnapshot        sync.RWMutex
	lockGetOperator              sync.RWMutex
	lockGetProxy                 sync.RWMutex
	lockGetSnapshot              sync.RWMutex
	lockGetValidatorIllegibility sync.RWMutex
	lockTakeSnapshot             sync.RWMutex
}

// GetLatestCounter calls GetLatestCounterFunc.
func (mock *SnapshotterMock) GetLatestCounter(ctx sdk.Context) int64 {
	if mock.GetLatestCounterFunc == nil {
		panic("SnapshotterMock.GetLatestCounterFunc: method is nil but Snapshotter.GetLatestCounter was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestCounter.Lock()
	mock.calls.GetLatestCounter = append(mock.calls.GetLatestCounter, callInfo)
	mock.lockGetLatestCounter.Unlock()
	return mock.GetLatestCounterFunc(ctx)
}

// GetLatestCounterCalls gets all the calls that were made to GetLatestCounter.
// Check the length with:
//     len(mockedSnapshotter.GetLatestCounterCalls())
func (mock *SnapshotterMock) GetLatestCounterCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetLatestCounter.RLock()
	calls = mock.calls.GetLatestCounter
	mock.lockGetLatestCounter.RUnlock()
	return calls
}

// GetLatestSnapshot calls GetLatestSnapshotFunc.
func (mock *SnapshotterMock) GetLatestSnapshot(ctx sdk.Context) (snapshot.Snapshot, bool) {
	if mock.GetLatestSnapshotFunc == nil {
		panic("SnapshotterMock.GetLatestSnapshotFunc: method is nil but Snapshotter.GetLatestSnapshot was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestSnapshot.Lock()
	mock.calls.GetLatestSnapshot = append(mock.calls.GetLatestSnapshot, callInfo)
	mock.lockGetLatestSnapshot.Unlock()
	return mock.GetLatestSnapshotFunc(ctx)
}

// GetLatestSnapshotCalls gets all the calls that were made to GetLatestSnapshot.
// Check the length with:
//     len(mockedSnapshotter.GetLatestSnapshotCalls())
func (mock *SnapshotterMock) GetLatestSnapshotCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetLatestSnapshot.RLock()
	calls = mock.calls.GetLatestSnapshot
	mock.lockGetLatestSnapshot.RUnlock()
	return calls
}

// GetOperator calls GetOperatorFunc.
func (mock *SnapshotterMock) GetOperator(ctx sdk.Context, proxy sdk.AccAddress) sdk.ValAddress {
	if mock.GetOperatorFunc == nil {
		panic("SnapshotterMock.GetOperatorFunc: method is nil but Snapshotter.GetOperator was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		Proxy sdk.AccAddress
	}{
		Ctx:   ctx,
		Proxy: proxy,
	}
	mock.lockGetOperator.Lock()
	mock.calls.GetOperator = append(mock.calls.GetOperator, callInfo)
	mock.lockGetOperator.Unlock()
	return mock.GetOperatorFunc(ctx, proxy)
}

// GetOperatorCalls gets all the calls that were made to GetOperator.
// Check the length with:
//     len(mockedSnapshotter.GetOperatorCalls())
func (mock *SnapshotterMock) GetOperatorCalls() []struct {
	Ctx   sdk.Context
	Proxy sdk.AccAddress
} {
	var calls []struct {
		Ctx   sdk.Context
		Proxy sdk.AccAddress
	}
	mock.lockGetOperator.RLock()
	calls = mock.calls.GetOperator
	mock.lockGetOperator.RUnlock()
	return calls
}

// GetProxy calls GetProxyFunc.
func (mock *SnapshotterMock) GetProxy(ctx sdk.Context, principal sdk.ValAddress) (sdk.AccAddress, bool) {
	if mock.GetProxyFunc == nil {
		panic("SnapshotterMock.GetProxyFunc: method is nil but Snapshotter.GetProxy was just called")
	}
	callInfo := struct {
		Ctx       sdk.Context
		Principal sdk.ValAddress
	}{
		Ctx:       ctx,
		Principal: principal,
	}
	mock.lockGetProxy.Lock()
	mock.calls.GetProxy = append(mock.calls.GetProxy, callInfo)
	mock.lockGetProxy.Unlock()
	return mock.GetProxyFunc(ctx, principal)
}

// GetProxyCalls gets all the calls that were made to GetProxy.
// Check the length with:
//     len(mockedSnapshotter.GetProxyCalls())
func (mock *SnapshotterMock) GetProxyCalls() []struct {
	Ctx       sdk.Context
	Principal sdk.ValAddress
} {
	var calls []struct {
		Ctx       sdk.Context
		Principal sdk.ValAddress
	}
	mock.lockGetProxy.RLock()
	calls = mock.calls.GetProxy
	mock.lockGetProxy.RUnlock()
	return calls
}

// GetSnapshot calls GetSnapshotFunc.
func (mock *SnapshotterMock) GetSnapshot(ctx sdk.Context, seqNo int64) (snapshot.Snapshot, bool) {
	if mock.GetSnapshotFunc == nil {
		panic("SnapshotterMock.GetSnapshotFunc: method is nil but Snapshotter.GetSnapshot was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		SeqNo int64
	}{
		Ctx:   ctx,
		SeqNo: seqNo,
	}
	mock.lockGetSnapshot.Lock()
	mock.calls.GetSnapshot = append(mock.calls.GetSnapshot, callInfo)
	mock.lockGetSnapshot.Unlock()
	return mock.GetSnapshotFunc(ctx, seqNo)
}

// GetSnapshotCalls gets all the calls that were made to GetSnapshot.
// Check the length with:
//     len(mockedSnapshotter.GetSnapshotCalls())
func (mock *SnapshotterMock) GetSnapshotCalls() []struct {
	Ctx   sdk.Context
	SeqNo int64
} {
	var calls []struct {
		Ctx   sdk.Context
		SeqNo int64
	}
	mock.lockGetSnapshot.RLock()
	calls = mock.calls.GetSnapshot
	mock.lockGetSnapshot.RUnlock()
	return calls
}

// GetValidatorIllegibility calls GetValidatorIllegibilityFunc.
func (mock *SnapshotterMock) GetValidatorIllegibility(ctx sdk.Context, validator snapshot.SDKValidator) (snapshot.ValidatorIllegibility, error) {
	if mock.GetValidatorIllegibilityFunc == nil {
		panic("SnapshotterMock.GetValidatorIllegibilityFunc: method is nil but Snapshotter.GetValidatorIllegibility was just called")
	}
	callInfo := struct {
		Ctx       sdk.Context
		Validator snapshot.SDKValidator
	}{
		Ctx:       ctx,
		Validator: validator,
	}
	mock.lockGetValidatorIllegibility.Lock()
	mock.calls.GetValidatorIllegibility = append(mock.calls.GetValidatorIllegibility, callInfo)
	mock.lockGetValidatorIllegibility.Unlock()
	return mock.GetValidatorIllegibilityFunc(ctx, validator)
}

// GetValidatorIllegibilityCalls gets all the calls that were made to GetValidatorIllegibility.
// Check the length with:
//     len(mockedSnapshotter.GetValidatorIllegibilityCalls())
func (mock *SnapshotterMock) GetValidatorIllegibilityCalls() []struct {
	Ctx       sdk.Context
	Validator snapshot.SDKValidator
} {
	var calls []struct {
		Ctx       sdk.Context
		Validator snapshot.SDKValidator
	}
	mock.lockGetValidatorIllegibility.RLock()
	calls = mock.calls.GetValidatorIllegibility
	mock.lockGetValidatorIllegibility.RUnlock()
	return calls
}

// TakeSnapshot calls TakeSnapshotFunc.
func (mock *SnapshotterMock) TakeSnapshot(ctx sdk.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (snapshot.Snapshot, error) {
	if mock.TakeSnapshotFunc == nil {
		panic("SnapshotterMock.TakeSnapshotFunc: method is nil but Snapshotter.TakeSnapshot was just called")
	}
	callInfo := struct {
		Ctx            sdk.Context
		KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
	}{
		Ctx:            ctx,
		KeyRequirement: keyRequirement,
	}
	mock.lockTakeSnapshot.Lock()
	mock.calls.TakeSnapshot = append(mock.calls.TakeSnapshot, callInfo)
	mock.lockTakeSnapshot.Unlock()
	return mock.TakeSnapshotFunc(ctx, keyRequirement)
}

// TakeSnapshotCalls gets all the calls that were made to TakeSnapshot.
// Check the length with:
//     len(mockedSnapshotter.TakeSnapshotCalls())
func (mock *SnapshotterMock) TakeSnapshotCalls() []struct {
	Ctx            sdk.Context
	KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
} {
	var calls []struct {
		Ctx            sdk.Context
		KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
	}
	mock.lockTakeSnapshot.RLock()
	calls = mock.calls.TakeSnapshot
	mock.lockTakeSnapshot.RUnlock()
	return calls
}

// Ensure, that BTCKeeperMock does implement types.BTCKeeper.
// If this is not the case, regenerate this file with moq.
var _ types.BTCKeeper = &BTCKeeperMock{}

// BTCKeeperMock is a mock implementation of types.BTCKeeper.
//
// 	func TestSomethingThatUsesBTCKeeper(t *testing.T) {
//
// 		// make and configure a mocked types.BTCKeeper
// 		mockedBTCKeeper := &BTCKeeperMock{
// 			DeleteDustAmountFunc: func(ctx sdk.Context, encodedAddress string)  {
// 				panic("mock out the DeleteDustAmount method")
// 			},
// 			DeleteOutpointInfoFunc: func(ctx sdk.Context, outPoint wire.OutPoint)  {
// 				panic("mock out the DeleteOutpointInfo method")
// 			},
// 			DeletePendingOutPointInfoFunc: func(ctx sdk.Context, key exported.PollKey)  {
// 				panic("mock out the DeletePendingOutPointInfo method")
// 			},
// 			DeleteUnsignedTxFunc: func(ctx sdk.Context, txType types.TxType)  {
// 				panic("mock out the DeleteUnsignedTx method")
// 			},
// 			GetAddressFunc: func(ctx sdk.Context, encodedAddress string) (types.AddressInfo, bool) {
// 				panic("mock out the GetAddress method")
// 			},
// 			GetAnyoneCanSpendAddressFunc: func(ctx sdk.Context) types.AddressInfo {
// 				panic("mock out the GetAnyoneCanSpendAddress method")
// 			},
// 			GetConfirmedOutpointInfoQueueForKeyFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) utils.KVQueue {
// 				panic("mock out the GetConfirmedOutpointInfoQueueForKey method")
// 			},
// 			GetDustAmountFunc: func(ctx sdk.Context, encodedAddress string) github_com_btcsuite_btcutil.Amount {
// 				panic("mock out the GetDustAmount method")
// 			},
// 			GetLatestSignedTxHashFunc: func(ctx sdk.Context, txType types.TxType) (*chainhash.Hash, bool) {
// 				panic("mock out the GetLatestSignedTxHash method")
// 			},
// 			GetMasterAddressExternalKeyLockDurationFunc: func(ctx sdk.Context) time.Duration {
// 				panic("mock out the GetMasterAddressExternalKeyLockDuration method")
// 			},
// 			GetMasterAddressInternalKeyLockDurationFunc: func(ctx sdk.Context) time.Duration {
// 				panic("mock out the GetMasterAddressInternalKeyLockDuration method")
// 			},
// 			GetMasterKeyRetentionPeriodFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetMasterKeyRetentionPeriod method")
// 			},
// 			GetMaxInputCountFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetMaxInputCount method")
// 			},
// 			GetMaxSecondaryOutputAmountFunc: func(ctx sdk.Context) github_com_btcsuite_btcutil.Amount {
// 				panic("mock out the GetMaxSecondaryOutputAmount method")
// 			},
// 			GetMaxTxSizeFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetMaxTxSize method")
// 			},
// 			GetMinOutputAmountFunc: func(ctx sdk.Context) github_com_btcsuite_btcutil.Amount {
// 				panic("mock out the GetMinOutputAmount method")
// 			},
// 			GetMinVoterCountFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetMinVoterCount method")
// 			},
// 			GetNetworkFunc: func(ctx sdk.Context) types.Network {
// 				panic("mock out the GetNetwork method")
// 			},
// 			GetOutPointInfoFunc: func(ctx sdk.Context, outPoint wire.OutPoint) (types.OutPointInfo, types.OutPointState, bool) {
// 				panic("mock out the GetOutPointInfo method")
// 			},
// 			GetParamsFunc: func(ctx sdk.Context) types.Params {
// 				panic("mock out the GetParams method")
// 			},
// 			GetPendingOutPointInfoFunc: func(ctx sdk.Context, key exported.PollKey) (types.OutPointInfo, bool) {
// 				panic("mock out the GetPendingOutPointInfo method")
// 			},
// 			GetRequiredConfirmationHeightFunc: func(ctx sdk.Context) uint64 {
// 				panic("mock out the GetRequiredConfirmationHeight method")
// 			},
// 			GetRevoteLockingPeriodFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetRevoteLockingPeriod method")
// 			},
// 			GetSigCheckIntervalFunc: func(ctx sdk.Context) int64 {
// 				panic("mock out the GetSigCheckInterval method")
// 			},
// 			GetSignedTxFunc: func(ctx sdk.Context, txHash chainhash.Hash) (types.SignedTx, bool) {
// 				panic("mock out the GetSignedTx method")
// 			},
// 			GetUnconfirmedAmountFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) github_com_btcsuite_btcutil.Amount {
// 				panic("mock out the GetUnconfirmedAmount method")
// 			},
// 			GetUnsignedTxFunc: func(ctx sdk.Context, txType types.TxType) (types.UnsignedTx, bool) {
// 				panic("mock out the GetUnsignedTx method")
// 			},
// 			GetVotingThresholdFunc: func(ctx sdk.Context) utils.Threshold {
// 				panic("mock out the GetVotingThreshold method")
// 			},
// 			LoggerFunc: func(ctx sdk.Context) log.Logger {
// 				panic("mock out the Logger method")
// 			},
// 			SetAddressFunc: func(ctx sdk.Context, address types.AddressInfo)  {
// 				panic("mock out the SetAddress method")
// 			},
// 			SetConfirmedOutpointInfoFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, info types.OutPointInfo)  {
// 				panic("mock out the SetConfirmedOutpointInfo method")
// 			},
// 			SetDustAmountFunc: func(ctx sdk.Context, encodedAddress string, amount github_com_btcsuite_btcutil.Amount)  {
// 				panic("mock out the SetDustAmount method")
// 			},
// 			SetLatestSignedTxHashFunc: func(ctx sdk.Context, txType types.TxType, txHash chainhash.Hash)  {
// 				panic("mock out the SetLatestSignedTxHash method")
// 			},
// 			SetParamsFunc: func(ctx sdk.Context, p types.Params)  {
// 				panic("mock out the SetParams method")
// 			},
// 			SetPendingOutpointInfoFunc: func(ctx sdk.Context, key exported.PollKey, info types.OutPointInfo)  {
// 				panic("mock out the SetPendingOutpointInfo method")
// 			},
// 			SetSignedTxFunc: func(ctx sdk.Context, tx types.SignedTx)  {
// 				panic("mock out the SetSignedTx method")
// 			},
// 			SetSpentOutpointInfoFunc: func(ctx sdk.Context, info types.OutPointInfo)  {
// 				panic("mock out the SetSpentOutpointInfo method")
// 			},
// 			SetUnconfirmedAmountFunc: func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, amount github_com_btcsuite_btcutil.Amount)  {
// 				panic("mock out the SetUnconfirmedAmount method")
// 			},
// 			SetUnsignedTxFunc: func(ctx sdk.Context, tx types.UnsignedTx)  {
// 				panic("mock out the SetUnsignedTx method")
// 			},
// 		}
//
// 		// use mockedBTCKeeper in code that requires types.BTCKeeper
// 		// and then make assertions.
//
// 	}
type BTCKeeperMock struct {
	// DeleteDustAmountFunc mocks the DeleteDustAmount method.
	DeleteDustAmountFunc func(ctx sdk.Context, encodedAddress string)

	// DeleteOutpointInfoFunc mocks the DeleteOutpointInfo method.
	DeleteOutpointInfoFunc func(ctx sdk.Context, outPoint wire.OutPoint)

	// DeletePendingOutPointInfoFunc mocks the DeletePendingOutPointInfo method.
	DeletePendingOutPointInfoFunc func(ctx sdk.Context, key exported.PollKey)

	// DeleteUnsignedTxFunc mocks the DeleteUnsignedTx method.
	DeleteUnsignedTxFunc func(ctx sdk.Context, txType types.TxType)

	// GetAddressFunc mocks the GetAddress method.
	GetAddressFunc func(ctx sdk.Context, encodedAddress string) (types.AddressInfo, bool)

	// GetAnyoneCanSpendAddressFunc mocks the GetAnyoneCanSpendAddress method.
	GetAnyoneCanSpendAddressFunc func(ctx sdk.Context) types.AddressInfo

	// GetConfirmedOutpointInfoQueueForKeyFunc mocks the GetConfirmedOutpointInfoQueueForKey method.
	GetConfirmedOutpointInfoQueueForKeyFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) utils.KVQueue

	// GetDustAmountFunc mocks the GetDustAmount method.
	GetDustAmountFunc func(ctx sdk.Context, encodedAddress string) github_com_btcsuite_btcutil.Amount

	// GetLatestSignedTxHashFunc mocks the GetLatestSignedTxHash method.
	GetLatestSignedTxHashFunc func(ctx sdk.Context, txType types.TxType) (*chainhash.Hash, bool)

	// GetMasterAddressExternalKeyLockDurationFunc mocks the GetMasterAddressExternalKeyLockDuration method.
	GetMasterAddressExternalKeyLockDurationFunc func(ctx sdk.Context) time.Duration

	// GetMasterAddressInternalKeyLockDurationFunc mocks the GetMasterAddressInternalKeyLockDuration method.
	GetMasterAddressInternalKeyLockDurationFunc func(ctx sdk.Context) time.Duration

	// GetMasterKeyRetentionPeriodFunc mocks the GetMasterKeyRetentionPeriod method.
	GetMasterKeyRetentionPeriodFunc func(ctx sdk.Context) int64

	// GetMaxInputCountFunc mocks the GetMaxInputCount method.
	GetMaxInputCountFunc func(ctx sdk.Context) int64

	// GetMaxSecondaryOutputAmountFunc mocks the GetMaxSecondaryOutputAmount method.
	GetMaxSecondaryOutputAmountFunc func(ctx sdk.Context) github_com_btcsuite_btcutil.Amount

	// GetMaxTxSizeFunc mocks the GetMaxTxSize method.
	GetMaxTxSizeFunc func(ctx sdk.Context) int64

	// GetMinOutputAmountFunc mocks the GetMinOutputAmount method.
	GetMinOutputAmountFunc func(ctx sdk.Context) github_com_btcsuite_btcutil.Amount

	// GetMinVoterCountFunc mocks the GetMinVoterCount method.
	GetMinVoterCountFunc func(ctx sdk.Context) int64

	// GetNetworkFunc mocks the GetNetwork method.
	GetNetworkFunc func(ctx sdk.Context) types.Network

	// GetOutPointInfoFunc mocks the GetOutPointInfo method.
	GetOutPointInfoFunc func(ctx sdk.Context, outPoint wire.OutPoint) (types.OutPointInfo, types.OutPointState, bool)

	// GetParamsFunc mocks the GetParams method.
	GetParamsFunc func(ctx sdk.Context) types.Params

	// GetPendingOutPointInfoFunc mocks the GetPendingOutPointInfo method.
	GetPendingOutPointInfoFunc func(ctx sdk.Context, key exported.PollKey) (types.OutPointInfo, bool)

	// GetRequiredConfirmationHeightFunc mocks the GetRequiredConfirmationHeight method.
	GetRequiredConfirmationHeightFunc func(ctx sdk.Context) uint64

	// GetRevoteLockingPeriodFunc mocks the GetRevoteLockingPeriod method.
	GetRevoteLockingPeriodFunc func(ctx sdk.Context) int64

	// GetSigCheckIntervalFunc mocks the GetSigCheckInterval method.
	GetSigCheckIntervalFunc func(ctx sdk.Context) int64

	// GetSignedTxFunc mocks the GetSignedTx method.
	GetSignedTxFunc func(ctx sdk.Context, txHash chainhash.Hash) (types.SignedTx, bool)

	// GetUnconfirmedAmountFunc mocks the GetUnconfirmedAmount method.
	GetUnconfirmedAmountFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) github_com_btcsuite_btcutil.Amount

	// GetUnsignedTxFunc mocks the GetUnsignedTx method.
	GetUnsignedTxFunc func(ctx sdk.Context, txType types.TxType) (types.UnsignedTx, bool)

	// GetVotingThresholdFunc mocks the GetVotingThreshold method.
	GetVotingThresholdFunc func(ctx sdk.Context) utils.Threshold

	// LoggerFunc mocks the Logger method.
	LoggerFunc func(ctx sdk.Context) log.Logger

	// SetAddressFunc mocks the SetAddress method.
	SetAddressFunc func(ctx sdk.Context, address types.AddressInfo)

	// SetConfirmedOutpointInfoFunc mocks the SetConfirmedOutpointInfo method.
	SetConfirmedOutpointInfoFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, info types.OutPointInfo)

	// SetDustAmountFunc mocks the SetDustAmount method.
	SetDustAmountFunc func(ctx sdk.Context, encodedAddress string, amount github_com_btcsuite_btcutil.Amount)

	// SetLatestSignedTxHashFunc mocks the SetLatestSignedTxHash method.
	SetLatestSignedTxHashFunc func(ctx sdk.Context, txType types.TxType, txHash chainhash.Hash)

	// SetParamsFunc mocks the SetParams method.
	SetParamsFunc func(ctx sdk.Context, p types.Params)

	// SetPendingOutpointInfoFunc mocks the SetPendingOutpointInfo method.
	SetPendingOutpointInfoFunc func(ctx sdk.Context, key exported.PollKey, info types.OutPointInfo)

	// SetSignedTxFunc mocks the SetSignedTx method.
	SetSignedTxFunc func(ctx sdk.Context, tx types.SignedTx)

	// SetSpentOutpointInfoFunc mocks the SetSpentOutpointInfo method.
	SetSpentOutpointInfoFunc func(ctx sdk.Context, info types.OutPointInfo)

	// SetUnconfirmedAmountFunc mocks the SetUnconfirmedAmount method.
	SetUnconfirmedAmountFunc func(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, amount github_com_btcsuite_btcutil.Amount)

	// SetUnsignedTxFunc mocks the SetUnsignedTx method.
	SetUnsignedTxFunc func(ctx sdk.Context, tx types.UnsignedTx)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteDustAmount holds details about calls to the DeleteDustAmount method.
		DeleteDustAmount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// EncodedAddress is the encodedAddress argument value.
			EncodedAddress string
		}
		// DeleteOutpointInfo holds details about calls to the DeleteOutpointInfo method.
		DeleteOutpointInfo []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// OutPoint is the outPoint argument value.
			OutPoint wire.OutPoint
		}
		// DeletePendingOutPointInfo holds details about calls to the DeletePendingOutPointInfo method.
		DeletePendingOutPointInfo []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Key is the key argument value.
			Key exported.PollKey
		}
		// DeleteUnsignedTx holds details about calls to the DeleteUnsignedTx method.
		DeleteUnsignedTx []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// TxType is the txType argument value.
			TxType types.TxType
		}
		// GetAddress holds details about calls to the GetAddress method.
		GetAddress []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// EncodedAddress is the encodedAddress argument value.
			EncodedAddress string
		}
		// GetAnyoneCanSpendAddress holds details about calls to the GetAnyoneCanSpendAddress method.
		GetAnyoneCanSpendAddress []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetConfirmedOutpointInfoQueueForKey holds details about calls to the GetConfirmedOutpointInfoQueueForKey method.
		GetConfirmedOutpointInfoQueueForKey []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetDustAmount holds details about calls to the GetDustAmount method.
		GetDustAmount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// EncodedAddress is the encodedAddress argument value.
			EncodedAddress string
		}
		// GetLatestSignedTxHash holds details about calls to the GetLatestSignedTxHash method.
		GetLatestSignedTxHash []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// TxType is the txType argument value.
			TxType types.TxType
		}
		// GetMasterAddressExternalKeyLockDuration holds details about calls to the GetMasterAddressExternalKeyLockDuration method.
		GetMasterAddressExternalKeyLockDuration []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetMasterAddressInternalKeyLockDuration holds details about calls to the GetMasterAddressInternalKeyLockDuration method.
		GetMasterAddressInternalKeyLockDuration []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetMasterKeyRetentionPeriod holds details about calls to the GetMasterKeyRetentionPeriod method.
		GetMasterKeyRetentionPeriod []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetMaxInputCount holds details about calls to the GetMaxInputCount method.
		GetMaxInputCount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetMaxSecondaryOutputAmount holds details about calls to the GetMaxSecondaryOutputAmount method.
		GetMaxSecondaryOutputAmount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetMaxTxSize holds details about calls to the GetMaxTxSize method.
		GetMaxTxSize []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetMinOutputAmount holds details about calls to the GetMinOutputAmount method.
		GetMinOutputAmount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetMinVoterCount holds details about calls to the GetMinVoterCount method.
		GetMinVoterCount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetNetwork holds details about calls to the GetNetwork method.
		GetNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetOutPointInfo holds details about calls to the GetOutPointInfo method.
		GetOutPointInfo []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// OutPoint is the outPoint argument value.
			OutPoint wire.OutPoint
		}
		// GetParams holds details about calls to the GetParams method.
		GetParams []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetPendingOutPointInfo holds details about calls to the GetPendingOutPointInfo method.
		GetPendingOutPointInfo []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Key is the key argument value.
			Key exported.PollKey
		}
		// GetRequiredConfirmationHeight holds details about calls to the GetRequiredConfirmationHeight method.
		GetRequiredConfirmationHeight []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetRevoteLockingPeriod holds details about calls to the GetRevoteLockingPeriod method.
		GetRevoteLockingPeriod []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetSigCheckInterval holds details about calls to the GetSigCheckInterval method.
		GetSigCheckInterval []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetSignedTx holds details about calls to the GetSignedTx method.
		GetSignedTx []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// TxHash is the txHash argument value.
			TxHash chainhash.Hash
		}
		// GetUnconfirmedAmount holds details about calls to the GetUnconfirmedAmount method.
		GetUnconfirmedAmount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetUnsignedTx holds details about calls to the GetUnsignedTx method.
		GetUnsignedTx []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// TxType is the txType argument value.
			TxType types.TxType
		}
		// GetVotingThreshold holds details about calls to the GetVotingThreshold method.
		GetVotingThreshold []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// Logger holds details about calls to the Logger method.
		Logger []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// SetAddress holds details about calls to the SetAddress method.
		SetAddress []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Address is the address argument value.
			Address types.AddressInfo
		}
		// SetConfirmedOutpointInfo holds details about calls to the SetConfirmedOutpointInfo method.
		SetConfirmedOutpointInfo []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// Info is the info argument value.
			Info types.OutPointInfo
		}
		// SetDustAmount holds details about calls to the SetDustAmount method.
		SetDustAmount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// EncodedAddress is the encodedAddress argument value.
			EncodedAddress string
			// Amount is the amount argument value.
			Amount github_com_btcsuite_btcutil.Amount
		}
		// SetLatestSignedTxHash holds details about calls to the SetLatestSignedTxHash method.
		SetLatestSignedTxHash []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// TxType is the txType argument value.
			TxType types.TxType
			// TxHash is the txHash argument value.
			TxHash chainhash.Hash
		}
		// SetParams holds details about calls to the SetParams method.
		SetParams []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// P is the p argument value.
			P types.Params
		}
		// SetPendingOutpointInfo holds details about calls to the SetPendingOutpointInfo method.
		SetPendingOutpointInfo []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Key is the key argument value.
			Key exported.PollKey
			// Info is the info argument value.
			Info types.OutPointInfo
		}
		// SetSignedTx holds details about calls to the SetSignedTx method.
		SetSignedTx []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Tx is the tx argument value.
			Tx types.SignedTx
		}
		// SetSpentOutpointInfo holds details about calls to the SetSpentOutpointInfo method.
		SetSpentOutpointInfo []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Info is the info argument value.
			Info types.OutPointInfo
		}
		// SetUnconfirmedAmount holds details about calls to the SetUnconfirmedAmount method.
		SetUnconfirmedAmount []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// Amount is the amount argument value.
			Amount github_com_btcsuite_btcutil.Amount
		}
		// SetUnsignedTx holds details about calls to the SetUnsignedTx method.
		SetUnsignedTx []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Tx is the tx argument value.
			Tx types.UnsignedTx
		}
	}
	lockDeleteDustAmount                        sync.RWMutex
	lockDeleteOutpointInfo                      sync.RWMutex
	lockDeletePendingOutPointInfo               sync.RWMutex
	lockDeleteUnsignedTx                        sync.RWMutex
	lockGetAddress                              sync.RWMutex
	lockGetAnyoneCanSpendAddress                sync.RWMutex
	lockGetConfirmedOutpointInfoQueueForKey     sync.RWMutex
	lockGetDustAmount                           sync.RWMutex
	lockGetLatestSignedTxHash                   sync.RWMutex
	lockGetMasterAddressExternalKeyLockDuration sync.RWMutex
	lockGetMasterAddressInternalKeyLockDuration sync.RWMutex
	lockGetMasterKeyRetentionPeriod             sync.RWMutex
	lockGetMaxInputCount                        sync.RWMutex
	lockGetMaxSecondaryOutputAmount             sync.RWMutex
	lockGetMaxTxSize                            sync.RWMutex
	lockGetMinOutputAmount                      sync.RWMutex
	lockGetMinVoterCount                        sync.RWMutex
	lockGetNetwork                              sync.RWMutex
	lockGetOutPointInfo                         sync.RWMutex
	lockGetParams                               sync.RWMutex
	lockGetPendingOutPointInfo                  sync.RWMutex
	lockGetRequiredConfirmationHeight           sync.RWMutex
	lockGetRevoteLockingPeriod                  sync.RWMutex
	lockGetSigCheckInterval                     sync.RWMutex
	lockGetSignedTx                             sync.RWMutex
	lockGetUnconfirmedAmount                    sync.RWMutex
	lockGetUnsignedTx                           sync.RWMutex
	lockGetVotingThreshold                      sync.RWMutex
	lockLogger                                  sync.RWMutex
	lockSetAddress                              sync.RWMutex
	lockSetConfirmedOutpointInfo                sync.RWMutex
	lockSetDustAmount                           sync.RWMutex
	lockSetLatestSignedTxHash                   sync.RWMutex
	lockSetParams                               sync.RWMutex
	lockSetPendingOutpointInfo                  sync.RWMutex
	lockSetSignedTx                             sync.RWMutex
	lockSetSpentOutpointInfo                    sync.RWMutex
	lockSetUnconfirmedAmount                    sync.RWMutex
	lockSetUnsignedTx                           sync.RWMutex
}

// DeleteDustAmount calls DeleteDustAmountFunc.
func (mock *BTCKeeperMock) DeleteDustAmount(ctx sdk.Context, encodedAddress string) {
	if mock.DeleteDustAmountFunc == nil {
		panic("BTCKeeperMock.DeleteDustAmountFunc: method is nil but BTCKeeper.DeleteDustAmount was just called")
	}
	callInfo := struct {
		Ctx            sdk.Context
		EncodedAddress string
	}{
		Ctx:            ctx,
		EncodedAddress: encodedAddress,
	}
	mock.lockDeleteDustAmount.Lock()
	mock.calls.DeleteDustAmount = append(mock.calls.DeleteDustAmount, callInfo)
	mock.lockDeleteDustAmount.Unlock()
	mock.DeleteDustAmountFunc(ctx, encodedAddress)
}

// DeleteDustAmountCalls gets all the calls that were made to DeleteDustAmount.
// Check the length with:
//     len(mockedBTCKeeper.DeleteDustAmountCalls())
func (mock *BTCKeeperMock) DeleteDustAmountCalls() []struct {
	Ctx            sdk.Context
	EncodedAddress string
} {
	var calls []struct {
		Ctx            sdk.Context
		EncodedAddress string
	}
	mock.lockDeleteDustAmount.RLock()
	calls = mock.calls.DeleteDustAmount
	mock.lockDeleteDustAmount.RUnlock()
	return calls
}

// DeleteOutpointInfo calls DeleteOutpointInfoFunc.
func (mock *BTCKeeperMock) DeleteOutpointInfo(ctx sdk.Context, outPoint wire.OutPoint) {
	if mock.DeleteOutpointInfoFunc == nil {
		panic("BTCKeeperMock.DeleteOutpointInfoFunc: method is nil but BTCKeeper.DeleteOutpointInfo was just called")
	}
	callInfo := struct {
		Ctx      sdk.Context
		OutPoint wire.OutPoint
	}{
		Ctx:      ctx,
		OutPoint: outPoint,
	}
	mock.lockDeleteOutpointInfo.Lock()
	mock.calls.DeleteOutpointInfo = append(mock.calls.DeleteOutpointInfo, callInfo)
	mock.lockDeleteOutpointInfo.Unlock()
	mock.DeleteOutpointInfoFunc(ctx, outPoint)
}

// DeleteOutpointInfoCalls gets all the calls that were made to DeleteOutpointInfo.
// Check the length with:
//     len(mockedBTCKeeper.DeleteOutpointInfoCalls())
func (mock *BTCKeeperMock) DeleteOutpointInfoCalls() []struct {
	Ctx      sdk.Context
	OutPoint wire.OutPoint
} {
	var calls []struct {
		Ctx      sdk.Context
		OutPoint wire.OutPoint
	}
	mock.lockDeleteOutpointInfo.RLock()
	calls = mock.calls.DeleteOutpointInfo
	mock.lockDeleteOutpointInfo.RUnlock()
	return calls
}

// DeletePendingOutPointInfo calls DeletePendingOutPointInfoFunc.
func (mock *BTCKeeperMock) DeletePendingOutPointInfo(ctx sdk.Context, key exported.PollKey) {
	if mock.DeletePendingOutPointInfoFunc == nil {
		panic("BTCKeeperMock.DeletePendingOutPointInfoFunc: method is nil but BTCKeeper.DeletePendingOutPointInfo was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
		Key exported.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePendingOutPointInfo.Lock()
	mock.calls.DeletePendingOutPointInfo = append(mock.calls.DeletePendingOutPointInfo, callInfo)
	mock.lockDeletePendingOutPointInfo.Unlock()
	mock.DeletePendingOutPointInfoFunc(ctx, key)
}

// DeletePendingOutPointInfoCalls gets all the calls that were made to DeletePendingOutPointInfo.
// Check the length with:
//     len(mockedBTCKeeper.DeletePendingOutPointInfoCalls())
func (mock *BTCKeeperMock) DeletePendingOutPointInfoCalls() []struct {
	Ctx sdk.Context
	Key exported.PollKey
} {
	var calls []struct {
		Ctx sdk.Context
		Key exported.PollKey
	}
	mock.lockDeletePendingOutPointInfo.RLock()
	calls = mock.calls.DeletePendingOutPointInfo
	mock.lockDeletePendingOutPointInfo.RUnlock()
	return calls
}

// DeleteUnsignedTx calls DeleteUnsignedTxFunc.
func (mock *BTCKeeperMock) DeleteUnsignedTx(ctx sdk.Context, txType types.TxType) {
	if mock.DeleteUnsignedTxFunc == nil {
		panic("BTCKeeperMock.DeleteUnsignedTxFunc: method is nil but BTCKeeper.DeleteUnsignedTx was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		TxType types.TxType
	}{
		Ctx:    ctx,
		TxType: txType,
	}
	mock.lockDeleteUnsignedTx.Lock()
	mock.calls.DeleteUnsignedTx = append(mock.calls.DeleteUnsignedTx, callInfo)
	mock.lockDeleteUnsignedTx.Unlock()
	mock.DeleteUnsignedTxFunc(ctx, txType)
}

// DeleteUnsignedTxCalls gets all the calls that were made to DeleteUnsignedTx.
// Check the length with:
//     len(mockedBTCKeeper.DeleteUnsignedTxCalls())
func (mock *BTCKeeperMock) DeleteUnsignedTxCalls() []struct {
	Ctx    sdk.Context
	TxType types.TxType
} {
	var calls []struct {
		Ctx    sdk.Context
		TxType types.TxType
	}
	mock.lockDeleteUnsignedTx.RLock()
	calls = mock.calls.DeleteUnsignedTx
	mock.lockDeleteUnsignedTx.RUnlock()
	return calls
}

// GetAddress calls GetAddressFunc.
func (mock *BTCKeeperMock) GetAddress(ctx sdk.Context, encodedAddress string) (types.AddressInfo, bool) {
	if mock.GetAddressFunc == nil {
		panic("BTCKeeperMock.GetAddressFunc: method is nil but BTCKeeper.GetAddress was just called")
	}
	callInfo := struct {
		Ctx            sdk.Context
		EncodedAddress string
	}{
		Ctx:            ctx,
		EncodedAddress: encodedAddress,
	}
	mock.lockGetAddress.Lock()
	mock.calls.GetAddress = append(mock.calls.GetAddress, callInfo)
	mock.lockGetAddress.Unlock()
	return mock.GetAddressFunc(ctx, encodedAddress)
}

// GetAddressCalls gets all the calls that were made to GetAddress.
// Check the length with:
//     len(mockedBTCKeeper.GetAddressCalls())
func (mock *BTCKeeperMock) GetAddressCalls() []struct {
	Ctx            sdk.Context
	EncodedAddress string
} {
	var calls []struct {
		Ctx            sdk.Context
		EncodedAddress string
	}
	mock.lockGetAddress.RLock()
	calls = mock.calls.GetAddress
	mock.lockGetAddress.RUnlock()
	return calls
}

// GetAnyoneCanSpendAddress calls GetAnyoneCanSpendAddressFunc.
func (mock *BTCKeeperMock) GetAnyoneCanSpendAddress(ctx sdk.Context) types.AddressInfo {
	if mock.GetAnyoneCanSpendAddressFunc == nil {
		panic("BTCKeeperMock.GetAnyoneCanSpendAddressFunc: method is nil but BTCKeeper.GetAnyoneCanSpendAddress was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAnyoneCanSpendAddress.Lock()
	mock.calls.GetAnyoneCanSpendAddress = append(mock.calls.GetAnyoneCanSpendAddress, callInfo)
	mock.lockGetAnyoneCanSpendAddress.Unlock()
	return mock.GetAnyoneCanSpendAddressFunc(ctx)
}

// GetAnyoneCanSpendAddressCalls gets all the calls that were made to GetAnyoneCanSpendAddress.
// Check the length with:
//     len(mockedBTCKeeper.GetAnyoneCanSpendAddressCalls())
func (mock *BTCKeeperMock) GetAnyoneCanSpendAddressCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetAnyoneCanSpendAddress.RLock()
	calls = mock.calls.GetAnyoneCanSpendAddress
	mock.lockGetAnyoneCanSpendAddress.RUnlock()
	return calls
}

// GetConfirmedOutpointInfoQueueForKey calls GetConfirmedOutpointInfoQueueForKeyFunc.
func (mock *BTCKeeperMock) GetConfirmedOutpointInfoQueueForKey(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) utils.KVQueue {
	if mock.GetConfirmedOutpointInfoQueueForKeyFunc == nil {
		panic("BTCKeeperMock.GetConfirmedOutpointInfoQueueForKeyFunc: method is nil but BTCKeeper.GetConfirmedOutpointInfoQueueForKey was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetConfirmedOutpointInfoQueueForKey.Lock()
	mock.calls.GetConfirmedOutpointInfoQueueForKey = append(mock.calls.GetConfirmedOutpointInfoQueueForKey, callInfo)
	mock.lockGetConfirmedOutpointInfoQueueForKey.Unlock()
	return mock.GetConfirmedOutpointInfoQueueForKeyFunc(ctx, keyID)
}

// GetConfirmedOutpointInfoQueueForKeyCalls gets all the calls that were made to GetConfirmedOutpointInfoQueueForKey.
// Check the length with:
//     len(mockedBTCKeeper.GetConfirmedOutpointInfoQueueForKeyCalls())
func (mock *BTCKeeperMock) GetConfirmedOutpointInfoQueueForKeyCalls() []struct {
	Ctx   sdk.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetConfirmedOutpointInfoQueueForKey.RLock()
	calls = mock.calls.GetConfirmedOutpointInfoQueueForKey
	mock.lockGetConfirmedOutpointInfoQueueForKey.RUnlock()
	return calls
}

// GetDustAmount calls GetDustAmountFunc.
func (mock *BTCKeeperMock) GetDustAmount(ctx sdk.Context, encodedAddress string) github_com_btcsuite_btcutil.Amount {
	if mock.GetDustAmountFunc == nil {
		panic("BTCKeeperMock.GetDustAmountFunc: method is nil but BTCKeeper.GetDustAmount was just called")
	}
	callInfo := struct {
		Ctx            sdk.Context
		EncodedAddress string
	}{
		Ctx:            ctx,
		EncodedAddress: encodedAddress,
	}
	mock.lockGetDustAmount.Lock()
	mock.calls.GetDustAmount = append(mock.calls.GetDustAmount, callInfo)
	mock.lockGetDustAmount.Unlock()
	return mock.GetDustAmountFunc(ctx, encodedAddress)
}

// GetDustAmountCalls gets all the calls that were made to GetDustAmount.
// Check the length with:
//     len(mockedBTCKeeper.GetDustAmountCalls())
func (mock *BTCKeeperMock) GetDustAmountCalls() []struct {
	Ctx            sdk.Context
	EncodedAddress string
} {
	var calls []struct {
		Ctx            sdk.Context
		EncodedAddress string
	}
	mock.lockGetDustAmount.RLock()
	calls = mock.calls.GetDustAmount
	mock.lockGetDustAmount.RUnlock()
	return calls
}

// GetLatestSignedTxHash calls GetLatestSignedTxHashFunc.
func (mock *BTCKeeperMock) GetLatestSignedTxHash(ctx sdk.Context, txType types.TxType) (*chainhash.Hash, bool) {
	if mock.GetLatestSignedTxHashFunc == nil {
		panic("BTCKeeperMock.GetLatestSignedTxHashFunc: method is nil but BTCKeeper.GetLatestSignedTxHash was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		TxType types.TxType
	}{
		Ctx:    ctx,
		TxType: txType,
	}
	mock.lockGetLatestSignedTxHash.Lock()
	mock.calls.GetLatestSignedTxHash = append(mock.calls.GetLatestSignedTxHash, callInfo)
	mock.lockGetLatestSignedTxHash.Unlock()
	return mock.GetLatestSignedTxHashFunc(ctx, txType)
}

// GetLatestSignedTxHashCalls gets all the calls that were made to GetLatestSignedTxHash.
// Check the length with:
//     len(mockedBTCKeeper.GetLatestSignedTxHashCalls())
func (mock *BTCKeeperMock) GetLatestSignedTxHashCalls() []struct {
	Ctx    sdk.Context
	TxType types.TxType
} {
	var calls []struct {
		Ctx    sdk.Context
		TxType types.TxType
	}
	mock.lockGetLatestSignedTxHash.RLock()
	calls = mock.calls.GetLatestSignedTxHash
	mock.lockGetLatestSignedTxHash.RUnlock()
	return calls
}

// GetMasterAddressExternalKeyLockDuration calls GetMasterAddressExternalKeyLockDurationFunc.
func (mock *BTCKeeperMock) GetMasterAddressExternalKeyLockDuration(ctx sdk.Context) time.Duration {
	if mock.GetMasterAddressExternalKeyLockDurationFunc == nil {
		panic("BTCKeeperMock.GetMasterAddressExternalKeyLockDurationFunc: method is nil but BTCKeeper.GetMasterAddressExternalKeyLockDuration was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMasterAddressExternalKeyLockDuration.Lock()
	mock.calls.GetMasterAddressExternalKeyLockDuration = append(mock.calls.GetMasterAddressExternalKeyLockDuration, callInfo)
	mock.lockGetMasterAddressExternalKeyLockDuration.Unlock()
	return mock.GetMasterAddressExternalKeyLockDurationFunc(ctx)
}

// GetMasterAddressExternalKeyLockDurationCalls gets all the calls that were made to GetMasterAddressExternalKeyLockDuration.
// Check the length with:
//     len(mockedBTCKeeper.GetMasterAddressExternalKeyLockDurationCalls())
func (mock *BTCKeeperMock) GetMasterAddressExternalKeyLockDurationCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMasterAddressExternalKeyLockDuration.RLock()
	calls = mock.calls.GetMasterAddressExternalKeyLockDuration
	mock.lockGetMasterAddressExternalKeyLockDuration.RUnlock()
	return calls
}

// GetMasterAddressInternalKeyLockDuration calls GetMasterAddressInternalKeyLockDurationFunc.
func (mock *BTCKeeperMock) GetMasterAddressInternalKeyLockDuration(ctx sdk.Context) time.Duration {
	if mock.GetMasterAddressInternalKeyLockDurationFunc == nil {
		panic("BTCKeeperMock.GetMasterAddressInternalKeyLockDurationFunc: method is nil but BTCKeeper.GetMasterAddressInternalKeyLockDuration was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMasterAddressInternalKeyLockDuration.Lock()
	mock.calls.GetMasterAddressInternalKeyLockDuration = append(mock.calls.GetMasterAddressInternalKeyLockDuration, callInfo)
	mock.lockGetMasterAddressInternalKeyLockDuration.Unlock()
	return mock.GetMasterAddressInternalKeyLockDurationFunc(ctx)
}

// GetMasterAddressInternalKeyLockDurationCalls gets all the calls that were made to GetMasterAddressInternalKeyLockDuration.
// Check the length with:
//     len(mockedBTCKeeper.GetMasterAddressInternalKeyLockDurationCalls())
func (mock *BTCKeeperMock) GetMasterAddressInternalKeyLockDurationCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMasterAddressInternalKeyLockDuration.RLock()
	calls = mock.calls.GetMasterAddressInternalKeyLockDuration
	mock.lockGetMasterAddressInternalKeyLockDuration.RUnlock()
	return calls
}

// GetMasterKeyRetentionPeriod calls GetMasterKeyRetentionPeriodFunc.
func (mock *BTCKeeperMock) GetMasterKeyRetentionPeriod(ctx sdk.Context) int64 {
	if mock.GetMasterKeyRetentionPeriodFunc == nil {
		panic("BTCKeeperMock.GetMasterKeyRetentionPeriodFunc: method is nil but BTCKeeper.GetMasterKeyRetentionPeriod was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMasterKeyRetentionPeriod.Lock()
	mock.calls.GetMasterKeyRetentionPeriod = append(mock.calls.GetMasterKeyRetentionPeriod, callInfo)
	mock.lockGetMasterKeyRetentionPeriod.Unlock()
	return mock.GetMasterKeyRetentionPeriodFunc(ctx)
}

// GetMasterKeyRetentionPeriodCalls gets all the calls that were made to GetMasterKeyRetentionPeriod.
// Check the length with:
//     len(mockedBTCKeeper.GetMasterKeyRetentionPeriodCalls())
func (mock *BTCKeeperMock) GetMasterKeyRetentionPeriodCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMasterKeyRetentionPeriod.RLock()
	calls = mock.calls.GetMasterKeyRetentionPeriod
	mock.lockGetMasterKeyRetentionPeriod.RUnlock()
	return calls
}

// GetMaxInputCount calls GetMaxInputCountFunc.
func (mock *BTCKeeperMock) GetMaxInputCount(ctx sdk.Context) int64 {
	if mock.GetMaxInputCountFunc == nil {
		panic("BTCKeeperMock.GetMaxInputCountFunc: method is nil but BTCKeeper.GetMaxInputCount was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMaxInputCount.Lock()
	mock.calls.GetMaxInputCount = append(mock.calls.GetMaxInputCount, callInfo)
	mock.lockGetMaxInputCount.Unlock()
	return mock.GetMaxInputCountFunc(ctx)
}

// GetMaxInputCountCalls gets all the calls that were made to GetMaxInputCount.
// Check the length with:
//     len(mockedBTCKeeper.GetMaxInputCountCalls())
func (mock *BTCKeeperMock) GetMaxInputCountCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMaxInputCount.RLock()
	calls = mock.calls.GetMaxInputCount
	mock.lockGetMaxInputCount.RUnlock()
	return calls
}

// GetMaxSecondaryOutputAmount calls GetMaxSecondaryOutputAmountFunc.
func (mock *BTCKeeperMock) GetMaxSecondaryOutputAmount(ctx sdk.Context) github_com_btcsuite_btcutil.Amount {
	if mock.GetMaxSecondaryOutputAmountFunc == nil {
		panic("BTCKeeperMock.GetMaxSecondaryOutputAmountFunc: method is nil but BTCKeeper.GetMaxSecondaryOutputAmount was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMaxSecondaryOutputAmount.Lock()
	mock.calls.GetMaxSecondaryOutputAmount = append(mock.calls.GetMaxSecondaryOutputAmount, callInfo)
	mock.lockGetMaxSecondaryOutputAmount.Unlock()
	return mock.GetMaxSecondaryOutputAmountFunc(ctx)
}

// GetMaxSecondaryOutputAmountCalls gets all the calls that were made to GetMaxSecondaryOutputAmount.
// Check the length with:
//     len(mockedBTCKeeper.GetMaxSecondaryOutputAmountCalls())
func (mock *BTCKeeperMock) GetMaxSecondaryOutputAmountCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMaxSecondaryOutputAmount.RLock()
	calls = mock.calls.GetMaxSecondaryOutputAmount
	mock.lockGetMaxSecondaryOutputAmount.RUnlock()
	return calls
}

// GetMaxTxSize calls GetMaxTxSizeFunc.
func (mock *BTCKeeperMock) GetMaxTxSize(ctx sdk.Context) int64 {
	if mock.GetMaxTxSizeFunc == nil {
		panic("BTCKeeperMock.GetMaxTxSizeFunc: method is nil but BTCKeeper.GetMaxTxSize was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMaxTxSize.Lock()
	mock.calls.GetMaxTxSize = append(mock.calls.GetMaxTxSize, callInfo)
	mock.lockGetMaxTxSize.Unlock()
	return mock.GetMaxTxSizeFunc(ctx)
}

// GetMaxTxSizeCalls gets all the calls that were made to GetMaxTxSize.
// Check the length with:
//     len(mockedBTCKeeper.GetMaxTxSizeCalls())
func (mock *BTCKeeperMock) GetMaxTxSizeCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMaxTxSize.RLock()
	calls = mock.calls.GetMaxTxSize
	mock.lockGetMaxTxSize.RUnlock()
	return calls
}

// GetMinOutputAmount calls GetMinOutputAmountFunc.
func (mock *BTCKeeperMock) GetMinOutputAmount(ctx sdk.Context) github_com_btcsuite_btcutil.Amount {
	if mock.GetMinOutputAmountFunc == nil {
		panic("BTCKeeperMock.GetMinOutputAmountFunc: method is nil but BTCKeeper.GetMinOutputAmount was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMinOutputAmount.Lock()
	mock.calls.GetMinOutputAmount = append(mock.calls.GetMinOutputAmount, callInfo)
	mock.lockGetMinOutputAmount.Unlock()
	return mock.GetMinOutputAmountFunc(ctx)
}

// GetMinOutputAmountCalls gets all the calls that were made to GetMinOutputAmount.
// Check the length with:
//     len(mockedBTCKeeper.GetMinOutputAmountCalls())
func (mock *BTCKeeperMock) GetMinOutputAmountCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMinOutputAmount.RLock()
	calls = mock.calls.GetMinOutputAmount
	mock.lockGetMinOutputAmount.RUnlock()
	return calls
}

// GetMinVoterCount calls GetMinVoterCountFunc.
func (mock *BTCKeeperMock) GetMinVoterCount(ctx sdk.Context) int64 {
	if mock.GetMinVoterCountFunc == nil {
		panic("BTCKeeperMock.GetMinVoterCountFunc: method is nil but BTCKeeper.GetMinVoterCount was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMinVoterCount.Lock()
	mock.calls.GetMinVoterCount = append(mock.calls.GetMinVoterCount, callInfo)
	mock.lockGetMinVoterCount.Unlock()
	return mock.GetMinVoterCountFunc(ctx)
}

// GetMinVoterCountCalls gets all the calls that were made to GetMinVoterCount.
// Check the length with:
//     len(mockedBTCKeeper.GetMinVoterCountCalls())
func (mock *BTCKeeperMock) GetMinVoterCountCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetMinVoterCount.RLock()
	calls = mock.calls.GetMinVoterCount
	mock.lockGetMinVoterCount.RUnlock()
	return calls
}

// GetNetwork calls GetNetworkFunc.
func (mock *BTCKeeperMock) GetNetwork(ctx sdk.Context) types.Network {
	if mock.GetNetworkFunc == nil {
		panic("BTCKeeperMock.GetNetworkFunc: method is nil but BTCKeeper.GetNetwork was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetNetwork.Lock()
	mock.calls.GetNetwork = append(mock.calls.GetNetwork, callInfo)
	mock.lockGetNetwork.Unlock()
	return mock.GetNetworkFunc(ctx)
}

// GetNetworkCalls gets all the calls that were made to GetNetwork.
// Check the length with:
//     len(mockedBTCKeeper.GetNetworkCalls())
func (mock *BTCKeeperMock) GetNetworkCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetNetwork.RLock()
	calls = mock.calls.GetNetwork
	mock.lockGetNetwork.RUnlock()
	return calls
}

// GetOutPointInfo calls GetOutPointInfoFunc.
func (mock *BTCKeeperMock) GetOutPointInfo(ctx sdk.Context, outPoint wire.OutPoint) (types.OutPointInfo, types.OutPointState, bool) {
	if mock.GetOutPointInfoFunc == nil {
		panic("BTCKeeperMock.GetOutPointInfoFunc: method is nil but BTCKeeper.GetOutPointInfo was just called")
	}
	callInfo := struct {
		Ctx      sdk.Context
		OutPoint wire.OutPoint
	}{
		Ctx:      ctx,
		OutPoint: outPoint,
	}
	mock.lockGetOutPointInfo.Lock()
	mock.calls.GetOutPointInfo = append(mock.calls.GetOutPointInfo, callInfo)
	mock.lockGetOutPointInfo.Unlock()
	return mock.GetOutPointInfoFunc(ctx, outPoint)
}

// GetOutPointInfoCalls gets all the calls that were made to GetOutPointInfo.
// Check the length with:
//     len(mockedBTCKeeper.GetOutPointInfoCalls())
func (mock *BTCKeeperMock) GetOutPointInfoCalls() []struct {
	Ctx      sdk.Context
	OutPoint wire.OutPoint
} {
	var calls []struct {
		Ctx      sdk.Context
		OutPoint wire.OutPoint
	}
	mock.lockGetOutPointInfo.RLock()
	calls = mock.calls.GetOutPointInfo
	mock.lockGetOutPointInfo.RUnlock()
	return calls
}

// GetParams calls GetParamsFunc.
func (mock *BTCKeeperMock) GetParams(ctx sdk.Context) types.Params {
	if mock.GetParamsFunc == nil {
		panic("BTCKeeperMock.GetParamsFunc: method is nil but BTCKeeper.GetParams was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetParams.Lock()
	mock.calls.GetParams = append(mock.calls.GetParams, callInfo)
	mock.lockGetParams.Unlock()
	return mock.GetParamsFunc(ctx)
}

// GetParamsCalls gets all the calls that were made to GetParams.
// Check the length with:
//     len(mockedBTCKeeper.GetParamsCalls())
func (mock *BTCKeeperMock) GetParamsCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetParams.RLock()
	calls = mock.calls.GetParams
	mock.lockGetParams.RUnlock()
	return calls
}

// GetPendingOutPointInfo calls GetPendingOutPointInfoFunc.
func (mock *BTCKeeperMock) GetPendingOutPointInfo(ctx sdk.Context, key exported.PollKey) (types.OutPointInfo, bool) {
	if mock.GetPendingOutPointInfoFunc == nil {
		panic("BTCKeeperMock.GetPendingOutPointInfoFunc: method is nil but BTCKeeper.GetPendingOutPointInfo was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
		Key exported.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetPendingOutPointInfo.Lock()
	mock.calls.GetPendingOutPointInfo = append(mock.calls.GetPendingOutPointInfo, callInfo)
	mock.lockGetPendingOutPointInfo.Unlock()
	return mock.GetPendingOutPointInfoFunc(ctx, key)
}

// GetPendingOutPointInfoCalls gets all the calls that were made to GetPendingOutPointInfo.
// Check the length with:
//     len(mockedBTCKeeper.GetPendingOutPointInfoCalls())
func (mock *BTCKeeperMock) GetPendingOutPointInfoCalls() []struct {
	Ctx sdk.Context
	Key exported.PollKey
} {
	var calls []struct {
		Ctx sdk.Context
		Key exported.PollKey
	}
	mock.lockGetPendingOutPointInfo.RLock()
	calls = mock.calls.GetPendingOutPointInfo
	mock.lockGetPendingOutPointInfo.RUnlock()
	return calls
}

// GetRequiredConfirmationHeight calls GetRequiredConfirmationHeightFunc.
func (mock *BTCKeeperMock) GetRequiredConfirmationHeight(ctx sdk.Context) uint64 {
	if mock.GetRequiredConfirmationHeightFunc == nil {
		panic("BTCKeeperMock.GetRequiredConfirmationHeightFunc: method is nil but BTCKeeper.GetRequiredConfirmationHeight was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRequiredConfirmationHeight.Lock()
	mock.calls.GetRequiredConfirmationHeight = append(mock.calls.GetRequiredConfirmationHeight, callInfo)
	mock.lockGetRequiredConfirmationHeight.Unlock()
	return mock.GetRequiredConfirmationHeightFunc(ctx)
}

// GetRequiredConfirmationHeightCalls gets all the calls that were made to GetRequiredConfirmationHeight.
// Check the length with:
//     len(mockedBTCKeeper.GetRequiredConfirmationHeightCalls())
func (mock *BTCKeeperMock) GetRequiredConfirmationHeightCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetRequiredConfirmationHeight.RLock()
	calls = mock.calls.GetRequiredConfirmationHeight
	mock.lockGetRequiredConfirmationHeight.RUnlock()
	return calls
}

// GetRevoteLockingPeriod calls GetRevoteLockingPeriodFunc.
func (mock *BTCKeeperMock) GetRevoteLockingPeriod(ctx sdk.Context) int64 {
	if mock.GetRevoteLockingPeriodFunc == nil {
		panic("BTCKeeperMock.GetRevoteLockingPeriodFunc: method is nil but BTCKeeper.GetRevoteLockingPeriod was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRevoteLockingPeriod.Lock()
	mock.calls.GetRevoteLockingPeriod = append(mock.calls.GetRevoteLockingPeriod, callInfo)
	mock.lockGetRevoteLockingPeriod.Unlock()
	return mock.GetRevoteLockingPeriodFunc(ctx)
}

// GetRevoteLockingPeriodCalls gets all the calls that were made to GetRevoteLockingPeriod.
// Check the length with:
//     len(mockedBTCKeeper.GetRevoteLockingPeriodCalls())
func (mock *BTCKeeperMock) GetRevoteLockingPeriodCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetRevoteLockingPeriod.RLock()
	calls = mock.calls.GetRevoteLockingPeriod
	mock.lockGetRevoteLockingPeriod.RUnlock()
	return calls
}

// GetSigCheckInterval calls GetSigCheckIntervalFunc.
func (mock *BTCKeeperMock) GetSigCheckInterval(ctx sdk.Context) int64 {
	if mock.GetSigCheckIntervalFunc == nil {
		panic("BTCKeeperMock.GetSigCheckIntervalFunc: method is nil but BTCKeeper.GetSigCheckInterval was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetSigCheckInterval.Lock()
	mock.calls.GetSigCheckInterval = append(mock.calls.GetSigCheckInterval, callInfo)
	mock.lockGetSigCheckInterval.Unlock()
	return mock.GetSigCheckIntervalFunc(ctx)
}

// GetSigCheckIntervalCalls gets all the calls that were made to GetSigCheckInterval.
// Check the length with:
//     len(mockedBTCKeeper.GetSigCheckIntervalCalls())
func (mock *BTCKeeperMock) GetSigCheckIntervalCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetSigCheckInterval.RLock()
	calls = mock.calls.GetSigCheckInterval
	mock.lockGetSigCheckInterval.RUnlock()
	return calls
}

// GetSignedTx calls GetSignedTxFunc.
func (mock *BTCKeeperMock) GetSignedTx(ctx sdk.Context, txHash chainhash.Hash) (types.SignedTx, bool) {
	if mock.GetSignedTxFunc == nil {
		panic("BTCKeeperMock.GetSignedTxFunc: method is nil but BTCKeeper.GetSignedTx was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		TxHash chainhash.Hash
	}{
		Ctx:    ctx,
		TxHash: txHash,
	}
	mock.lockGetSignedTx.Lock()
	mock.calls.GetSignedTx = append(mock.calls.GetSignedTx, callInfo)
	mock.lockGetSignedTx.Unlock()
	return mock.GetSignedTxFunc(ctx, txHash)
}

// GetSignedTxCalls gets all the calls that were made to GetSignedTx.
// Check the length with:
//     len(mockedBTCKeeper.GetSignedTxCalls())
func (mock *BTCKeeperMock) GetSignedTxCalls() []struct {
	Ctx    sdk.Context
	TxHash chainhash.Hash
} {
	var calls []struct {
		Ctx    sdk.Context
		TxHash chainhash.Hash
	}
	mock.lockGetSignedTx.RLock()
	calls = mock.calls.GetSignedTx
	mock.lockGetSignedTx.RUnlock()
	return calls
}

// GetUnconfirmedAmount calls GetUnconfirmedAmountFunc.
func (mock *BTCKeeperMock) GetUnconfirmedAmount(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) github_com_btcsuite_btcutil.Amount {
	if mock.GetUnconfirmedAmountFunc == nil {
		panic("BTCKeeperMock.GetUnconfirmedAmountFunc: method is nil but BTCKeeper.GetUnconfirmedAmount was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetUnconfirmedAmount.Lock()
	mock.calls.GetUnconfirmedAmount = append(mock.calls.GetUnconfirmedAmount, callInfo)
	mock.lockGetUnconfirmedAmount.Unlock()
	return mock.GetUnconfirmedAmountFunc(ctx, keyID)
}

// GetUnconfirmedAmountCalls gets all the calls that were made to GetUnconfirmedAmount.
// Check the length with:
//     len(mockedBTCKeeper.GetUnconfirmedAmountCalls())
func (mock *BTCKeeperMock) GetUnconfirmedAmountCalls() []struct {
	Ctx   sdk.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetUnconfirmedAmount.RLock()
	calls = mock.calls.GetUnconfirmedAmount
	mock.lockGetUnconfirmedAmount.RUnlock()
	return calls
}

// GetUnsignedTx calls GetUnsignedTxFunc.
func (mock *BTCKeeperMock) GetUnsignedTx(ctx sdk.Context, txType types.TxType) (types.UnsignedTx, bool) {
	if mock.GetUnsignedTxFunc == nil {
		panic("BTCKeeperMock.GetUnsignedTxFunc: method is nil but BTCKeeper.GetUnsignedTx was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		TxType types.TxType
	}{
		Ctx:    ctx,
		TxType: txType,
	}
	mock.lockGetUnsignedTx.Lock()
	mock.calls.GetUnsignedTx = append(mock.calls.GetUnsignedTx, callInfo)
	mock.lockGetUnsignedTx.Unlock()
	return mock.GetUnsignedTxFunc(ctx, txType)
}

// GetUnsignedTxCalls gets all the calls that were made to GetUnsignedTx.
// Check the length with:
//     len(mockedBTCKeeper.GetUnsignedTxCalls())
func (mock *BTCKeeperMock) GetUnsignedTxCalls() []struct {
	Ctx    sdk.Context
	TxType types.TxType
} {
	var calls []struct {
		Ctx    sdk.Context
		TxType types.TxType
	}
	mock.lockGetUnsignedTx.RLock()
	calls = mock.calls.GetUnsignedTx
	mock.lockGetUnsignedTx.RUnlock()
	return calls
}

// GetVotingThreshold calls GetVotingThresholdFunc.
func (mock *BTCKeeperMock) GetVotingThreshold(ctx sdk.Context) utils.Threshold {
	if mock.GetVotingThresholdFunc == nil {
		panic("BTCKeeperMock.GetVotingThresholdFunc: method is nil but BTCKeeper.GetVotingThreshold was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetVotingThreshold.Lock()
	mock.calls.GetVotingThreshold = append(mock.calls.GetVotingThreshold, callInfo)
	mock.lockGetVotingThreshold.Unlock()
	return mock.GetVotingThresholdFunc(ctx)
}

// GetVotingThresholdCalls gets all the calls that were made to GetVotingThreshold.
// Check the length with:
//     len(mockedBTCKeeper.GetVotingThresholdCalls())
func (mock *BTCKeeperMock) GetVotingThresholdCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetVotingThreshold.RLock()
	calls = mock.calls.GetVotingThreshold
	mock.lockGetVotingThreshold.RUnlock()
	return calls
}

// Logger calls LoggerFunc.
func (mock *BTCKeeperMock) Logger(ctx sdk.Context) log.Logger {
	if mock.LoggerFunc == nil {
		panic("BTCKeeperMock.LoggerFunc: method is nil but BTCKeeper.Logger was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogger.Lock()
	mock.calls.Logger = append(mock.calls.Logger, callInfo)
	mock.lockLogger.Unlock()
	return mock.LoggerFunc(ctx)
}

// LoggerCalls gets all the calls that were made to Logger.
// Check the length with:
//     len(mockedBTCKeeper.LoggerCalls())
func (mock *BTCKeeperMock) LoggerCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockLogger.RLock()
	calls = mock.calls.Logger
	mock.lockLogger.RUnlock()
	return calls
}

// SetAddress calls SetAddressFunc.
func (mock *BTCKeeperMock) SetAddress(ctx sdk.Context, address types.AddressInfo) {
	if mock.SetAddressFunc == nil {
		panic("BTCKeeperMock.SetAddressFunc: method is nil but BTCKeeper.SetAddress was just called")
	}
	callInfo := struct {
		Ctx     sdk.Context
		Address types.AddressInfo
	}{
		Ctx:     ctx,
		Address: address,
	}
	mock.lockSetAddress.Lock()
	mock.calls.SetAddress = append(mock.calls.SetAddress, callInfo)
	mock.lockSetAddress.Unlock()
	mock.SetAddressFunc(ctx, address)
}

// SetAddressCalls gets all the calls that were made to SetAddress.
// Check the length with:
//     len(mockedBTCKeeper.SetAddressCalls())
func (mock *BTCKeeperMock) SetAddressCalls() []struct {
	Ctx     sdk.Context
	Address types.AddressInfo
} {
	var calls []struct {
		Ctx     sdk.Context
		Address types.AddressInfo
	}
	mock.lockSetAddress.RLock()
	calls = mock.calls.SetAddress
	mock.lockSetAddress.RUnlock()
	return calls
}

// SetConfirmedOutpointInfo calls SetConfirmedOutpointInfoFunc.
func (mock *BTCKeeperMock) SetConfirmedOutpointInfo(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, info types.OutPointInfo) {
	if mock.SetConfirmedOutpointInfoFunc == nil {
		panic("BTCKeeperMock.SetConfirmedOutpointInfoFunc: method is nil but BTCKeeper.SetConfirmedOutpointInfo was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Info  types.OutPointInfo
	}{
		Ctx:   ctx,
		KeyID: keyID,
		Info:  info,
	}
	mock.lockSetConfirmedOutpointInfo.Lock()
	mock.calls.SetConfirmedOutpointInfo = append(mock.calls.SetConfirmedOutpointInfo, callInfo)
	mock.lockSetConfirmedOutpointInfo.Unlock()
	mock.SetConfirmedOutpointInfoFunc(ctx, keyID, info)
}

// SetConfirmedOutpointInfoCalls gets all the calls that were made to SetConfirmedOutpointInfo.
// Check the length with:
//     len(mockedBTCKeeper.SetConfirmedOutpointInfoCalls())
func (mock *BTCKeeperMock) SetConfirmedOutpointInfoCalls() []struct {
	Ctx   sdk.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	Info  types.OutPointInfo
} {
	var calls []struct {
		Ctx   sdk.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Info  types.OutPointInfo
	}
	mock.lockSetConfirmedOutpointInfo.RLock()
	calls = mock.calls.SetConfirmedOutpointInfo
	mock.lockSetConfirmedOutpointInfo.RUnlock()
	return calls
}

// SetDustAmount calls SetDustAmountFunc.
func (mock *BTCKeeperMock) SetDustAmount(ctx sdk.Context, encodedAddress string, amount github_com_btcsuite_btcutil.Amount) {
	if mock.SetDustAmountFunc == nil {
		panic("BTCKeeperMock.SetDustAmountFunc: method is nil but BTCKeeper.SetDustAmount was just called")
	}
	callInfo := struct {
		Ctx            sdk.Context
		EncodedAddress string
		Amount         github_com_btcsuite_btcutil.Amount
	}{
		Ctx:            ctx,
		EncodedAddress: encodedAddress,
		Amount:         amount,
	}
	mock.lockSetDustAmount.Lock()
	mock.calls.SetDustAmount = append(mock.calls.SetDustAmount, callInfo)
	mock.lockSetDustAmount.Unlock()
	mock.SetDustAmountFunc(ctx, encodedAddress, amount)
}

// SetDustAmountCalls gets all the calls that were made to SetDustAmount.
// Check the length with:
//     len(mockedBTCKeeper.SetDustAmountCalls())
func (mock *BTCKeeperMock) SetDustAmountCalls() []struct {
	Ctx            sdk.Context
	EncodedAddress string
	Amount         github_com_btcsuite_btcutil.Amount
} {
	var calls []struct {
		Ctx            sdk.Context
		EncodedAddress string
		Amount         github_com_btcsuite_btcutil.Amount
	}
	mock.lockSetDustAmount.RLock()
	calls = mock.calls.SetDustAmount
	mock.lockSetDustAmount.RUnlock()
	return calls
}

// SetLatestSignedTxHash calls SetLatestSignedTxHashFunc.
func (mock *BTCKeeperMock) SetLatestSignedTxHash(ctx sdk.Context, txType types.TxType, txHash chainhash.Hash) {
	if mock.SetLatestSignedTxHashFunc == nil {
		panic("BTCKeeperMock.SetLatestSignedTxHashFunc: method is nil but BTCKeeper.SetLatestSignedTxHash was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		TxType types.TxType
		TxHash chainhash.Hash
	}{
		Ctx:    ctx,
		TxType: txType,
		TxHash: txHash,
	}
	mock.lockSetLatestSignedTxHash.Lock()
	mock.calls.SetLatestSignedTxHash = append(mock.calls.SetLatestSignedTxHash, callInfo)
	mock.lockSetLatestSignedTxHash.Unlock()
	mock.SetLatestSignedTxHashFunc(ctx, txType, txHash)
}

// SetLatestSignedTxHashCalls gets all the calls that were made to SetLatestSignedTxHash.
// Check the length with:
//     len(mockedBTCKeeper.SetLatestSignedTxHashCalls())
func (mock *BTCKeeperMock) SetLatestSignedTxHashCalls() []struct {
	Ctx    sdk.Context
	TxType types.TxType
	TxHash chainhash.Hash
} {
	var calls []struct {
		Ctx    sdk.Context
		TxType types.TxType
		TxHash chainhash.Hash
	}
	mock.lockSetLatestSignedTxHash.RLock()
	calls = mock.calls.SetLatestSignedTxHash
	mock.lockSetLatestSignedTxHash.RUnlock()
	return calls
}

// SetParams calls SetParamsFunc.
func (mock *BTCKeeperMock) SetParams(ctx sdk.Context, p types.Params) {
	if mock.SetParamsFunc == nil {
		panic("BTCKeeperMock.SetParamsFunc: method is nil but BTCKeeper.SetParams was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
		P   types.Params
	}{
		Ctx: ctx,
		P:   p,
	}
	mock.lockSetParams.Lock()
	mock.calls.SetParams = append(mock.calls.SetParams, callInfo)
	mock.lockSetParams.Unlock()
	mock.SetParamsFunc(ctx, p)
}

// SetParamsCalls gets all the calls that were made to SetParams.
// Check the length with:
//     len(mockedBTCKeeper.SetParamsCalls())
func (mock *BTCKeeperMock) SetParamsCalls() []struct {
	Ctx sdk.Context
	P   types.Params
} {
	var calls []struct {
		Ctx sdk.Context
		P   types.Params
	}
	mock.lockSetParams.RLock()
	calls = mock.calls.SetParams
	mock.lockSetParams.RUnlock()
	return calls
}

// SetPendingOutpointInfo calls SetPendingOutpointInfoFunc.
func (mock *BTCKeeperMock) SetPendingOutpointInfo(ctx sdk.Context, key exported.PollKey, info types.OutPointInfo) {
	if mock.SetPendingOutpointInfoFunc == nil {
		panic("BTCKeeperMock.SetPendingOutpointInfoFunc: method is nil but BTCKeeper.SetPendingOutpointInfo was just called")
	}
	callInfo := struct {
		Ctx  sdk.Context
		Key  exported.PollKey
		Info types.OutPointInfo
	}{
		Ctx:  ctx,
		Key:  key,
		Info: info,
	}
	mock.lockSetPendingOutpointInfo.Lock()
	mock.calls.SetPendingOutpointInfo = append(mock.calls.SetPendingOutpointInfo, callInfo)
	mock.lockSetPendingOutpointInfo.Unlock()
	mock.SetPendingOutpointInfoFunc(ctx, key, info)
}

// SetPendingOutpointInfoCalls gets all the calls that were made to SetPendingOutpointInfo.
// Check the length with:
//     len(mockedBTCKeeper.SetPendingOutpointInfoCalls())
func (mock *BTCKeeperMock) SetPendingOutpointInfoCalls() []struct {
	Ctx  sdk.Context
	Key  exported.PollKey
	Info types.OutPointInfo
} {
	var calls []struct {
		Ctx  sdk.Context
		Key  exported.PollKey
		Info types.OutPointInfo
	}
	mock.lockSetPendingOutpointInfo.RLock()
	calls = mock.calls.SetPendingOutpointInfo
	mock.lockSetPendingOutpointInfo.RUnlock()
	return calls
}

// SetSignedTx calls SetSignedTxFunc.
func (mock *BTCKeeperMock) SetSignedTx(ctx sdk.Context, tx types.SignedTx) {
	if mock.SetSignedTxFunc == nil {
		panic("BTCKeeperMock.SetSignedTxFunc: method is nil but BTCKeeper.SetSignedTx was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
		Tx  types.SignedTx
	}{
		Ctx: ctx,
		Tx:  tx,
	}
	mock.lockSetSignedTx.Lock()
	mock.calls.SetSignedTx = append(mock.calls.SetSignedTx, callInfo)
	mock.lockSetSignedTx.Unlock()
	mock.SetSignedTxFunc(ctx, tx)
}

// SetSignedTxCalls gets all the calls that were made to SetSignedTx.
// Check the length with:
//     len(mockedBTCKeeper.SetSignedTxCalls())
func (mock *BTCKeeperMock) SetSignedTxCalls() []struct {
	Ctx sdk.Context
	Tx  types.SignedTx
} {
	var calls []struct {
		Ctx sdk.Context
		Tx  types.SignedTx
	}
	mock.lockSetSignedTx.RLock()
	calls = mock.calls.SetSignedTx
	mock.lockSetSignedTx.RUnlock()
	return calls
}

// SetSpentOutpointInfo calls SetSpentOutpointInfoFunc.
func (mock *BTCKeeperMock) SetSpentOutpointInfo(ctx sdk.Context, info types.OutPointInfo) {
	if mock.SetSpentOutpointInfoFunc == nil {
		panic("BTCKeeperMock.SetSpentOutpointInfoFunc: method is nil but BTCKeeper.SetSpentOutpointInfo was just called")
	}
	callInfo := struct {
		Ctx  sdk.Context
		Info types.OutPointInfo
	}{
		Ctx:  ctx,
		Info: info,
	}
	mock.lockSetSpentOutpointInfo.Lock()
	mock.calls.SetSpentOutpointInfo = append(mock.calls.SetSpentOutpointInfo, callInfo)
	mock.lockSetSpentOutpointInfo.Unlock()
	mock.SetSpentOutpointInfoFunc(ctx, info)
}

// SetSpentOutpointInfoCalls gets all the calls that were made to SetSpentOutpointInfo.
// Check the length with:
//     len(mockedBTCKeeper.SetSpentOutpointInfoCalls())
func (mock *BTCKeeperMock) SetSpentOutpointInfoCalls() []struct {
	Ctx  sdk.Context
	Info types.OutPointInfo
} {
	var calls []struct {
		Ctx  sdk.Context
		Info types.OutPointInfo
	}
	mock.lockSetSpentOutpointInfo.RLock()
	calls = mock.calls.SetSpentOutpointInfo
	mock.lockSetSpentOutpointInfo.RUnlock()
	return calls
}

// SetUnconfirmedAmount calls SetUnconfirmedAmountFunc.
func (mock *BTCKeeperMock) SetUnconfirmedAmount(ctx sdk.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, amount github_com_btcsuite_btcutil.Amount) {
	if mock.SetUnconfirmedAmountFunc == nil {
		panic("BTCKeeperMock.SetUnconfirmedAmountFunc: method is nil but BTCKeeper.SetUnconfirmedAmount was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Amount github_com_btcsuite_btcutil.Amount
	}{
		Ctx:    ctx,
		KeyID:  keyID,
		Amount: amount,
	}
	mock.lockSetUnconfirmedAmount.Lock()
	mock.calls.SetUnconfirmedAmount = append(mock.calls.SetUnconfirmedAmount, callInfo)
	mock.lockSetUnconfirmedAmount.Unlock()
	mock.SetUnconfirmedAmountFunc(ctx, keyID, amount)
}

// SetUnconfirmedAmountCalls gets all the calls that were made to SetUnconfirmedAmount.
// Check the length with:
//     len(mockedBTCKeeper.SetUnconfirmedAmountCalls())
func (mock *BTCKeeperMock) SetUnconfirmedAmountCalls() []struct {
	Ctx    sdk.Context
	KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	Amount github_com_btcsuite_btcutil.Amount
} {
	var calls []struct {
		Ctx    sdk.Context
		KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Amount github_com_btcsuite_btcutil.Amount
	}
	mock.lockSetUnconfirmedAmount.RLock()
	calls = mock.calls.SetUnconfirmedAmount
	mock.lockSetUnconfirmedAmount.RUnlock()
	return calls
}

// SetUnsignedTx calls SetUnsignedTxFunc.
func (mock *BTCKeeperMock) SetUnsignedTx(ctx sdk.Context, tx types.UnsignedTx) {
	if mock.SetUnsignedTxFunc == nil {
		panic("BTCKeeperMock.SetUnsignedTxFunc: method is nil but BTCKeeper.SetUnsignedTx was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
		Tx  types.UnsignedTx
	}{
		Ctx: ctx,
		Tx:  tx,
	}
	mock.lockSetUnsignedTx.Lock()
	mock.calls.SetUnsignedTx = append(mock.calls.SetUnsignedTx, callInfo)
	mock.lockSetUnsignedTx.Unlock()
	mock.SetUnsignedTxFunc(ctx, tx)
}

// SetUnsignedTxCalls gets all the calls that were made to SetUnsignedTx.
// Check the length with:
//     len(mockedBTCKeeper.SetUnsignedTxCalls())
func (mock *BTCKeeperMock) SetUnsignedTxCalls() []struct {
	Ctx sdk.Context
	Tx  types.UnsignedTx
} {
	var calls []struct {
		Ctx sdk.Context
		Tx  types.UnsignedTx
	}
	mock.lockSetUnsignedTx.RLock()
	calls = mock.calls.SetUnsignedTx
	mock.lockSetUnsignedTx.RUnlock()
	return calls
}
