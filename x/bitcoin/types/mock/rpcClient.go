// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/axelarnetwork/axelar-core/x/bitcoin/types"
	"github.com/btcsuite/btcd/btcjson"
	"github.com/btcsuite/btcd/wire"
	"sync"
)

// Ensure, that RPCClientMock does implement types.RPCClient.
// If this is not the case, regenerate this file with moq.
var _ types.RPCClient = &RPCClientMock{}

// RPCClientMock is a mock implementation of types.RPCClient.
//
// 	func TestSomethingThatUsesRPCClient(t *testing.T) {
//
// 		// make and configure a mocked types.RPCClient
// 		mockedRPCClient := &RPCClientMock{
// 			EstimateSmartFeeFunc: func(confTarget int64, mode *btcjson.EstimateSmartFeeMode) (*btcjson.EstimateSmartFeeResult, error) {
// 				panic("mock out the EstimateSmartFee method")
// 			},
// 			ListUnspentFunc: func() ([]btcjson.ListUnspentResult, error) {
// 				panic("mock out the ListUnspent method")
// 			},
// 			SignRawTransactionWithWalletFunc: func(tx *wire.MsgTx) (*wire.MsgTx, bool, error) {
// 				panic("mock out the SignRawTransactionWithWallet method")
// 			},
// 		}
//
// 		// use mockedRPCClient in code that requires types.RPCClient
// 		// and then make assertions.
//
// 	}
type RPCClientMock struct {
	// EstimateSmartFeeFunc mocks the EstimateSmartFee method.
	EstimateSmartFeeFunc func(confTarget int64, mode *btcjson.EstimateSmartFeeMode) (*btcjson.EstimateSmartFeeResult, error)

	// ListUnspentFunc mocks the ListUnspent method.
	ListUnspentFunc func() ([]btcjson.ListUnspentResult, error)

	// SignRawTransactionWithWalletFunc mocks the SignRawTransactionWithWallet method.
	SignRawTransactionWithWalletFunc func(tx *wire.MsgTx) (*wire.MsgTx, bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// EstimateSmartFee holds details about calls to the EstimateSmartFee method.
		EstimateSmartFee []struct {
			// ConfTarget is the confTarget argument value.
			ConfTarget int64
			// Mode is the mode argument value.
			Mode *btcjson.EstimateSmartFeeMode
		}
		// ListUnspent holds details about calls to the ListUnspent method.
		ListUnspent []struct {
		}
		// SignRawTransactionWithWallet holds details about calls to the SignRawTransactionWithWallet method.
		SignRawTransactionWithWallet []struct {
			// Tx is the tx argument value.
			Tx *wire.MsgTx
		}
	}
	lockEstimateSmartFee             sync.RWMutex
	lockListUnspent                  sync.RWMutex
	lockSignRawTransactionWithWallet sync.RWMutex
}

// EstimateSmartFee calls EstimateSmartFeeFunc.
func (mock *RPCClientMock) EstimateSmartFee(confTarget int64, mode *btcjson.EstimateSmartFeeMode) (*btcjson.EstimateSmartFeeResult, error) {
	if mock.EstimateSmartFeeFunc == nil {
		panic("RPCClientMock.EstimateSmartFeeFunc: method is nil but RPCClient.EstimateSmartFee was just called")
	}
	callInfo := struct {
		ConfTarget int64
		Mode       *btcjson.EstimateSmartFeeMode
	}{
		ConfTarget: confTarget,
		Mode:       mode,
	}
	mock.lockEstimateSmartFee.Lock()
	mock.calls.EstimateSmartFee = append(mock.calls.EstimateSmartFee, callInfo)
	mock.lockEstimateSmartFee.Unlock()
	return mock.EstimateSmartFeeFunc(confTarget, mode)
}

// EstimateSmartFeeCalls gets all the calls that were made to EstimateSmartFee.
// Check the length with:
//     len(mockedRPCClient.EstimateSmartFeeCalls())
func (mock *RPCClientMock) EstimateSmartFeeCalls() []struct {
	ConfTarget int64
	Mode       *btcjson.EstimateSmartFeeMode
} {
	var calls []struct {
		ConfTarget int64
		Mode       *btcjson.EstimateSmartFeeMode
	}
	mock.lockEstimateSmartFee.RLock()
	calls = mock.calls.EstimateSmartFee
	mock.lockEstimateSmartFee.RUnlock()
	return calls
}

// ListUnspent calls ListUnspentFunc.
func (mock *RPCClientMock) ListUnspent() ([]btcjson.ListUnspentResult, error) {
	if mock.ListUnspentFunc == nil {
		panic("RPCClientMock.ListUnspentFunc: method is nil but RPCClient.ListUnspent was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListUnspent.Lock()
	mock.calls.ListUnspent = append(mock.calls.ListUnspent, callInfo)
	mock.lockListUnspent.Unlock()
	return mock.ListUnspentFunc()
}

// ListUnspentCalls gets all the calls that were made to ListUnspent.
// Check the length with:
//     len(mockedRPCClient.ListUnspentCalls())
func (mock *RPCClientMock) ListUnspentCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListUnspent.RLock()
	calls = mock.calls.ListUnspent
	mock.lockListUnspent.RUnlock()
	return calls
}

// SignRawTransactionWithWallet calls SignRawTransactionWithWalletFunc.
func (mock *RPCClientMock) SignRawTransactionWithWallet(tx *wire.MsgTx) (*wire.MsgTx, bool, error) {
	if mock.SignRawTransactionWithWalletFunc == nil {
		panic("RPCClientMock.SignRawTransactionWithWalletFunc: method is nil but RPCClient.SignRawTransactionWithWallet was just called")
	}
	callInfo := struct {
		Tx *wire.MsgTx
	}{
		Tx: tx,
	}
	mock.lockSignRawTransactionWithWallet.Lock()
	mock.calls.SignRawTransactionWithWallet = append(mock.calls.SignRawTransactionWithWallet, callInfo)
	mock.lockSignRawTransactionWithWallet.Unlock()
	return mock.SignRawTransactionWithWalletFunc(tx)
}

// SignRawTransactionWithWalletCalls gets all the calls that were made to SignRawTransactionWithWallet.
// Check the length with:
//     len(mockedRPCClient.SignRawTransactionWithWalletCalls())
func (mock *RPCClientMock) SignRawTransactionWithWalletCalls() []struct {
	Tx *wire.MsgTx
} {
	var calls []struct {
		Tx *wire.MsgTx
	}
	mock.lockSignRawTransactionWithWallet.RLock()
	calls = mock.calls.SignRawTransactionWithWallet
	mock.lockSignRawTransactionWithWallet.RUnlock()
	return calls
}
