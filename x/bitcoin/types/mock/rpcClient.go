// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/axelarnetwork/axelar-core/x/bitcoin/types"
	"github.com/btcsuite/btcd/btcjson"
	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/btcsuite/btcd/wire"
	"sync"
)

// Ensure, that RPCClientMock does implement types.RPCClient.
// If this is not the case, regenerate this file with moq.
var _ types.RPCClient = &RPCClientMock{}

// RPCClientMock is a mock implementation of types.RPCClient.
//
//     func TestSomethingThatUsesRPCClient(t *testing.T) {
//
//         // make and configure a mocked types.RPCClient
//         mockedRPCClient := &RPCClientMock{
//             GetRawTransactionVerboseFunc: func(hash *chainhash.Hash) (*btcjson.TxRawResult, error) {
// 	               panic("mock out the GetRawTransactionVerbose method")
//             },
//             ImportAddressFunc: func(address string) error {
// 	               panic("mock out the ImportAddress method")
//             },
//             ImportAddressRescanFunc: func(address string, account string, rescan bool) error {
// 	               panic("mock out the ImportAddressRescan method")
//             },
//             SendRawTransactionFunc: func(tx *wire.MsgTx, allowHighFees bool) (*chainhash.Hash, error) {
// 	               panic("mock out the SendRawTransaction method")
//             },
//         }
//
//         // use mockedRPCClient in code that requires types.RPCClient
//         // and then make assertions.
//
//     }
type RPCClientMock struct {
	// GetRawTransactionVerboseFunc mocks the GetRawTransactionVerbose method.
	GetRawTransactionVerboseFunc func(hash *chainhash.Hash) (*btcjson.TxRawResult, error)

	// ImportAddressFunc mocks the ImportAddress method.
	ImportAddressFunc func(address string) error

	// ImportAddressRescanFunc mocks the ImportAddressRescan method.
	ImportAddressRescanFunc func(address string, account string, rescan bool) error

	// SendRawTransactionFunc mocks the SendRawTransaction method.
	SendRawTransactionFunc func(tx *wire.MsgTx, allowHighFees bool) (*chainhash.Hash, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRawTransactionVerbose holds details about calls to the GetRawTransactionVerbose method.
		GetRawTransactionVerbose []struct {
			// Hash is the hash argument value.
			Hash *chainhash.Hash
		}
		// ImportAddress holds details about calls to the ImportAddress method.
		ImportAddress []struct {
			// Address is the address argument value.
			Address string
		}
		// ImportAddressRescan holds details about calls to the ImportAddressRescan method.
		ImportAddressRescan []struct {
			// Address is the address argument value.
			Address string
			// Account is the account argument value.
			Account string
			// Rescan is the rescan argument value.
			Rescan bool
		}
		// SendRawTransaction holds details about calls to the SendRawTransaction method.
		SendRawTransaction []struct {
			// Tx is the tx argument value.
			Tx *wire.MsgTx
			// AllowHighFees is the allowHighFees argument value.
			AllowHighFees bool
		}
	}
	lockGetRawTransactionVerbose sync.RWMutex
	lockImportAddress            sync.RWMutex
	lockImportAddressRescan      sync.RWMutex
	lockSendRawTransaction       sync.RWMutex
}

// GetRawTransactionVerbose calls GetRawTransactionVerboseFunc.
func (mock *RPCClientMock) GetRawTransactionVerbose(hash *chainhash.Hash) (*btcjson.TxRawResult, error) {
	if mock.GetRawTransactionVerboseFunc == nil {
		panic("RPCClientMock.GetRawTransactionVerboseFunc: method is nil but RPCClient.GetRawTransactionVerbose was just called")
	}
	callInfo := struct {
		Hash *chainhash.Hash
	}{
		Hash: hash,
	}
	mock.lockGetRawTransactionVerbose.Lock()
	mock.calls.GetRawTransactionVerbose = append(mock.calls.GetRawTransactionVerbose, callInfo)
	mock.lockGetRawTransactionVerbose.Unlock()
	return mock.GetRawTransactionVerboseFunc(hash)
}

// GetRawTransactionVerboseCalls gets all the calls that were made to GetRawTransactionVerbose.
// Check the length with:
//     len(mockedRPCClient.GetRawTransactionVerboseCalls())
func (mock *RPCClientMock) GetRawTransactionVerboseCalls() []struct {
	Hash *chainhash.Hash
} {
	var calls []struct {
		Hash *chainhash.Hash
	}
	mock.lockGetRawTransactionVerbose.RLock()
	calls = mock.calls.GetRawTransactionVerbose
	mock.lockGetRawTransactionVerbose.RUnlock()
	return calls
}

// ImportAddress calls ImportAddressFunc.
func (mock *RPCClientMock) ImportAddress(address string) error {
	if mock.ImportAddressFunc == nil {
		panic("RPCClientMock.ImportAddressFunc: method is nil but RPCClient.ImportAddress was just called")
	}
	callInfo := struct {
		Address string
	}{
		Address: address,
	}
	mock.lockImportAddress.Lock()
	mock.calls.ImportAddress = append(mock.calls.ImportAddress, callInfo)
	mock.lockImportAddress.Unlock()
	return mock.ImportAddressFunc(address)
}

// ImportAddressCalls gets all the calls that were made to ImportAddress.
// Check the length with:
//     len(mockedRPCClient.ImportAddressCalls())
func (mock *RPCClientMock) ImportAddressCalls() []struct {
	Address string
} {
	var calls []struct {
		Address string
	}
	mock.lockImportAddress.RLock()
	calls = mock.calls.ImportAddress
	mock.lockImportAddress.RUnlock()
	return calls
}

// ImportAddressRescan calls ImportAddressRescanFunc.
func (mock *RPCClientMock) ImportAddressRescan(address string, account string, rescan bool) error {
	if mock.ImportAddressRescanFunc == nil {
		panic("RPCClientMock.ImportAddressRescanFunc: method is nil but RPCClient.ImportAddressRescan was just called")
	}
	callInfo := struct {
		Address string
		Account string
		Rescan  bool
	}{
		Address: address,
		Account: account,
		Rescan:  rescan,
	}
	mock.lockImportAddressRescan.Lock()
	mock.calls.ImportAddressRescan = append(mock.calls.ImportAddressRescan, callInfo)
	mock.lockImportAddressRescan.Unlock()
	return mock.ImportAddressRescanFunc(address, account, rescan)
}

// ImportAddressRescanCalls gets all the calls that were made to ImportAddressRescan.
// Check the length with:
//     len(mockedRPCClient.ImportAddressRescanCalls())
func (mock *RPCClientMock) ImportAddressRescanCalls() []struct {
	Address string
	Account string
	Rescan  bool
} {
	var calls []struct {
		Address string
		Account string
		Rescan  bool
	}
	mock.lockImportAddressRescan.RLock()
	calls = mock.calls.ImportAddressRescan
	mock.lockImportAddressRescan.RUnlock()
	return calls
}

// SendRawTransaction calls SendRawTransactionFunc.
func (mock *RPCClientMock) SendRawTransaction(tx *wire.MsgTx, allowHighFees bool) (*chainhash.Hash, error) {
	if mock.SendRawTransactionFunc == nil {
		panic("RPCClientMock.SendRawTransactionFunc: method is nil but RPCClient.SendRawTransaction was just called")
	}
	callInfo := struct {
		Tx            *wire.MsgTx
		AllowHighFees bool
	}{
		Tx:            tx,
		AllowHighFees: allowHighFees,
	}
	mock.lockSendRawTransaction.Lock()
	mock.calls.SendRawTransaction = append(mock.calls.SendRawTransaction, callInfo)
	mock.lockSendRawTransaction.Unlock()
	return mock.SendRawTransactionFunc(tx, allowHighFees)
}

// SendRawTransactionCalls gets all the calls that were made to SendRawTransaction.
// Check the length with:
//     len(mockedRPCClient.SendRawTransactionCalls())
func (mock *RPCClientMock) SendRawTransactionCalls() []struct {
	Tx            *wire.MsgTx
	AllowHighFees bool
} {
	var calls []struct {
		Tx            *wire.MsgTx
		AllowHighFees bool
	}
	mock.lockSendRawTransaction.RLock()
	calls = mock.calls.SendRawTransaction
	mock.lockSendRawTransaction.RUnlock()
	return calls
}
