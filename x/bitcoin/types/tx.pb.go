// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitcoin/v1beta1/tx.proto

package types

import (
	fmt "fmt"
	exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgConfirmOutpoint represents a message to trigger the confirmation of a
// Bitcoin outpoint
type MsgConfirmOutpoint struct {
	Sender       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	OutPointInfo OutPointInfo                                  `protobuf:"bytes,2,opt,name=out_point_info,json=outPointInfo,proto3" json:"out_point_info"`
}

func (m *MsgConfirmOutpoint) Reset()         { *m = MsgConfirmOutpoint{} }
func (m *MsgConfirmOutpoint) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmOutpoint) ProtoMessage()    {}
func (*MsgConfirmOutpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{0}
}
func (m *MsgConfirmOutpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmOutpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmOutpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmOutpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmOutpoint.Merge(m, src)
}
func (m *MsgConfirmOutpoint) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmOutpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmOutpoint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmOutpoint proto.InternalMessageInfo

// MsgLink represents a message to link a cross-chain address to a Bitcoin
// address
type MsgLink struct {
	Sender         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	RecipientAddr  string                                        `protobuf:"bytes,2,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`
	RecipientChain string                                        `protobuf:"bytes,3,opt,name=recipient_chain,json=recipientChain,proto3" json:"recipient_chain,omitempty"`
}

func (m *MsgLink) Reset()         { *m = MsgLink{} }
func (m *MsgLink) String() string { return proto.CompactTextString(m) }
func (*MsgLink) ProtoMessage()    {}
func (*MsgLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{1}
}
func (m *MsgLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLink.Merge(m, src)
}
func (m *MsgLink) XXX_Size() int {
	return m.Size()
}
func (m *MsgLink) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLink.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLink proto.InternalMessageInfo

// MsgSignPendingTransfers represents a message to trigger the signing of a
// consolidation transaction
type MsgSignPendingTransfers struct {
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	// TODO: Remove once c2d2 is ready to perform child-pay-for-parent for
	// consolidation transactions
	Fee int64 `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"` // Deprecated: Do not use.
}

func (m *MsgSignPendingTransfers) Reset()         { *m = MsgSignPendingTransfers{} }
func (m *MsgSignPendingTransfers) String() string { return proto.CompactTextString(m) }
func (*MsgSignPendingTransfers) ProtoMessage()    {}
func (*MsgSignPendingTransfers) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{2}
}
func (m *MsgSignPendingTransfers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignPendingTransfers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignPendingTransfers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignPendingTransfers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignPendingTransfers.Merge(m, src)
}
func (m *MsgSignPendingTransfers) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignPendingTransfers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignPendingTransfers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignPendingTransfers proto.InternalMessageInfo

// MsgVoteConfirmOutpoint represents a message to that votes on an outpoint
type MsgVoteConfirmOutpoint struct {
	Sender    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Poll      exported.PollMeta                             `protobuf:"bytes,2,opt,name=poll,proto3" json:"poll"`
	OutPoint  string                                        `protobuf:"bytes,3,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	Confirmed bool                                          `protobuf:"varint,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
}

func (m *MsgVoteConfirmOutpoint) Reset()         { *m = MsgVoteConfirmOutpoint{} }
func (m *MsgVoteConfirmOutpoint) String() string { return proto.CompactTextString(m) }
func (*MsgVoteConfirmOutpoint) ProtoMessage()    {}
func (*MsgVoteConfirmOutpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{3}
}
func (m *MsgVoteConfirmOutpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteConfirmOutpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteConfirmOutpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteConfirmOutpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteConfirmOutpoint.Merge(m, src)
}
func (m *MsgVoteConfirmOutpoint) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteConfirmOutpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteConfirmOutpoint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteConfirmOutpoint proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgConfirmOutpoint)(nil), "bitcoin.v1beta1.MsgConfirmOutpoint")
	proto.RegisterType((*MsgLink)(nil), "bitcoin.v1beta1.MsgLink")
	proto.RegisterType((*MsgSignPendingTransfers)(nil), "bitcoin.v1beta1.MsgSignPendingTransfers")
	proto.RegisterType((*MsgVoteConfirmOutpoint)(nil), "bitcoin.v1beta1.MsgVoteConfirmOutpoint")
}

func init() { proto.RegisterFile("bitcoin/v1beta1/tx.proto", fileDescriptor_5f5c2c0447d15a63) }

var fileDescriptor_5f5c2c0447d15a63 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x36, 0x51, 0x69, 0x96, 0xd2, 0x4a, 0x56, 0x05, 0x56, 0x0b, 0x4e, 0x88, 0x84, 0xc8,
	0x25, 0xb6, 0x02, 0x5c, 0x38, 0x36, 0x3d, 0x45, 0xc2, 0x6a, 0x64, 0x10, 0x07, 0x2e, 0x91, 0xe3,
	0x1d, 0x6f, 0x57, 0x71, 0x76, 0xac, 0xdd, 0x4d, 0x09, 0x7c, 0x05, 0x1f, 0xc1, 0x89, 0x2f, 0xc9,
	0xb1, 0x47, 0xb8, 0x54, 0x90, 0xfc, 0x05, 0x27, 0x64, 0x67, 0x93, 0x54, 0xc0, 0xb1, 0x3d, 0x79,
	0xf7, 0xcd, 0x9b, 0xf1, 0x9b, 0x7d, 0x33, 0xd4, 0x1d, 0x09, 0x93, 0xa0, 0x90, 0xc1, 0x65, 0x77,
	0x04, 0x26, 0xee, 0x06, 0x66, 0xe6, 0xe7, 0x0a, 0x0d, 0x3a, 0x87, 0x36, 0xe2, 0xdb, 0xc8, 0xf1,
	0xc9, 0x3f, 0xd4, 0x4f, 0x39, 0xe8, 0x15, 0xfb, 0xf8, 0xe9, 0x25, 0x1a, 0x08, 0x60, 0x96, 0xa3,
	0x32, 0xc0, 0xfe, 0x4b, 0x39, 0xe2, 0xc8, 0xb1, 0x3c, 0x06, 0xc5, 0x69, 0x85, 0xb6, 0xbe, 0x11,
	0xea, 0x84, 0x9a, 0x9f, 0xa1, 0x4c, 0x85, 0x9a, 0x9c, 0x4f, 0x4d, 0x8e, 0x42, 0x1a, 0xa7, 0x4f,
	0x77, 0x35, 0x48, 0x06, 0xca, 0x25, 0x4d, 0xd2, 0xde, 0xef, 0x75, 0x7f, 0x5f, 0x37, 0x3a, 0x5c,
	0x98, 0x8b, 0xe9, 0xc8, 0x4f, 0x70, 0x12, 0x24, 0xa8, 0x27, 0xa8, 0xed, 0xa7, 0xa3, 0xd9, 0xd8,
	0xfe, 0xea, 0x34, 0x49, 0x4e, 0x19, 0x53, 0xa0, 0x75, 0x64, 0x0b, 0x38, 0x7d, 0x7a, 0x80, 0x53,
	0x33, 0x2c, 0xeb, 0x0e, 0x85, 0x4c, 0xd1, 0xdd, 0x69, 0x92, 0xf6, 0xfd, 0x17, 0x4f, 0xfc, 0xbf,
	0x3a, 0xf4, 0xcf, 0xa7, 0x66, 0x50, 0xb0, 0xfa, 0x32, 0xc5, 0x5e, 0x6d, 0x7e, 0xdd, 0xa8, 0x44,
	0xfb, 0x78, 0x03, 0x6b, 0x7d, 0x25, 0xf4, 0x5e, 0xa8, 0xf9, 0x1b, 0x21, 0xc7, 0xb7, 0xa9, 0xf0,
	0x19, 0x3d, 0x50, 0x90, 0x88, 0x5c, 0x80, 0x34, 0xc3, 0x98, 0x31, 0x55, 0x2a, 0xac, 0x47, 0x0f,
	0x36, 0x68, 0x91, 0xe1, 0x3c, 0xa7, 0x87, 0x5b, 0x5a, 0x72, 0x11, 0x0b, 0xe9, 0x56, 0x4b, 0xde,
	0x36, 0xfb, 0xac, 0x40, 0x5b, 0x9f, 0xe9, 0xa3, 0x50, 0xf3, 0xb7, 0x82, 0xcb, 0x01, 0x48, 0x26,
	0x24, 0x7f, 0xa7, 0x62, 0xa9, 0x53, 0x50, 0xfa, 0x36, 0x55, 0x1f, 0xd1, 0x6a, 0x0a, 0x50, 0x4a,
	0xad, 0xf6, 0x76, 0x5c, 0x12, 0x15, 0xd7, 0xd6, 0x0f, 0x42, 0x1f, 0x86, 0x9a, 0xbf, 0x47, 0x03,
	0x77, 0xe8, 0xe9, 0x6b, 0x5a, 0xcb, 0x31, 0xcb, 0xac, 0x93, 0x0d, 0xbf, 0x98, 0x3e, 0x7f, 0x3d,
	0x7d, 0x1b, 0x3f, 0x07, 0x98, 0x65, 0x21, 0x98, 0xd8, 0x7a, 0x59, 0xa6, 0x38, 0x27, 0xb4, 0xbe,
	0x19, 0x07, 0xfb, 0x7e, 0x7b, 0x6b, 0x93, 0x9d, 0xc7, 0xb4, 0x9e, 0xac, 0x54, 0x03, 0x73, 0x6b,
	0x4d, 0xd2, 0xde, 0x8b, 0xb6, 0x40, 0x2f, 0x9a, 0xff, 0xf2, 0x2a, 0xf3, 0x85, 0x47, 0xae, 0x16,
	0x1e, 0xf9, 0xb9, 0xf0, 0xc8, 0x97, 0xa5, 0x57, 0xb9, 0x5a, 0x7a, 0x95, 0xef, 0x4b, 0xaf, 0xf2,
	0xe1, 0xd5, 0x8d, 0x56, 0xe2, 0x19, 0x64, 0xb1, 0x92, 0x60, 0x3e, 0xa2, 0x1a, 0xdb, 0x5b, 0x27,
	0x41, 0x05, 0xc1, 0x2c, 0x58, 0xaf, 0x51, 0xd9, 0xdc, 0x68, 0xb7, 0x5c, 0x83, 0x97, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0xef, 0x51, 0x16, 0x89, 0x03, 0x00, 0x00,
}

func (m *MsgConfirmOutpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmOutpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmOutpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutPointInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecipientChain) > 0 {
		i -= len(m.RecipientChain)
		copy(dAtA[i:], m.RecipientChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecipientChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipientAddr) > 0 {
		i -= len(m.RecipientAddr)
		copy(dAtA[i:], m.RecipientAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecipientAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignPendingTransfers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignPendingTransfers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignPendingTransfers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteConfirmOutpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteConfirmOutpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteConfirmOutpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirmed {
		i--
		if m.Confirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutPoint) > 0 {
		i -= len(m.OutPoint)
		copy(dAtA[i:], m.OutPoint)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutPoint)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Poll.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConfirmOutpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OutPointInfo.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecipientAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecipientChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSignPendingTransfers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Fee != 0 {
		n += 1 + sovTx(uint64(m.Fee))
	}
	return n
}

func (m *MsgVoteConfirmOutpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Poll.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OutPoint)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Confirmed {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConfirmOutpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmOutpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmOutpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPointInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutPointInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignPendingTransfers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignPendingTransfers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignPendingTransfers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteConfirmOutpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteConfirmOutpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteConfirmOutpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Poll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirmed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
