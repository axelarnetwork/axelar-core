// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitcoin/v1beta1/tx.proto

package types

import (
	fmt "fmt"
	github_com_axelarnetwork_axelar_core_x_nexus_exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	github_com_axelarnetwork_axelar_core_x_tss_exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	github_com_btcsuite_btcutil "github.com/btcsuite/btcutil"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgConfirmOutpoint represents a message to trigger the confirmation of a
// Bitcoin outpoint
type ConfirmOutpointRequest struct {
	Sender       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	OutPointInfo OutPointInfo                                  `protobuf:"bytes,2,opt,name=out_point_info,json=outPointInfo,proto3" json:"out_point_info"`
}

func (m *ConfirmOutpointRequest) Reset()         { *m = ConfirmOutpointRequest{} }
func (m *ConfirmOutpointRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmOutpointRequest) ProtoMessage()    {}
func (*ConfirmOutpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{0}
}
func (m *ConfirmOutpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmOutpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmOutpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmOutpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmOutpointRequest.Merge(m, src)
}
func (m *ConfirmOutpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmOutpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmOutpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmOutpointRequest proto.InternalMessageInfo

type ConfirmOutpointResponse struct {
}

func (m *ConfirmOutpointResponse) Reset()         { *m = ConfirmOutpointResponse{} }
func (m *ConfirmOutpointResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmOutpointResponse) ProtoMessage()    {}
func (*ConfirmOutpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{1}
}
func (m *ConfirmOutpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmOutpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmOutpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmOutpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmOutpointResponse.Merge(m, src)
}
func (m *ConfirmOutpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmOutpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmOutpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmOutpointResponse proto.InternalMessageInfo

// MsgLink represents a message to link a cross-chain address to a Bitcoin
// address
type LinkRequest struct {
	Sender         github_com_cosmos_cosmos_sdk_types.AccAddress                   `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	RecipientAddr  string                                                          `protobuf:"bytes,2,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`
	RecipientChain github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName `protobuf:"bytes,3,opt,name=recipient_chain,json=recipientChain,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" json:"recipient_chain,omitempty"`
}

func (m *LinkRequest) Reset()         { *m = LinkRequest{} }
func (m *LinkRequest) String() string { return proto.CompactTextString(m) }
func (*LinkRequest) ProtoMessage()    {}
func (*LinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{2}
}
func (m *LinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkRequest.Merge(m, src)
}
func (m *LinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *LinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LinkRequest proto.InternalMessageInfo

type LinkResponse struct {
	DepositAddr string `protobuf:"bytes,2,opt,name=deposit_addr,json=depositAddr,proto3" json:"deposit_addr,omitempty"`
}

func (m *LinkResponse) Reset()         { *m = LinkResponse{} }
func (m *LinkResponse) String() string { return proto.CompactTextString(m) }
func (*LinkResponse) ProtoMessage()    {}
func (*LinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{3}
}
func (m *LinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkResponse.Merge(m, src)
}
func (m *LinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *LinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LinkResponse proto.InternalMessageInfo

// CreatePendingTransfersTxRequest represents a message to trigger the creation
// of a secondary key consolidation transaction
type CreatePendingTransfersTxRequest struct {
	Sender          github_com_cosmos_cosmos_sdk_types.AccAddress             `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	KeyID           github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_id,omitempty"`
	MasterKeyAmount github_com_btcsuite_btcutil.Amount                        `protobuf:"varint,3,opt,name=master_key_amount,json=masterKeyAmount,proto3,casttype=github.com/btcsuite/btcutil.Amount" json:"master_key_amount,omitempty"`
}

func (m *CreatePendingTransfersTxRequest) Reset()         { *m = CreatePendingTransfersTxRequest{} }
func (m *CreatePendingTransfersTxRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePendingTransfersTxRequest) ProtoMessage()    {}
func (*CreatePendingTransfersTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{4}
}
func (m *CreatePendingTransfersTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePendingTransfersTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePendingTransfersTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePendingTransfersTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePendingTransfersTxRequest.Merge(m, src)
}
func (m *CreatePendingTransfersTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePendingTransfersTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePendingTransfersTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePendingTransfersTxRequest proto.InternalMessageInfo

type CreatePendingTransfersTxResponse struct {
}

func (m *CreatePendingTransfersTxResponse) Reset()         { *m = CreatePendingTransfersTxResponse{} }
func (m *CreatePendingTransfersTxResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePendingTransfersTxResponse) ProtoMessage()    {}
func (*CreatePendingTransfersTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{5}
}
func (m *CreatePendingTransfersTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePendingTransfersTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePendingTransfersTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePendingTransfersTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePendingTransfersTxResponse.Merge(m, src)
}
func (m *CreatePendingTransfersTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePendingTransfersTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePendingTransfersTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePendingTransfersTxResponse proto.InternalMessageInfo

// MsgVoteConfirmOutpoint represents a message to that votes on an outpoint
type VoteConfirmOutpointRequest struct {
	Sender    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	PollKey   exported.PollKey                              `protobuf:"bytes,2,opt,name=poll_key,json=pollKey,proto3" json:"poll_key"`
	OutPoint  string                                        `protobuf:"bytes,3,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	Confirmed bool                                          `protobuf:"varint,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
}

func (m *VoteConfirmOutpointRequest) Reset()         { *m = VoteConfirmOutpointRequest{} }
func (m *VoteConfirmOutpointRequest) String() string { return proto.CompactTextString(m) }
func (*VoteConfirmOutpointRequest) ProtoMessage()    {}
func (*VoteConfirmOutpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{6}
}
func (m *VoteConfirmOutpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteConfirmOutpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteConfirmOutpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteConfirmOutpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteConfirmOutpointRequest.Merge(m, src)
}
func (m *VoteConfirmOutpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *VoteConfirmOutpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteConfirmOutpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteConfirmOutpointRequest proto.InternalMessageInfo

type VoteConfirmOutpointResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *VoteConfirmOutpointResponse) Reset()         { *m = VoteConfirmOutpointResponse{} }
func (m *VoteConfirmOutpointResponse) String() string { return proto.CompactTextString(m) }
func (*VoteConfirmOutpointResponse) ProtoMessage()    {}
func (*VoteConfirmOutpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{7}
}
func (m *VoteConfirmOutpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteConfirmOutpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteConfirmOutpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteConfirmOutpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteConfirmOutpointResponse.Merge(m, src)
}
func (m *VoteConfirmOutpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *VoteConfirmOutpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteConfirmOutpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteConfirmOutpointResponse proto.InternalMessageInfo

type SubmitExternalSignatureRequest struct {
	Sender    github_com_cosmos_cosmos_sdk_types.AccAddress             `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_id,omitempty"`
	Signature []byte                                                    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SigHash   []byte                                                    `protobuf:"bytes,4,opt,name=sig_hash,json=sigHash,proto3" json:"sig_hash,omitempty"`
}

func (m *SubmitExternalSignatureRequest) Reset()         { *m = SubmitExternalSignatureRequest{} }
func (m *SubmitExternalSignatureRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitExternalSignatureRequest) ProtoMessage()    {}
func (*SubmitExternalSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{8}
}
func (m *SubmitExternalSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitExternalSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitExternalSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitExternalSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitExternalSignatureRequest.Merge(m, src)
}
func (m *SubmitExternalSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitExternalSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitExternalSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitExternalSignatureRequest proto.InternalMessageInfo

type SubmitExternalSignatureResponse struct {
}

func (m *SubmitExternalSignatureResponse) Reset()         { *m = SubmitExternalSignatureResponse{} }
func (m *SubmitExternalSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitExternalSignatureResponse) ProtoMessage()    {}
func (*SubmitExternalSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{9}
}
func (m *SubmitExternalSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitExternalSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitExternalSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitExternalSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitExternalSignatureResponse.Merge(m, src)
}
func (m *SubmitExternalSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitExternalSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitExternalSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitExternalSignatureResponse proto.InternalMessageInfo

type CreateMasterTxRequest struct {
	Sender             github_com_cosmos_cosmos_sdk_types.AccAddress             `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	KeyID              github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_id,omitempty"`
	SecondaryKeyAmount github_com_btcsuite_btcutil.Amount                        `protobuf:"varint,3,opt,name=secondary_key_amount,json=secondaryKeyAmount,proto3,casttype=github.com/btcsuite/btcutil.Amount" json:"secondary_key_amount,omitempty"`
}

func (m *CreateMasterTxRequest) Reset()         { *m = CreateMasterTxRequest{} }
func (m *CreateMasterTxRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMasterTxRequest) ProtoMessage()    {}
func (*CreateMasterTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{10}
}
func (m *CreateMasterTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMasterTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMasterTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMasterTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMasterTxRequest.Merge(m, src)
}
func (m *CreateMasterTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateMasterTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMasterTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMasterTxRequest proto.InternalMessageInfo

type CreateRescueTxResponse struct {
}

func (m *CreateRescueTxResponse) Reset()         { *m = CreateRescueTxResponse{} }
func (m *CreateRescueTxResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRescueTxResponse) ProtoMessage()    {}
func (*CreateRescueTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{11}
}
func (m *CreateRescueTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRescueTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRescueTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRescueTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRescueTxResponse.Merge(m, src)
}
func (m *CreateRescueTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateRescueTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRescueTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRescueTxResponse proto.InternalMessageInfo

type CreateRescueTxRequest struct {
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *CreateRescueTxRequest) Reset()         { *m = CreateRescueTxRequest{} }
func (m *CreateRescueTxRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRescueTxRequest) ProtoMessage()    {}
func (*CreateRescueTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{12}
}
func (m *CreateRescueTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRescueTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRescueTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRescueTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRescueTxRequest.Merge(m, src)
}
func (m *CreateRescueTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRescueTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRescueTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRescueTxRequest proto.InternalMessageInfo

type CreateMasterTxResponse struct {
}

func (m *CreateMasterTxResponse) Reset()         { *m = CreateMasterTxResponse{} }
func (m *CreateMasterTxResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMasterTxResponse) ProtoMessage()    {}
func (*CreateMasterTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{13}
}
func (m *CreateMasterTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMasterTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMasterTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMasterTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMasterTxResponse.Merge(m, src)
}
func (m *CreateMasterTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateMasterTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMasterTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMasterTxResponse proto.InternalMessageInfo

type SignTxRequest struct {
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	TxType TxType                                        `protobuf:"varint,2,opt,name=tx_type,json=txType,proto3,enum=bitcoin.v1beta1.TxType" json:"tx_type,omitempty"`
}

func (m *SignTxRequest) Reset()         { *m = SignTxRequest{} }
func (m *SignTxRequest) String() string { return proto.CompactTextString(m) }
func (*SignTxRequest) ProtoMessage()    {}
func (*SignTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{14}
}
func (m *SignTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTxRequest.Merge(m, src)
}
func (m *SignTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTxRequest proto.InternalMessageInfo

type SignTxResponse struct {
	Position int64 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *SignTxResponse) Reset()         { *m = SignTxResponse{} }
func (m *SignTxResponse) String() string { return proto.CompactTextString(m) }
func (*SignTxResponse) ProtoMessage()    {}
func (*SignTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f5c2c0447d15a63, []int{15}
}
func (m *SignTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTxResponse.Merge(m, src)
}
func (m *SignTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignTxResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ConfirmOutpointRequest)(nil), "bitcoin.v1beta1.ConfirmOutpointRequest")
	proto.RegisterType((*ConfirmOutpointResponse)(nil), "bitcoin.v1beta1.ConfirmOutpointResponse")
	proto.RegisterType((*LinkRequest)(nil), "bitcoin.v1beta1.LinkRequest")
	proto.RegisterType((*LinkResponse)(nil), "bitcoin.v1beta1.LinkResponse")
	proto.RegisterType((*CreatePendingTransfersTxRequest)(nil), "bitcoin.v1beta1.CreatePendingTransfersTxRequest")
	proto.RegisterType((*CreatePendingTransfersTxResponse)(nil), "bitcoin.v1beta1.CreatePendingTransfersTxResponse")
	proto.RegisterType((*VoteConfirmOutpointRequest)(nil), "bitcoin.v1beta1.VoteConfirmOutpointRequest")
	proto.RegisterType((*VoteConfirmOutpointResponse)(nil), "bitcoin.v1beta1.VoteConfirmOutpointResponse")
	proto.RegisterType((*SubmitExternalSignatureRequest)(nil), "bitcoin.v1beta1.SubmitExternalSignatureRequest")
	proto.RegisterType((*SubmitExternalSignatureResponse)(nil), "bitcoin.v1beta1.SubmitExternalSignatureResponse")
	proto.RegisterType((*CreateMasterTxRequest)(nil), "bitcoin.v1beta1.CreateMasterTxRequest")
	proto.RegisterType((*CreateRescueTxResponse)(nil), "bitcoin.v1beta1.CreateRescueTxResponse")
	proto.RegisterType((*CreateRescueTxRequest)(nil), "bitcoin.v1beta1.CreateRescueTxRequest")
	proto.RegisterType((*CreateMasterTxResponse)(nil), "bitcoin.v1beta1.CreateMasterTxResponse")
	proto.RegisterType((*SignTxRequest)(nil), "bitcoin.v1beta1.SignTxRequest")
	proto.RegisterType((*SignTxResponse)(nil), "bitcoin.v1beta1.SignTxResponse")
}

func init() { proto.RegisterFile("bitcoin/v1beta1/tx.proto", fileDescriptor_5f5c2c0447d15a63) }

var fileDescriptor_5f5c2c0447d15a63 = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xdb, 0xdd, 0xb4, 0x99, 0x66, 0x5b, 0x61, 0x2d, 0xdd, 0x6c, 0xba, 0xd8, 0xa9, 0x25,
	0x50, 0x0f, 0xd4, 0x21, 0x0b, 0x1c, 0x38, 0xad, 0x9a, 0x00, 0x22, 0x2a, 0xb0, 0xd5, 0x6c, 0x84,
	0x10, 0x12, 0x8a, 0x26, 0xf6, 0x4b, 0x32, 0x8a, 0x33, 0x63, 0x66, 0xc6, 0x8b, 0x7d, 0xe6, 0xca,
	0x81, 0x3b, 0x07, 0xfe, 0x01, 0xbf, 0xa3, 0xc7, 0x3d, 0x72, 0x8a, 0x20, 0x39, 0xf3, 0x07, 0x72,
	0x42, 0x1e, 0x3b, 0x71, 0xa0, 0xbb, 0xd2, 0x0a, 0x6d, 0x0e, 0x3d, 0x79, 0xe6, 0xbd, 0xe7, 0xf7,
	0xde, 0xf7, 0xbd, 0xf7, 0x25, 0x46, 0xb5, 0x01, 0x55, 0x1e, 0xa7, 0xac, 0xf9, 0xbc, 0x35, 0x00,
	0x45, 0x5a, 0x4d, 0x15, 0xbb, 0xa1, 0xe0, 0x8a, 0x9b, 0x47, 0xb9, 0xc7, 0xcd, 0x3d, 0xf5, 0x93,
	0x1b, 0xa1, 0x49, 0x08, 0x32, 0x8b, 0xae, 0x9f, 0x3e, 0xe7, 0x0a, 0x9a, 0x10, 0x87, 0x5c, 0x28,
	0xf0, 0x5f, 0x1a, 0x72, 0x7f, 0xc4, 0x47, 0x5c, 0x1f, 0x9b, 0xe9, 0x29, 0xb3, 0x3a, 0xbf, 0x1b,
	0xe8, 0xb8, 0xc3, 0xd9, 0x90, 0x8a, 0xe9, 0xd3, 0x48, 0x85, 0x9c, 0x32, 0x85, 0xe1, 0x87, 0x08,
	0xa4, 0x32, 0xbb, 0xa8, 0x2c, 0x81, 0xf9, 0x20, 0x6a, 0x46, 0xc3, 0x38, 0xab, 0xb6, 0x5b, 0xcb,
	0x99, 0x7d, 0x3e, 0xa2, 0x6a, 0x1c, 0x0d, 0x5c, 0x8f, 0x4f, 0x9b, 0x1e, 0x97, 0x53, 0x2e, 0xf3,
	0xc7, 0xb9, 0xf4, 0x27, 0x79, 0xb9, 0x0b, 0xcf, 0xbb, 0xf0, 0x7d, 0x01, 0x52, 0xe2, 0x3c, 0x81,
	0xd9, 0x45, 0x87, 0x3c, 0x52, 0x7d, 0x9d, 0xbe, 0x4f, 0xd9, 0x90, 0xd7, 0x76, 0x1a, 0xc6, 0xd9,
	0xc1, 0xe3, 0x77, 0xdc, 0xff, 0xa0, 0x74, 0x9f, 0x46, 0xea, 0x2a, 0x8d, 0xea, 0xb2, 0x21, 0x6f,
	0xdf, 0xb9, 0x9e, 0xd9, 0x25, 0x5c, 0xe5, 0x1b, 0x36, 0xe7, 0x21, 0x7a, 0x70, 0xa3, 0x5f, 0x19,
	0x72, 0x26, 0xc1, 0xf9, 0xdb, 0x40, 0x07, 0x5f, 0x52, 0x36, 0xd9, 0x02, 0x80, 0x77, 0xd1, 0xa1,
	0x00, 0x8f, 0x86, 0x14, 0x98, 0xea, 0x13, 0xdf, 0x17, 0x1a, 0x40, 0x05, 0xdf, 0x5b, 0x5b, 0xd3,
	0x37, 0xcc, 0x00, 0x1d, 0x15, 0x61, 0xde, 0x98, 0x50, 0x56, 0xdb, 0x4d, 0xe3, 0xda, 0x9d, 0xe5,
	0xcc, 0x7e, 0xb2, 0x51, 0x9a, 0xc4, 0x10, 0x10, 0xc1, 0x40, 0xfd, 0xc8, 0xc5, 0x24, 0xbf, 0x9d,
	0x7b, 0x5c, 0x40, 0x33, 0x6e, 0x32, 0x88, 0x23, 0xb9, 0x9e, 0xa5, 0xdb, 0x49, 0xd3, 0x7c, 0x4d,
	0xa6, 0x80, 0x8b, 0x16, 0xb4, 0xcd, 0x69, 0xa1, 0x6a, 0x06, 0x37, 0xc3, 0x6f, 0x9e, 0xa2, 0xaa,
	0x0f, 0x21, 0x97, 0xf4, 0x5f, 0x2d, 0x1e, 0xe4, 0xb6, 0xb4, 0x41, 0xe7, 0xb7, 0x1d, 0x64, 0x77,
	0x04, 0x10, 0x05, 0x57, 0xc0, 0x7c, 0xca, 0x46, 0x3d, 0x41, 0x98, 0x1c, 0x82, 0x90, 0xbd, 0x78,
	0x0b, 0xb4, 0x7d, 0x8f, 0xca, 0x13, 0x48, 0xfa, 0xd4, 0xcf, 0x7a, 0x69, 0x7f, 0x3e, 0x9f, 0xd9,
	0x77, 0x2f, 0x21, 0xe9, 0x7e, 0xba, 0x9c, 0xd9, 0x9f, 0xbc, 0x26, 0x1f, 0x4a, 0x6e, 0xb0, 0xa1,
	0x5f, 0xc6, 0x77, 0x27, 0x90, 0x74, 0x7d, 0x13, 0xa3, 0xb7, 0xa6, 0x44, 0x2a, 0x10, 0xfd, 0xb4,
	0x0a, 0x99, 0xf2, 0x88, 0x29, 0x4d, 0xf8, 0x6e, 0xfb, 0xbd, 0xe5, 0xcc, 0x76, 0x36, 0x0a, 0x0c,
	0x94, 0x27, 0x23, 0xaa, 0x20, 0x3d, 0x44, 0x8a, 0x06, 0xee, 0x85, 0x8e, 0xc6, 0x47, 0x59, 0x82,
	0x4b, 0x48, 0x32, 0x83, 0xe3, 0xa0, 0xc6, 0xab, 0x09, 0xca, 0x17, 0x6d, 0x61, 0xa0, 0xfa, 0x37,
	0x5c, 0xc1, 0xf6, 0x85, 0xf3, 0x04, 0xed, 0x87, 0x3c, 0x08, 0x52, 0x7c, 0xb9, 0x64, 0x2c, 0x37,
	0x95, 0xba, 0xbb, 0x26, 0x64, 0x25, 0x9c, 0x2b, 0x1e, 0x04, 0x97, 0x90, 0xe4, 0x9a, 0xd9, 0x0b,
	0xb3, 0xab, 0x79, 0x82, 0x2a, 0x6b, 0xe5, 0x65, 0xbb, 0x88, 0xf7, 0x57, 0x7a, 0x32, 0x1f, 0xa1,
	0x8a, 0x97, 0x41, 0x00, 0xbf, 0x76, 0xa7, 0x61, 0x9c, 0xed, 0xe3, 0xc2, 0xe0, 0x7c, 0x8c, 0x4e,
	0x5e, 0x0a, 0x32, 0xdf, 0xb6, 0x63, 0x54, 0x96, 0x8a, 0xa8, 0x48, 0x6a, 0x94, 0x15, 0x9c, 0xdf,
	0x9c, 0x9f, 0x76, 0x90, 0xf5, 0x2c, 0x1a, 0x4c, 0xa9, 0xfa, 0x2c, 0x56, 0x20, 0x18, 0x09, 0x9e,
	0xd1, 0x11, 0x23, 0x2a, 0x12, 0x70, 0xfb, 0x36, 0xec, 0x11, 0xaa, 0xc8, 0x55, 0xf7, 0x9a, 0xbe,
	0x2a, 0x2e, 0x0c, 0xe6, 0x43, 0xb4, 0x2f, 0xe9, 0xa8, 0x3f, 0x26, 0x72, 0xac, 0xe9, 0xab, 0xe2,
	0x3d, 0x49, 0x47, 0x5f, 0x10, 0x39, 0x76, 0x4e, 0x91, 0xfd, 0x4a, 0x12, 0xf2, 0x2d, 0xfa, 0x75,
	0x07, 0xbd, 0x9d, 0xad, 0xda, 0x57, 0x7a, 0x07, 0x6f, 0xa3, 0x02, 0xbf, 0x45, 0xf7, 0x25, 0x78,
	0x9c, 0xf9, 0x44, 0x24, 0xff, 0x5f, 0x84, 0xe6, 0x3a, 0x47, 0xa1, 0xc3, 0x1a, 0x3a, 0xce, 0xc8,
	0xc1, 0x20, 0xbd, 0x08, 0x36, 0xd4, 0x37, 0x58, 0xd1, 0x56, 0x78, 0xde, 0x34, 0x6d, 0x45, 0xf5,
	0x62, 0x34, 0x79, 0xf5, 0x9f, 0x0d, 0x74, 0x2f, 0x9d, 0xe5, 0x56, 0xa6, 0xf5, 0x01, 0xda, 0x53,
	0x71, 0x3f, 0x75, 0xeb, 0x71, 0x1d, 0x3e, 0x7e, 0x70, 0xe3, 0x0f, 0xb2, 0x17, 0xf7, 0x92, 0x10,
	0x70, 0x59, 0xe9, 0xa7, 0xf3, 0x3e, 0x3a, 0x5c, 0x75, 0x93, 0xeb, 0xb2, 0x9e, 0xfe, 0x64, 0x48,
	0xaa, 0x28, 0x67, 0xba, 0xa1, 0x5d, 0xbc, 0xbe, 0xb7, 0xf1, 0xf5, 0x5f, 0x56, 0xe9, 0x7a, 0x6e,
	0x19, 0x2f, 0xe6, 0x96, 0xf1, 0xe7, 0xdc, 0x32, 0x7e, 0x59, 0x58, 0xa5, 0x17, 0x0b, 0xab, 0xf4,
	0xc7, 0xc2, 0x2a, 0x7d, 0xf7, 0xd1, 0x6b, 0xae, 0xc3, 0xea, 0x43, 0x44, 0xc3, 0x18, 0x94, 0xf5,
	0x87, 0xc4, 0x87, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xae, 0xf1, 0xc9, 0xcb, 0x08, 0x00,
	0x00,
}

func (m *ConfirmOutpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmOutpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmOutpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutPointInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmOutpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmOutpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmOutpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecipientChain) > 0 {
		i -= len(m.RecipientChain)
		copy(dAtA[i:], m.RecipientChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecipientChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipientAddr) > 0 {
		i -= len(m.RecipientAddr)
		copy(dAtA[i:], m.RecipientAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecipientAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositAddr) > 0 {
		i -= len(m.DepositAddr)
		copy(dAtA[i:], m.DepositAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepositAddr)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CreatePendingTransfersTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePendingTransfersTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePendingTransfersTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MasterKeyAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MasterKeyAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePendingTransfersTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePendingTransfersTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePendingTransfersTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VoteConfirmOutpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteConfirmOutpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteConfirmOutpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirmed {
		i--
		if m.Confirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutPoint) > 0 {
		i -= len(m.OutPoint)
		copy(dAtA[i:], m.OutPoint)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutPoint)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.PollKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteConfirmOutpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteConfirmOutpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteConfirmOutpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitExternalSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitExternalSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitExternalSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigHash) > 0 {
		i -= len(m.SigHash)
		copy(dAtA[i:], m.SigHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SigHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitExternalSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitExternalSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitExternalSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateMasterTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMasterTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMasterTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecondaryKeyAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SecondaryKeyAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRescueTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRescueTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRescueTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateRescueTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRescueTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRescueTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateMasterTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMasterTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMasterTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SignTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConfirmOutpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OutPointInfo.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *ConfirmOutpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecipientAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecipientChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *LinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CreatePendingTransfersTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MasterKeyAmount != 0 {
		n += 1 + sovTx(uint64(m.MasterKeyAmount))
	}
	return n
}

func (m *CreatePendingTransfersTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VoteConfirmOutpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.PollKey.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OutPoint)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Confirmed {
		n += 2
	}
	return n
}

func (m *VoteConfirmOutpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SubmitExternalSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SigHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SubmitExternalSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateMasterTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SecondaryKeyAmount != 0 {
		n += 1 + sovTx(uint64(m.SecondaryKeyAmount))
	}
	return n
}

func (m *CreateRescueTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateRescueTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CreateMasterTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SignTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovTx(uint64(m.TxType))
	}
	return n
}

func (m *SignTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != 0 {
		n += 1 + sovTx(uint64(m.Position))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfirmOutpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmOutpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmOutpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPointInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutPointInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmOutpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmOutpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmOutpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientChain = github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePendingTransfersTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePendingTransfersTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePendingTransfersTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterKeyAmount", wireType)
			}
			m.MasterKeyAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterKeyAmount |= github_com_btcsuite_btcutil.Amount(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePendingTransfersTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePendingTransfersTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePendingTransfersTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteConfirmOutpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteConfirmOutpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteConfirmOutpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PollKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirmed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteConfirmOutpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteConfirmOutpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteConfirmOutpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitExternalSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitExternalSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitExternalSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigHash = append(m.SigHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SigHash == nil {
				m.SigHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitExternalSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitExternalSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitExternalSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMasterTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMasterTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMasterTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryKeyAmount", wireType)
			}
			m.SecondaryKeyAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondaryKeyAmount |= github_com_btcsuite_btcutil.Amount(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRescueTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRescueTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRescueTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRescueTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRescueTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRescueTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMasterTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMasterTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMasterTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= TxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
