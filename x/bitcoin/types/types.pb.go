// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/bitcoin/v1beta1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/axelarnetwork/axelar-core/x/tss/exported"
	github_com_axelarnetwork_axelar_core_x_tss_exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	github_com_btcsuite_btcutil "github.com/btcsuite/btcutil"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxStatus int32

const (
	TxStatusUnspecified TxStatus = 0
	Created             TxStatus = 1
	Signing             TxStatus = 2
	Aborted             TxStatus = 3
	Signed              TxStatus = 4
)

var TxStatus_name = map[int32]string{
	0: "TX_STATUS_UNSPECIFIED",
	1: "TX_STATUS_CREATED",
	2: "TX_STATUS_SIGNING",
	3: "TX_STATUS_ABORTED",
	4: "TX_STATUS_SIGNED",
}

var TxStatus_value = map[string]int32{
	"TX_STATUS_UNSPECIFIED": 0,
	"TX_STATUS_CREATED":     1,
	"TX_STATUS_SIGNING":     2,
	"TX_STATUS_ABORTED":     3,
	"TX_STATUS_SIGNED":      4,
}

func (x TxStatus) String() string {
	return proto.EnumName(TxStatus_name, int32(x))
}

func (TxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{0}
}

type TxType int32

const (
	TxTypeUnspecified      TxType = 0
	MasterConsolidation    TxType = 1
	SecondaryConsolidation TxType = 2
	Rescue                 TxType = 3
)

var TxType_name = map[int32]string{
	0: "TX_TYPE_UNSPECIFIED",
	1: "TX_TYPE_MASTER_CONSOLIDATION",
	2: "TX_TYPE_SECONDARY_CONSOLIDATION",
	3: "TX_TYPE_RESCUE",
}

var TxType_value = map[string]int32{
	"TX_TYPE_UNSPECIFIED":             0,
	"TX_TYPE_MASTER_CONSOLIDATION":    1,
	"TX_TYPE_SECONDARY_CONSOLIDATION": 2,
	"TX_TYPE_RESCUE":                  3,
}

func (x TxType) String() string {
	return proto.EnumName(TxType_name, int32(x))
}

func (TxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{1}
}

type OutPointState int32

const (
	OutPointState_None      OutPointState = 0
	OutPointState_Pending   OutPointState = 1
	OutPointState_Confirmed OutPointState = 2
	OutPointState_Spent     OutPointState = 3
)

var OutPointState_name = map[int32]string{
	0: "OUT_POINT_STATE_UNSPECIFIED",
	1: "OUT_POINT_STATE_PENDING",
	2: "OUT_POINT_STATE_CONFIRMED",
	3: "OUT_POINT_STATE_SPENT",
}

var OutPointState_value = map[string]int32{
	"OUT_POINT_STATE_UNSPECIFIED": 0,
	"OUT_POINT_STATE_PENDING":     1,
	"OUT_POINT_STATE_CONFIRMED":   2,
	"OUT_POINT_STATE_SPENT":       3,
}

func (x OutPointState) String() string {
	return proto.EnumName(OutPointState_name, int32(x))
}

func (OutPointState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{2}
}

type AddressRole int32

const (
	None          AddressRole = 0
	Deposit       AddressRole = 1
	Consolidation AddressRole = 2
)

var AddressRole_name = map[int32]string{
	0: "ADDRESS_ROLE_UNSPECIFIED",
	1: "ADDRESS_ROLE_DEPOSIT",
	2: "ADDRESS_ROLE_CONSOLIDATION",
}

var AddressRole_value = map[string]int32{
	"ADDRESS_ROLE_UNSPECIFIED":   0,
	"ADDRESS_ROLE_DEPOSIT":       1,
	"ADDRESS_ROLE_CONSOLIDATION": 2,
}

func (x AddressRole) String() string {
	return proto.EnumName(AddressRole_name, int32(x))
}

func (AddressRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{3}
}

type UnsignedTx struct {
	Type                   TxType                                                    `protobuf:"varint,1,opt,name=type,proto3,enum=axelar.bitcoin.v1beta1.TxType" json:"type,omitempty"`
	Tx                     []byte                                                    `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Info                   UnsignedTx_Info                                           `protobuf:"bytes,3,opt,name=info,proto3" json:"info"`
	Status                 TxStatus                                                  `protobuf:"varint,4,opt,name=status,proto3,enum=axelar.bitcoin.v1beta1.TxStatus" json:"status,omitempty"`
	ConfirmationRequired   bool                                                      `protobuf:"varint,5,opt,name=confirmation_required,json=confirmationRequired,proto3" json:"confirmation_required,omitempty"`
	AnyoneCanSpendVout     uint32                                                    `protobuf:"varint,6,opt,name=anyone_can_spend_vout,json=anyoneCanSpendVout,proto3" json:"anyone_can_spend_vout,omitempty"`
	PrevAbortedKeyId       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,7,opt,name=prev_aborted_key_id,json=prevAbortedKeyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"prev_aborted_key_id,omitempty"`
	InternalTransferAmount github_com_btcsuite_btcutil.Amount                        `protobuf:"varint,8,opt,name=internal_transfer_amount,json=internalTransferAmount,proto3,casttype=github.com/btcsuite/btcutil.Amount" json:"internal_transfer_amount,omitempty"`
}

func (m *UnsignedTx) Reset()         { *m = UnsignedTx{} }
func (m *UnsignedTx) String() string { return proto.CompactTextString(m) }
func (*UnsignedTx) ProtoMessage()    {}
func (*UnsignedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{0}
}
func (m *UnsignedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedTx.Merge(m, src)
}
func (m *UnsignedTx) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedTx.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedTx proto.InternalMessageInfo

type UnsignedTx_Info struct {
	RotateKey  bool                        `protobuf:"varint,1,opt,name=rotate_key,json=rotateKey,proto3" json:"rotate_key,omitempty"`
	InputInfos []UnsignedTx_Info_InputInfo `protobuf:"bytes,2,rep,name=input_infos,json=inputInfos,proto3" json:"input_infos"`
}

func (m *UnsignedTx_Info) Reset()         { *m = UnsignedTx_Info{} }
func (m *UnsignedTx_Info) String() string { return proto.CompactTextString(m) }
func (*UnsignedTx_Info) ProtoMessage()    {}
func (*UnsignedTx_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{0, 0}
}
func (m *UnsignedTx_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedTx_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedTx_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedTx_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedTx_Info.Merge(m, src)
}
func (m *UnsignedTx_Info) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedTx_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedTx_Info.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedTx_Info proto.InternalMessageInfo

type UnsignedTx_Info_InputInfo struct {
	SigRequirements []UnsignedTx_Info_InputInfo_SigRequirement `protobuf:"bytes,1,rep,name=sig_requirements,json=sigRequirements,proto3" json:"sig_requirements"`
}

func (m *UnsignedTx_Info_InputInfo) Reset()         { *m = UnsignedTx_Info_InputInfo{} }
func (m *UnsignedTx_Info_InputInfo) String() string { return proto.CompactTextString(m) }
func (*UnsignedTx_Info_InputInfo) ProtoMessage()    {}
func (*UnsignedTx_Info_InputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{0, 0, 0}
}
func (m *UnsignedTx_Info_InputInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedTx_Info_InputInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedTx_Info_InputInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedTx_Info_InputInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedTx_Info_InputInfo.Merge(m, src)
}
func (m *UnsignedTx_Info_InputInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedTx_Info_InputInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedTx_Info_InputInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedTx_Info_InputInfo proto.InternalMessageInfo

type UnsignedTx_Info_InputInfo_SigRequirement struct {
	KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_id,omitempty"`
	SigHash []byte                                                    `protobuf:"bytes,2,opt,name=sig_hash,json=sigHash,proto3" json:"sig_hash,omitempty"`
}

func (m *UnsignedTx_Info_InputInfo_SigRequirement) Reset() {
	*m = UnsignedTx_Info_InputInfo_SigRequirement{}
}
func (m *UnsignedTx_Info_InputInfo_SigRequirement) String() string { return proto.CompactTextString(m) }
func (*UnsignedTx_Info_InputInfo_SigRequirement) ProtoMessage()    {}
func (*UnsignedTx_Info_InputInfo_SigRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{0, 0, 0, 0}
}
func (m *UnsignedTx_Info_InputInfo_SigRequirement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedTx_Info_InputInfo_SigRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedTx_Info_InputInfo_SigRequirement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedTx_Info_InputInfo_SigRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedTx_Info_InputInfo_SigRequirement.Merge(m, src)
}
func (m *UnsignedTx_Info_InputInfo_SigRequirement) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedTx_Info_InputInfo_SigRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedTx_Info_InputInfo_SigRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedTx_Info_InputInfo_SigRequirement proto.InternalMessageInfo

type SignedTx struct {
	Type                 TxType `protobuf:"varint,1,opt,name=type,proto3,enum=axelar.bitcoin.v1beta1.TxType" json:"type,omitempty"`
	Tx                   []byte `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	PrevSignedTxHash     []byte `protobuf:"bytes,3,opt,name=prev_signed_tx_hash,json=prevSignedTxHash,proto3" json:"prev_signed_tx_hash,omitempty"`
	ConfirmationRequired bool   `protobuf:"varint,4,opt,name=confirmation_required,json=confirmationRequired,proto3" json:"confirmation_required,omitempty"`
	AnyoneCanSpendVout   uint32 `protobuf:"varint,5,opt,name=anyone_can_spend_vout,json=anyoneCanSpendVout,proto3" json:"anyone_can_spend_vout,omitempty"`
}

func (m *SignedTx) Reset()         { *m = SignedTx{} }
func (m *SignedTx) String() string { return proto.CompactTextString(m) }
func (*SignedTx) ProtoMessage()    {}
func (*SignedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{1}
}
func (m *SignedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTx.Merge(m, src)
}
func (m *SignedTx) XXX_Size() int {
	return m.Size()
}
func (m *SignedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTx.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTx proto.InternalMessageInfo

// OutPointInfo describes all the necessary information to confirm the outPoint
// of a transaction
type OutPointInfo struct {
	OutPoint string                             `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	Amount   github_com_btcsuite_btcutil.Amount `protobuf:"varint,2,opt,name=amount,proto3,casttype=github.com/btcsuite/btcutil.Amount" json:"amount,omitempty"`
	Address  string                             `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *OutPointInfo) Reset()      { *m = OutPointInfo{} }
func (*OutPointInfo) ProtoMessage() {}
func (*OutPointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{2}
}
func (m *OutPointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutPointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutPointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutPointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutPointInfo.Merge(m, src)
}
func (m *OutPointInfo) XXX_Size() int {
	return m.Size()
}
func (m *OutPointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OutPointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OutPointInfo proto.InternalMessageInfo

// AddressInfo is a wrapper containing the Bitcoin P2WSH address, it's
// corresponding script and the underlying key
type AddressInfo struct {
	Address           string                                                    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Role              AddressRole                                               `protobuf:"varint,2,opt,name=role,proto3,enum=axelar.bitcoin.v1beta1.AddressRole" json:"role,omitempty"`
	RedeemScript      []byte                                                    `protobuf:"bytes,3,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	KeyID             github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,4,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_id,omitempty"`
	MaxSigCount       uint32                                                    `protobuf:"varint,5,opt,name=max_sig_count,json=maxSigCount,proto3" json:"max_sig_count,omitempty"`
	SpendingCondition *AddressInfo_SpendingCondition                            `protobuf:"bytes,6,opt,name=spending_condition,json=spendingCondition,proto3" json:"spending_condition,omitempty"`
}

func (m *AddressInfo) Reset()         { *m = AddressInfo{} }
func (m *AddressInfo) String() string { return proto.CompactTextString(m) }
func (*AddressInfo) ProtoMessage()    {}
func (*AddressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{3}
}
func (m *AddressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressInfo.Merge(m, src)
}
func (m *AddressInfo) XXX_Size() int {
	return m.Size()
}
func (m *AddressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AddressInfo proto.InternalMessageInfo

type AddressInfo_SpendingCondition struct {
	// internal_key_ids lists the internal key IDs that one of which has to sign
	// regardless of locktime
	InternalKeyIds []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,1,rep,name=internal_key_ids,json=internalKeyIds,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"internal_key_ids,omitempty"`
	// external_key_ids lists the external key IDs that
	// external_multisig_threshold of which have to sign to spend before
	// locktime if set
	ExternalKeyIds            []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,2,rep,name=external_key_ids,json=externalKeyIds,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"external_key_ids,omitempty"`
	ExternalMultisigThreshold int64                                                       `protobuf:"varint,3,opt,name=external_multisig_threshold,json=externalMultisigThreshold,proto3" json:"external_multisig_threshold,omitempty"`
	LockTime                  *time.Time                                                  `protobuf:"bytes,4,opt,name=lock_time,json=lockTime,proto3,stdtime" json:"lock_time,omitempty"`
}

func (m *AddressInfo_SpendingCondition) Reset()         { *m = AddressInfo_SpendingCondition{} }
func (m *AddressInfo_SpendingCondition) String() string { return proto.CompactTextString(m) }
func (*AddressInfo_SpendingCondition) ProtoMessage()    {}
func (*AddressInfo_SpendingCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{3, 0}
}
func (m *AddressInfo_SpendingCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressInfo_SpendingCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressInfo_SpendingCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressInfo_SpendingCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressInfo_SpendingCondition.Merge(m, src)
}
func (m *AddressInfo_SpendingCondition) XXX_Size() int {
	return m.Size()
}
func (m *AddressInfo_SpendingCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressInfo_SpendingCondition.DiscardUnknown(m)
}

var xxx_messageInfo_AddressInfo_SpendingCondition proto.InternalMessageInfo

type Network struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Network) Reset()         { *m = Network{} }
func (m *Network) String() string { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()    {}
func (*Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_a397eec6ab818c62, []int{4}
}
func (m *Network) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Network.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Network.Merge(m, src)
}
func (m *Network) XXX_Size() int {
	return m.Size()
}
func (m *Network) XXX_DiscardUnknown() {
	xxx_messageInfo_Network.DiscardUnknown(m)
}

var xxx_messageInfo_Network proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("axelar.bitcoin.v1beta1.TxStatus", TxStatus_name, TxStatus_value)
	proto.RegisterEnum("axelar.bitcoin.v1beta1.TxType", TxType_name, TxType_value)
	proto.RegisterEnum("axelar.bitcoin.v1beta1.OutPointState", OutPointState_name, OutPointState_value)
	proto.RegisterEnum("axelar.bitcoin.v1beta1.AddressRole", AddressRole_name, AddressRole_value)
	proto.RegisterType((*UnsignedTx)(nil), "axelar.bitcoin.v1beta1.UnsignedTx")
	proto.RegisterType((*UnsignedTx_Info)(nil), "axelar.bitcoin.v1beta1.UnsignedTx.Info")
	proto.RegisterType((*UnsignedTx_Info_InputInfo)(nil), "axelar.bitcoin.v1beta1.UnsignedTx.Info.InputInfo")
	proto.RegisterType((*UnsignedTx_Info_InputInfo_SigRequirement)(nil), "axelar.bitcoin.v1beta1.UnsignedTx.Info.InputInfo.SigRequirement")
	proto.RegisterType((*SignedTx)(nil), "axelar.bitcoin.v1beta1.SignedTx")
	proto.RegisterType((*OutPointInfo)(nil), "axelar.bitcoin.v1beta1.OutPointInfo")
	proto.RegisterType((*AddressInfo)(nil), "axelar.bitcoin.v1beta1.AddressInfo")
	proto.RegisterType((*AddressInfo_SpendingCondition)(nil), "axelar.bitcoin.v1beta1.AddressInfo.SpendingCondition")
	proto.RegisterType((*Network)(nil), "axelar.bitcoin.v1beta1.Network")
}

func init() {
	proto.RegisterFile("axelar/bitcoin/v1beta1/types.proto", fileDescriptor_a397eec6ab818c62)
}

var fileDescriptor_a397eec6ab818c62 = []byte{
	// 1375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x1b, 0xf7, 0xda, 0x4e, 0x62, 0x8f, 0x9b, 0xbc, 0xce, 0xb4, 0x69, 0xdd, 0xed, 0x5b, 0x7b, 0xe5,
	0xbe, 0x6f, 0x6b, 0x2a, 0xba, 0x56, 0x5c, 0x10, 0x14, 0xa9, 0x05, 0xc7, 0xde, 0x16, 0xab, 0x8d,
	0x6d, 0xed, 0x6e, 0x50, 0x8b, 0x84, 0x96, 0x8d, 0x3d, 0x71, 0x46, 0xb1, 0x77, 0xdc, 0x9d, 0xd9,
	0xe2, 0x7c, 0x03, 0xe4, 0x0a, 0xa9, 0x17, 0x24, 0x38, 0x58, 0x42, 0x82, 0x03, 0x9f, 0x83, 0x53,
	0x8f, 0xbd, 0x80, 0x38, 0x05, 0x48, 0xe1, 0x4b, 0xf4, 0x84, 0x66, 0x66, 0x37, 0x89, 0x4d, 0x23,
	0x5a, 0x5a, 0x6e, 0x3b, 0xcf, 0xfc, 0x9e, 0xbf, 0xbf, 0xe7, 0x79, 0x66, 0x41, 0xd1, 0x1d, 0xa1,
	0xbe, 0xeb, 0x97, 0x37, 0x31, 0xeb, 0x10, 0xec, 0x95, 0x1f, 0xac, 0x6e, 0x22, 0xe6, 0xae, 0x96,
	0xd9, 0xee, 0x10, 0x51, 0x7d, 0xe8, 0x13, 0x46, 0xe0, 0x69, 0x89, 0xd1, 0x43, 0x8c, 0x1e, 0x62,
	0xd4, 0x53, 0x3d, 0xd2, 0x23, 0x02, 0x52, 0xe6, 0x5f, 0x12, 0xad, 0x5e, 0x0a, 0x2d, 0x32, 0x4a,
	0xcb, 0x68, 0x34, 0x24, 0x3e, 0x43, 0xdd, 0xe7, 0x99, 0x55, 0x0b, 0x3d, 0x42, 0x7a, 0x7d, 0x54,
	0x16, 0xa7, 0xcd, 0x60, 0xab, 0xcc, 0xf0, 0x00, 0x51, 0xe6, 0x0e, 0x86, 0x12, 0x50, 0xfc, 0x72,
	0x01, 0x80, 0x0d, 0x8f, 0xe2, 0x9e, 0x87, 0xba, 0xf6, 0x08, 0x56, 0x40, 0x92, 0xab, 0xe7, 0x14,
	0x4d, 0x29, 0x2d, 0x55, 0xf2, 0xfa, 0xf3, 0xa3, 0xd2, 0xed, 0x91, 0xbd, 0x3b, 0x44, 0xa6, 0xc0,
	0xc2, 0x25, 0x10, 0x67, 0xa3, 0x5c, 0x5c, 0x53, 0x4a, 0x27, 0xcc, 0x38, 0x1b, 0xc1, 0x2a, 0x48,
	0x62, 0x6f, 0x8b, 0xe4, 0x12, 0x9a, 0x52, 0xca, 0x54, 0x2e, 0x1d, 0x67, 0xe3, 0xd0, 0xab, 0xde,
	0xf0, 0xb6, 0xc8, 0x5a, 0xf2, 0xf1, 0x5e, 0x21, 0x66, 0x0a, 0x55, 0xf8, 0x2e, 0x98, 0xa7, 0xcc,
	0x65, 0x01, 0xcd, 0x25, 0x45, 0x20, 0xda, 0xf1, 0x81, 0x58, 0x02, 0x67, 0x86, 0x78, 0x78, 0x15,
	0xac, 0x74, 0x88, 0xb7, 0x85, 0xfd, 0x81, 0xcb, 0x30, 0xf1, 0x1c, 0x1f, 0xdd, 0x0f, 0xb0, 0x8f,
	0xba, 0xb9, 0x39, 0x4d, 0x29, 0xa5, 0xcc, 0x53, 0x47, 0x2f, 0xcd, 0xf0, 0x0e, 0xae, 0x82, 0x15,
	0xd7, 0xdb, 0x25, 0x1e, 0x72, 0x3a, 0xae, 0xe7, 0xd0, 0x21, 0xf2, 0xba, 0xce, 0x03, 0x12, 0xb0,
	0xdc, 0xbc, 0xa6, 0x94, 0x16, 0x4d, 0x28, 0x2f, 0x6b, 0xae, 0x67, 0xf1, 0xab, 0x8f, 0x48, 0xc0,
	0x60, 0x1f, 0x9c, 0x1c, 0xfa, 0xe8, 0x81, 0xe3, 0x6e, 0x8a, 0xe2, 0x3b, 0x3b, 0x68, 0xd7, 0xc1,
	0xdd, 0xdc, 0x82, 0xa6, 0x94, 0xd2, 0x6b, 0xd7, 0x9f, 0xed, 0x15, 0xae, 0xf5, 0x30, 0xdb, 0x0e,
	0x36, 0xf5, 0x0e, 0x19, 0x94, 0x65, 0xf0, 0x1e, 0x62, 0x9f, 0x11, 0x7f, 0x27, 0x3c, 0x5d, 0xe9,
	0x10, 0x1f, 0x95, 0x47, 0x53, 0x14, 0xea, 0xb7, 0xd1, 0x6e, 0xa3, 0x6e, 0x66, 0xb9, 0xe5, 0xaa,
	0x34, 0xcc, 0x25, 0x5d, 0xf8, 0x29, 0xc8, 0x61, 0x8f, 0x21, 0xdf, 0x73, 0xfb, 0x0e, 0xf3, 0x5d,
	0x8f, 0x6e, 0x21, 0xdf, 0x71, 0x07, 0x24, 0xf0, 0x58, 0x2e, 0xa5, 0x29, 0xa5, 0xc4, 0xda, 0xc5,
	0x67, 0x7b, 0x85, 0xe2, 0x11, 0x97, 0x9b, 0xac, 0x43, 0x03, 0xcc, 0x10, 0xff, 0x08, 0x18, 0xee,
	0xeb, 0x55, 0x81, 0x36, 0x4f, 0x47, 0x76, 0xec, 0xd0, 0x8c, 0x94, 0xab, 0x5f, 0x24, 0x40, 0x92,
	0xd3, 0x00, 0xcf, 0x03, 0xe0, 0x13, 0xe6, 0x32, 0xc4, 0x53, 0x12, 0x7d, 0x90, 0x32, 0xd3, 0x52,
	0x72, 0x1b, 0xed, 0xc2, 0xbb, 0x20, 0x83, 0xbd, 0x61, 0xc0, 0x1c, 0xce, 0x13, 0xcd, 0xc5, 0xb5,
	0x44, 0x29, 0x53, 0x59, 0x7d, 0x41, 0x8e, 0xf5, 0x06, 0x57, 0x3d, 0xc2, 0x36, 0xc0, 0x91, 0x80,
	0xaa, 0x0f, 0xe3, 0x20, 0x7d, 0x70, 0x0f, 0xef, 0x83, 0x2c, 0xc5, 0xbd, 0x88, 0xbe, 0x01, 0xf2,
	0x18, 0xcd, 0x29, 0xc2, 0xd9, 0x07, 0x2f, 0xed, 0x4c, 0xb7, 0x70, 0xcf, 0x3c, 0x34, 0x14, 0xfa,
	0xfe, 0x0f, 0x9d, 0x92, 0x52, 0x75, 0xac, 0x80, 0xa5, 0x69, 0x24, 0xfc, 0x04, 0xcc, 0x87, 0xc4,
	0x2a, 0x82, 0xd8, 0x9b, 0xfb, 0x7b, 0x85, 0x39, 0x41, 0xd2, 0xab, 0x31, 0x3c, 0xb7, 0x23, 0x68,
	0x3d, 0x0b, 0x52, 0x3c, 0xc9, 0x6d, 0x97, 0x6e, 0x87, 0xf3, 0xb3, 0x40, 0x71, 0xef, 0x43, 0x97,
	0x6e, 0x17, 0xff, 0x50, 0x40, 0xca, 0x7a, 0x9d, 0x53, 0x79, 0x25, 0x6c, 0x58, 0x59, 0x23, 0x87,
	0x8d, 0xa4, 0xdb, 0x84, 0x00, 0x88, 0x8e, 0x8b, 0xdc, 0x71, 0xff, 0xc7, 0xcf, 0x51, 0xf2, 0x9f,
	0xcc, 0xd1, 0xdc, 0x71, 0x73, 0x54, 0x7c, 0xa8, 0x80, 0x13, 0xad, 0x80, 0xb5, 0x09, 0xf6, 0x24,
	0xf1, 0xe7, 0x40, 0x9a, 0x04, 0xcc, 0x19, 0x72, 0x81, 0xac, 0xba, 0x99, 0x22, 0x21, 0x00, 0xde,
	0x00, 0xf3, 0x61, 0xd7, 0xc7, 0x5f, 0xaa, 0xeb, 0x43, 0x2d, 0x98, 0x03, 0x0b, 0x6e, 0xb7, 0xeb,
	0x23, 0x4a, 0x45, 0xe2, 0x69, 0x33, 0x3a, 0xbe, 0x97, 0xfc, 0xea, 0x9b, 0x42, 0xac, 0xf8, 0xe3,
	0x1c, 0xc8, 0x54, 0xa5, 0x44, 0x04, 0x73, 0x04, 0xaf, 0x4c, 0xe1, 0xe1, 0x3b, 0x20, 0xe9, 0x93,
	0x3e, 0x12, 0x71, 0x2c, 0x55, 0x2e, 0x1c, 0x47, 0x49, 0x68, 0xcc, 0x24, 0x7d, 0x64, 0x0a, 0x05,
	0x78, 0x01, 0x2c, 0xfa, 0xa8, 0x8b, 0xd0, 0xc0, 0xa1, 0x1d, 0x1f, 0x0f, 0x59, 0xc8, 0xc0, 0x09,
	0x29, 0xb4, 0x84, 0xec, 0x48, 0xdf, 0x25, 0xff, 0x8d, 0xbe, 0x2b, 0x82, 0xc5, 0x81, 0x3b, 0xe2,
	0xad, 0xe0, 0x74, 0x44, 0x35, 0x25, 0x3f, 0x99, 0x81, 0x3b, 0xb2, 0x70, 0xaf, 0x26, 0x4a, 0xd5,
	0x05, 0x50, 0x10, 0x88, 0x3d, 0x0e, 0xf2, 0xba, 0x98, 0x33, 0x2d, 0x16, 0x62, 0xa6, 0xf2, 0xf6,
	0xdf, 0xa4, 0x2b, 0x87, 0x2e, 0xd4, 0xae, 0x45, 0xca, 0xe6, 0x32, 0x9d, 0x15, 0xa9, 0xbf, 0xc7,
	0xc1, 0xf2, 0x5f, 0x80, 0xb0, 0x07, 0xb2, 0x07, 0xeb, 0x4e, 0xd6, 0x41, 0x0e, 0xff, 0x2b, 0x6f,
	0xd6, 0xa5, 0xc8, 0xac, 0x58, 0xab, 0x94, 0x3b, 0x42, 0xa3, 0x19, 0x47, 0xf1, 0xd7, 0xe2, 0x28,
	0x32, 0x1b, 0x3a, 0xba, 0x01, 0xce, 0x1d, 0x38, 0x1a, 0x04, 0x7d, 0x86, 0x79, 0xed, 0xd9, 0xb6,
	0x8f, 0xe8, 0x36, 0xe9, 0x77, 0x45, 0x0f, 0x24, 0xcc, 0xb3, 0x11, 0x64, 0x3d, 0x44, 0xd8, 0x11,
	0x00, 0x5e, 0x07, 0xe9, 0x3e, 0xe9, 0xec, 0x38, 0xfc, 0xf9, 0x16, 0x3d, 0x91, 0xa9, 0xa8, 0xba,
	0x7c, 0xdb, 0xf5, 0xe8, 0x6d, 0xd7, 0xed, 0xe8, 0x6d, 0x5f, 0x4b, 0x3e, 0xfa, 0xa5, 0xa0, 0x98,
	0x29, 0xae, 0xc2, 0x85, 0xc5, 0xf3, 0x60, 0xa1, 0x29, 0x43, 0x87, 0x10, 0x24, 0x3d, 0x77, 0x80,
	0xc2, 0x7e, 0x16, 0xdf, 0x97, 0x7f, 0x52, 0x40, 0x2a, 0x7a, 0x49, 0x61, 0x05, 0xac, 0xd8, 0x77,
	0x1d, 0xcb, 0xae, 0xda, 0x1b, 0x96, 0xb3, 0xd1, 0xb4, 0xda, 0x46, 0xad, 0x71, 0xb3, 0x61, 0xd4,
	0xb3, 0x31, 0xf5, 0xcc, 0x78, 0xa2, 0x9d, 0x8c, 0x80, 0x1b, 0x1e, 0x1d, 0xa2, 0x0e, 0xde, 0xc2,
	0x88, 0x37, 0xd4, 0xf2, 0xa1, 0x4e, 0xcd, 0x34, 0xaa, 0xb6, 0x51, 0xcf, 0x2a, 0x6a, 0x66, 0x3c,
	0xd1, 0x16, 0x6a, 0x3e, 0x72, 0xd9, 0x2c, 0xc6, 0x6a, 0xdc, 0x6a, 0x36, 0x9a, 0xb7, 0xb2, 0x71,
	0x89, 0xe1, 0xab, 0x07, 0x7b, 0xbd, 0x69, 0x4c, 0x75, 0xad, 0x65, 0x72, 0x3b, 0x09, 0x89, 0x09,
	0x1f, 0x44, 0xa8, 0x81, 0xec, 0xb4, 0x1d, 0xa3, 0x9e, 0x4d, 0xaa, 0x60, 0x3c, 0xd1, 0xe6, 0xe5,
	0x06, 0x53, 0x53, 0x9f, 0x7f, 0x9b, 0x8f, 0x7d, 0xff, 0x5d, 0x5e, 0xb9, 0xbc, 0xa7, 0x80, 0x79,
	0xb9, 0x15, 0xa1, 0x0e, 0x4e, 0xda, 0x77, 0x1d, 0xfb, 0x5e, 0xdb, 0x98, 0x49, 0x6a, 0x65, 0x3c,
	0xd1, 0x96, 0x25, 0xe8, 0x68, 0x4a, 0xd7, 0xc0, 0x7f, 0x23, 0xfc, 0x7a, 0xd5, 0xb2, 0x0d, 0xd3,
	0xa9, 0xb5, 0x9a, 0x56, 0xeb, 0x4e, 0xa3, 0x5e, 0xb5, 0x1b, 0xad, 0x66, 0x56, 0x91, 0xd5, 0x58,
	0x77, 0x29, 0x43, 0x7e, 0x8d, 0x78, 0x94, 0xf4, 0x71, 0x57, 0xac, 0x43, 0xf8, 0x3e, 0x28, 0x44,
	0xaa, 0x96, 0x51, 0x6b, 0x35, 0xeb, 0x55, 0xf3, 0xde, 0x8c, 0x76, 0x5c, 0x55, 0xc7, 0x13, 0xed,
	0xb4, 0x85, 0xf8, 0x68, 0xb9, 0xfe, 0xee, 0xb4, 0x81, 0x3c, 0x58, 0x8a, 0x0c, 0x98, 0x86, 0x55,
	0xdb, 0x30, 0xb2, 0x09, 0x99, 0xa0, 0x89, 0x68, 0x27, 0x40, 0x47, 0x12, 0xfc, 0x41, 0x01, 0x8b,
	0xd1, 0xfa, 0xe4, 0xb4, 0x20, 0xf8, 0x06, 0x38, 0xd7, 0xda, 0xb0, 0x9d, 0x76, 0xab, 0xd1, 0xb4,
	0x45, 0x95, 0x66, 0xf3, 0x4d, 0x8d, 0x27, 0x5a, 0xb2, 0x49, 0x3c, 0x04, 0x4b, 0xe0, 0xcc, 0x2c,
	0xb4, 0x6d, 0x34, 0xeb, 0x9c, 0x97, 0x90, 0xbb, 0xb6, 0x9c, 0x4c, 0xf8, 0x26, 0x38, 0x3b, 0x8b,
	0xac, 0xb5, 0x9a, 0x37, 0x1b, 0xe6, 0xba, 0x51, 0xcf, 0xc6, 0xd5, 0xc5, 0xf1, 0x44, 0x4b, 0xd7,
	0xe4, 0x8b, 0x80, 0xba, 0xf0, 0x7f, 0x60, 0x65, 0x16, 0x6d, 0xb5, 0x8d, 0xa6, 0x9d, 0x4d, 0xa8,
	0xe9, 0xf1, 0x44, 0x9b, 0xe3, 0x03, 0xcf, 0x44, 0x12, 0x8a, 0x48, 0xe2, 0x6b, 0xe5, 0x60, 0xeb,
	0xf2, 0x45, 0x09, 0x2f, 0x82, 0x5c, 0xb5, 0x5e, 0x37, 0x0d, 0xcb, 0x72, 0xcc, 0xd6, 0x9d, 0xe3,
	0xe3, 0xff, 0x3f, 0x38, 0x35, 0x85, 0xab, 0x1b, 0xed, 0x96, 0xd5, 0xb0, 0xa3, 0xe0, 0xeb, 0x68,
	0x48, 0x28, 0x66, 0x70, 0x15, 0xa8, 0x53, 0xb0, 0x59, 0x26, 0x96, 0xc7, 0x13, 0x6d, 0x71, 0x8a,
	0x80, 0xc3, 0x02, 0xaf, 0x99, 0x8f, 0x7f, 0xcb, 0xc7, 0x1e, 0xef, 0xe7, 0x95, 0x27, 0xfb, 0x79,
	0xe5, 0xd7, 0xfd, 0xbc, 0xf2, 0xe8, 0x69, 0x3e, 0xf6, 0xe4, 0x69, 0x3e, 0xf6, 0xf3, 0xd3, 0x7c,
	0xec, 0xe3, 0xb7, 0x5e, 0x70, 0x43, 0x44, 0x7f, 0xfe, 0xe2, 0xd7, 0x7c, 0x73, 0x5e, 0x4c, 0xec,
	0xd5, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xb1, 0x27, 0x03, 0x18, 0x0c, 0x00, 0x00,
}

func (m *UnsignedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InternalTransferAmount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InternalTransferAmount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PrevAbortedKeyId) > 0 {
		i -= len(m.PrevAbortedKeyId)
		copy(dAtA[i:], m.PrevAbortedKeyId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrevAbortedKeyId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AnyoneCanSpendVout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyoneCanSpendVout))
		i--
		dAtA[i] = 0x30
	}
	if m.ConfirmationRequired {
		i--
		if m.ConfirmationRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsignedTx_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedTx_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedTx_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InputInfos) > 0 {
		for iNdEx := len(m.InputInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RotateKey {
		i--
		if m.RotateKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsignedTx_Info_InputInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedTx_Info_InputInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedTx_Info_InputInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigRequirements) > 0 {
		for iNdEx := len(m.SigRequirements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SigRequirements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnsignedTx_Info_InputInfo_SigRequirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedTx_Info_InputInfo_SigRequirement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedTx_Info_InputInfo_SigRequirement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigHash) > 0 {
		i -= len(m.SigHash)
		copy(dAtA[i:], m.SigHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SigHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnyoneCanSpendVout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AnyoneCanSpendVout))
		i--
		dAtA[i] = 0x28
	}
	if m.ConfirmationRequired {
		i--
		if m.ConfirmationRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PrevSignedTxHash) > 0 {
		i -= len(m.PrevSignedTxHash)
		copy(dAtA[i:], m.PrevSignedTxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrevSignedTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutPointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutPointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutPointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OutPoint) > 0 {
		i -= len(m.OutPoint)
		copy(dAtA[i:], m.OutPoint)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutPoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpendingCondition != nil {
		{
			size, err := m.SpendingCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MaxSigCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxSigCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RedeemScript) > 0 {
		i -= len(m.RedeemScript)
		copy(dAtA[i:], m.RedeemScript)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RedeemScript)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Role != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressInfo_SpendingCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressInfo_SpendingCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressInfo_SpendingCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LockTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTypes(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x22
	}
	if m.ExternalMultisigThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExternalMultisigThreshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ExternalKeyIds) > 0 {
		for iNdEx := len(m.ExternalKeyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalKeyIds[iNdEx])
			copy(dAtA[i:], m.ExternalKeyIds[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExternalKeyIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InternalKeyIds) > 0 {
		for iNdEx := len(m.InternalKeyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InternalKeyIds[iNdEx])
			copy(dAtA[i:], m.InternalKeyIds[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.InternalKeyIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UnsignedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Info.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.ConfirmationRequired {
		n += 2
	}
	if m.AnyoneCanSpendVout != 0 {
		n += 1 + sovTypes(uint64(m.AnyoneCanSpendVout))
	}
	l = len(m.PrevAbortedKeyId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InternalTransferAmount != 0 {
		n += 1 + sovTypes(uint64(m.InternalTransferAmount))
	}
	return n
}

func (m *UnsignedTx_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RotateKey {
		n += 2
	}
	if len(m.InputInfos) > 0 {
		for _, e := range m.InputInfos {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *UnsignedTx_Info_InputInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SigRequirements) > 0 {
		for _, e := range m.SigRequirements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *UnsignedTx_Info_InputInfo_SigRequirement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SigHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SignedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PrevSignedTxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConfirmationRequired {
		n += 2
	}
	if m.AnyoneCanSpendVout != 0 {
		n += 1 + sovTypes(uint64(m.AnyoneCanSpendVout))
	}
	return n
}

func (m *OutPointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutPoint)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTypes(uint64(m.Amount))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AddressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovTypes(uint64(m.Role))
	}
	l = len(m.RedeemScript)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxSigCount != 0 {
		n += 1 + sovTypes(uint64(m.MaxSigCount))
	}
	if m.SpendingCondition != nil {
		l = m.SpendingCondition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AddressInfo_SpendingCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InternalKeyIds) > 0 {
		for _, s := range m.InternalKeyIds {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExternalKeyIds) > 0 {
		for _, s := range m.ExternalKeyIds {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ExternalMultisigThreshold != 0 {
		n += 1 + sovTypes(uint64(m.ExternalMultisigThreshold))
	}
	if m.LockTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LockTime)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnsignedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfirmationRequired = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyoneCanSpendVout", wireType)
			}
			m.AnyoneCanSpendVout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnyoneCanSpendVout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevAbortedKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevAbortedKeyId = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalTransferAmount", wireType)
			}
			m.InternalTransferAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InternalTransferAmount |= github_com_btcsuite_btcutil.Amount(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsignedTx_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotateKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RotateKey = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputInfos = append(m.InputInfos, UnsignedTx_Info_InputInfo{})
			if err := m.InputInfos[len(m.InputInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsignedTx_Info_InputInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigRequirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigRequirements = append(m.SigRequirements, UnsignedTx_Info_InputInfo_SigRequirement{})
			if err := m.SigRequirements[len(m.SigRequirements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsignedTx_Info_InputInfo_SigRequirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigRequirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigRequirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigHash = append(m.SigHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SigHash == nil {
				m.SigHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevSignedTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevSignedTxHash = append(m.PrevSignedTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevSignedTxHash == nil {
				m.PrevSignedTxHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfirmationRequired = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyoneCanSpendVout", wireType)
			}
			m.AnyoneCanSpendVout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnyoneCanSpendVout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutPointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutPointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutPointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= github_com_btcsuite_btcutil.Amount(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= AddressRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemScript = append(m.RedeemScript[:0], dAtA[iNdEx:postIndex]...)
			if m.RedeemScript == nil {
				m.RedeemScript = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSigCount", wireType)
			}
			m.MaxSigCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSigCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendingCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpendingCondition == nil {
				m.SpendingCondition = &AddressInfo_SpendingCondition{}
			}
			if err := m.SpendingCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressInfo_SpendingCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendingCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendingCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalKeyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalKeyIds = append(m.InternalKeyIds, github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalKeyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalKeyIds = append(m.ExternalKeyIds, github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalMultisigThreshold", wireType)
			}
			m.ExternalMultisigThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalMultisigThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockTime == nil {
				m.LockTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
