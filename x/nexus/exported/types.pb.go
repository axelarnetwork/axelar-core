// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/nexus/exported/v1beta1/types.proto

package exported

import (
	fmt "fmt"
	exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferState int32

const (
	TRANSFER_STATE_UNSPECIFIED TransferState = 0
	Pending                    TransferState = 1
	Archived                   TransferState = 2
	InsufficientAmount         TransferState = 3
)

var TransferState_name = map[int32]string{
	0: "TRANSFER_STATE_UNSPECIFIED",
	1: "TRANSFER_STATE_PENDING",
	2: "TRANSFER_STATE_ARCHIVED",
	3: "TRANSFER_STATE_INSUFFICIENT_AMOUNT",
}

var TransferState_value = map[string]int32{
	"TRANSFER_STATE_UNSPECIFIED":         0,
	"TRANSFER_STATE_PENDING":             1,
	"TRANSFER_STATE_ARCHIVED":            2,
	"TRANSFER_STATE_INSUFFICIENT_AMOUNT": 3,
}

func (x TransferState) String() string {
	return proto.EnumName(TransferState_name, int32(x))
}

func (TransferState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{0}
}

type TransferDirection int32

const (
	Unspecified TransferDirection = 0
	Incoming    TransferDirection = 1
	Outgoing    TransferDirection = 2
)

var TransferDirection_name = map[int32]string{
	0: "TRANSFER_DIRECTION_UNSPECIFIED",
	1: "TRANSFER_DIRECTION_INCOMING",
	2: "TRANSFER_DIRECTION_OUTGOING",
}

var TransferDirection_value = map[string]int32{
	"TRANSFER_DIRECTION_UNSPECIFIED": 0,
	"TRANSFER_DIRECTION_INCOMING":    1,
	"TRANSFER_DIRECTION_OUTGOING":    2,
}

func (x TransferDirection) String() string {
	return proto.EnumName(TransferDirection_name, int32(x))
}

func (TransferDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{1}
}

type GeneralMessage_Status int32

const (
	NonExistent GeneralMessage_Status = 0
	Approved    GeneralMessage_Status = 1
	Executed    GeneralMessage_Status = 2
)

var GeneralMessage_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_APPROVED",
	2: "STATUS_EXECUTED",
}

var GeneralMessage_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_APPROVED":    1,
	"STATUS_EXECUTED":    2,
}

func (x GeneralMessage_Status) String() string {
	return proto.EnumName(GeneralMessage_Status_name, int32(x))
}

func (GeneralMessage_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{6, 0}
}

// Chain represents the properties of a registered blockchain
type Chain struct {
	Name                  ChainName        `protobuf:"bytes,1,opt,name=name,proto3,casttype=ChainName" json:"name,omitempty"`
	SupportsForeignAssets bool             `protobuf:"varint,3,opt,name=supports_foreign_assets,json=supportsForeignAssets,proto3" json:"supports_foreign_assets,omitempty"`
	KeyType               exported.KeyType `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=axelar.tss.exported.v1beta1.KeyType" json:"key_type,omitempty"`
	Module                string           `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

// CrossChainAddress represents a generalized address on any registered chain
type CrossChainAddress struct {
	Chain   Chain  `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CrossChainAddress) Reset()         { *m = CrossChainAddress{} }
func (m *CrossChainAddress) String() string { return proto.CompactTextString(m) }
func (*CrossChainAddress) ProtoMessage()    {}
func (*CrossChainAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{1}
}
func (m *CrossChainAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainAddress.Merge(m, src)
}
func (m *CrossChainAddress) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainAddress.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainAddress proto.InternalMessageInfo

// CrossChainTransfer represents a generalized transfer of some asset to a
// registered blockchain
type CrossChainTransfer struct {
	Recipient CrossChainAddress `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient"`
	Asset     types.Coin        `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset"`
	ID        TransferID        `protobuf:"varint,3,opt,name=id,proto3,casttype=TransferID" json:"id,omitempty"`
	State     TransferState     `protobuf:"varint,4,opt,name=state,proto3,enum=axelar.nexus.exported.v1beta1.TransferState" json:"state,omitempty"`
}

func (m *CrossChainTransfer) Reset()         { *m = CrossChainTransfer{} }
func (m *CrossChainTransfer) String() string { return proto.CompactTextString(m) }
func (*CrossChainTransfer) ProtoMessage()    {}
func (*CrossChainTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{2}
}
func (m *CrossChainTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTransfer.Merge(m, src)
}
func (m *CrossChainTransfer) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTransfer proto.InternalMessageInfo

// TransferFee represents accumulated fees generated by the network
type TransferFee struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *TransferFee) Reset()         { *m = TransferFee{} }
func (m *TransferFee) String() string { return proto.CompactTextString(m) }
func (*TransferFee) ProtoMessage()    {}
func (*TransferFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{3}
}
func (m *TransferFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFee.Merge(m, src)
}
func (m *TransferFee) XXX_Size() int {
	return m.Size()
}
func (m *TransferFee) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFee.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFee proto.InternalMessageInfo

type FeeInfo struct {
	Chain   ChainName                              `protobuf:"bytes,1,opt,name=chain,proto3,casttype=ChainName" json:"chain,omitempty"`
	Asset   string                                 `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	FeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
	MinFee  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=min_fee,json=minFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_fee"`
	MaxFee  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=max_fee,json=maxFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_fee"`
}

func (m *FeeInfo) Reset()         { *m = FeeInfo{} }
func (m *FeeInfo) String() string { return proto.CompactTextString(m) }
func (*FeeInfo) ProtoMessage()    {}
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{4}
}
func (m *FeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfo.Merge(m, src)
}
func (m *FeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfo proto.InternalMessageInfo

type Asset struct {
	Denom         string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	IsNativeAsset bool   `protobuf:"varint,3,opt,name=is_native_asset,json=isNativeAsset,proto3" json:"is_native_asset,omitempty"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{5}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

type GeneralMessage struct {
	ID               string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceChain      ChainName             `protobuf:"bytes,2,opt,name=source_chain,json=sourceChain,proto3,casttype=ChainName" json:"source_chain,omitempty"`
	Sender           string                `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	DestinationChain ChainName             `protobuf:"bytes,4,opt,name=destination_chain,json=destinationChain,proto3,casttype=ChainName" json:"destination_chain,omitempty"`
	Receiver         string                `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	PayloadHash      []byte                `protobuf:"bytes,6,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"`
	Status           GeneralMessage_Status `protobuf:"varint,7,opt,name=status,proto3,enum=axelar.nexus.exported.v1beta1.GeneralMessage_Status" json:"status,omitempty"`
	Asset            *types.Coin           `protobuf:"bytes,8,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (m *GeneralMessage) Reset()         { *m = GeneralMessage{} }
func (m *GeneralMessage) String() string { return proto.CompactTextString(m) }
func (*GeneralMessage) ProtoMessage()    {}
func (*GeneralMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_82a7a8692925fe67, []int{6}
}
func (m *GeneralMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralMessage.Merge(m, src)
}
func (m *GeneralMessage) XXX_Size() int {
	return m.Size()
}
func (m *GeneralMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralMessage proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("axelar.nexus.exported.v1beta1.TransferState", TransferState_name, TransferState_value)
	proto.RegisterEnum("axelar.nexus.exported.v1beta1.TransferDirection", TransferDirection_name, TransferDirection_value)
	proto.RegisterEnum("axelar.nexus.exported.v1beta1.GeneralMessage_Status", GeneralMessage_Status_name, GeneralMessage_Status_value)
	proto.RegisterType((*Chain)(nil), "axelar.nexus.exported.v1beta1.Chain")
	proto.RegisterType((*CrossChainAddress)(nil), "axelar.nexus.exported.v1beta1.CrossChainAddress")
	proto.RegisterType((*CrossChainTransfer)(nil), "axelar.nexus.exported.v1beta1.CrossChainTransfer")
	proto.RegisterType((*TransferFee)(nil), "axelar.nexus.exported.v1beta1.TransferFee")
	proto.RegisterType((*FeeInfo)(nil), "axelar.nexus.exported.v1beta1.FeeInfo")
	proto.RegisterType((*Asset)(nil), "axelar.nexus.exported.v1beta1.Asset")
	proto.RegisterType((*GeneralMessage)(nil), "axelar.nexus.exported.v1beta1.GeneralMessage")
}

func init() {
	proto.RegisterFile("axelar/nexus/exported/v1beta1/types.proto", fileDescriptor_82a7a8692925fe67)
}

var fileDescriptor_82a7a8692925fe67 = []byte{
	// 1104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0x3a, 0xfe, 0xca, 0x38, 0x6d, 0x9d, 0x51, 0x48, 0x8d, 0x11, 0x6b, 0xc7, 0x54, 0x4d,
	0x8a, 0xc8, 0x3a, 0x6d, 0x29, 0x07, 0x0e, 0x80, 0x3f, 0xd6, 0xe9, 0x52, 0xb2, 0x8e, 0xd6, 0x76,
	0x85, 0xb8, 0x58, 0x9b, 0xdd, 0xd7, 0xf6, 0x2a, 0xf1, 0x8c, 0xb5, 0xb3, 0x0e, 0xce, 0x91, 0x1b,
	0x0a, 0x17, 0xfe, 0x40, 0x0e, 0x08, 0x0e, 0x08, 0xf1, 0x27, 0xb8, 0xe5, 0x82, 0xd4, 0x23, 0xe2,
	0x10, 0x20, 0xf9, 0x03, 0x9c, 0x7b, 0x42, 0x33, 0xb3, 0x8e, 0x9d, 0xd4, 0x6a, 0x80, 0x53, 0x76,
	0xe6, 0x7d, 0xde, 0xe7, 0x7d, 0xde, 0xaf, 0x89, 0xd1, 0x03, 0x7b, 0x0c, 0x07, 0xb6, 0x5f, 0x22,
	0x30, 0x1e, 0xb1, 0x12, 0x8c, 0x87, 0xd4, 0x0f, 0xc0, 0x2d, 0x1d, 0x3e, 0xdc, 0x83, 0xc0, 0x7e,
	0x58, 0x0a, 0x8e, 0x86, 0xc0, 0xb4, 0xa1, 0x4f, 0x03, 0x8a, 0xdf, 0x96, 0x50, 0x4d, 0x40, 0xb5,
	0x09, 0x54, 0x0b, 0xa1, 0xb9, 0x95, 0x1e, 0xed, 0x51, 0x81, 0x2c, 0xf1, 0x2f, 0xe9, 0x94, 0x53,
	0x1d, 0xca, 0x06, 0x94, 0x95, 0xf6, 0x6c, 0x06, 0x97, 0xac, 0x0e, 0xf5, 0x48, 0x68, 0x5f, 0x0f,
	0xe3, 0x07, 0xec, 0xf5, 0xd1, 0x8b, 0xbf, 0x28, 0x28, 0x5e, 0xed, 0xdb, 0x1e, 0xc1, 0x6b, 0x28,
	0x46, 0xec, 0x01, 0x64, 0x95, 0x82, 0xb2, 0xb1, 0x58, 0xb9, 0xf5, 0xf2, 0x2c, 0xbf, 0x28, 0x0c,
	0xa6, 0x3d, 0x00, 0x4b, 0x98, 0xf0, 0x07, 0xe8, 0x2e, 0x1b, 0x0d, 0x39, 0x1b, 0xeb, 0x74, 0xa9,
	0x0f, 0x5e, 0x8f, 0x74, 0x6c, 0xc6, 0x20, 0x60, 0xd9, 0x85, 0x82, 0xb2, 0x91, 0xb2, 0xde, 0x98,
	0x98, 0xeb, 0xd2, 0x5a, 0x16, 0x46, 0xfc, 0x31, 0x4a, 0xed, 0xc3, 0x51, 0x87, 0xc7, 0xcd, 0xc6,
	0x0a, 0xca, 0xc6, 0xed, 0x47, 0xf7, 0xb4, 0x30, 0xeb, 0x80, 0xbd, 0x9a, 0xb3, 0xf6, 0x0c, 0x8e,
	0x5a, 0x47, 0x43, 0xb0, 0x92, 0xfb, 0xf2, 0x03, 0xaf, 0xa2, 0xc4, 0x80, 0xba, 0xa3, 0x03, 0xc8,
	0xc6, 0xb9, 0x3a, 0x2b, 0x3c, 0x7d, 0x1a, 0x4b, 0x45, 0x33, 0x0b, 0x45, 0x8a, 0x96, 0xab, 0x3e,
	0x65, 0x4c, 0xc8, 0x2d, 0xbb, 0xae, 0x0f, 0x8c, 0xe1, 0x4f, 0x50, 0xdc, 0xe1, 0x67, 0x91, 0x4f,
	0x7a, 0x1a, 0x70, 0x7e, 0x99, 0x35, 0xe1, 0x5b, 0x89, 0x9d, 0x9e, 0xe5, 0x23, 0x96, 0x74, 0xc4,
	0x59, 0x94, 0xb4, 0x25, 0x59, 0x36, 0x2a, 0xa2, 0x4e, 0x8e, 0xc5, 0x6f, 0xa2, 0x08, 0x4f, 0x23,
	0xb6, 0x7c, 0x9b, 0xb0, 0x2e, 0xf8, 0xb8, 0x85, 0x16, 0x7d, 0x70, 0xbc, 0xa1, 0x07, 0x24, 0x08,
	0xc3, 0x6e, 0xdd, 0x14, 0xf6, 0xba, 0xee, 0x50, 0xc2, 0x94, 0x08, 0x3f, 0x41, 0x71, 0x51, 0x63,
	0x21, 0x22, 0xfd, 0xe8, 0x4d, 0x4d, 0xb6, 0x5e, 0xe3, 0xad, 0x9f, 0xf2, 0xd0, 0xa9, 0x7a, 0x81,
	0xc6, 0xf7, 0x50, 0xd4, 0x73, 0x45, 0x5b, 0x62, 0x95, 0x95, 0xf3, 0xb3, 0x7c, 0xd4, 0xa8, 0xbd,
	0x3c, 0xcb, 0xa3, 0x89, 0x58, 0xa3, 0x66, 0x45, 0x3d, 0x17, 0x57, 0x50, 0x9c, 0x05, 0x76, 0x30,
	0x69, 0xcb, 0x7b, 0x37, 0xc8, 0x9d, 0x78, 0x37, 0xb9, 0x8f, 0x25, 0x5d, 0x8b, 0x43, 0x94, 0x9e,
	0xdc, 0xd7, 0x01, 0xb0, 0x8d, 0xe2, 0x7c, 0x10, 0x59, 0x56, 0x29, 0x2c, 0xbc, 0x5e, 0xef, 0x16,
	0xd7, 0xfb, 0xd3, 0x1f, 0xf9, 0x8d, 0x9e, 0x17, 0xf4, 0x47, 0x7b, 0x9a, 0x43, 0x07, 0xa5, 0x70,
	0xae, 0xe5, 0x9f, 0x4d, 0xe6, 0xee, 0x87, 0xd3, 0xca, 0x1d, 0x98, 0x25, 0x99, 0x8b, 0xdf, 0x45,
	0x51, 0xb2, 0x0e, 0x60, 0x90, 0x2e, 0xc5, 0xef, 0xcc, 0xf6, 0xf9, 0x95, 0xb9, 0x0d, 0x5b, 0xb9,
	0x32, 0x5b, 0xc3, 0xc5, 0x49, 0x89, 0x0c, 0x94, 0xea, 0x02, 0x74, 0x7c, 0x9e, 0x3f, 0x2f, 0xd4,
	0x52, 0x45, 0xe3, 0x8a, 0x7e, 0x3f, 0xcb, 0xdf, 0xff, 0x17, 0x8a, 0x6a, 0xe0, 0x58, 0xc9, 0x2e,
	0x80, 0x65, 0x07, 0x80, 0xb7, 0x51, 0x72, 0xe0, 0x91, 0x4e, 0x17, 0x64, 0x25, 0xff, 0x1b, 0x93,
	0x41, 0x02, 0x2b, 0x31, 0xf0, 0x08, 0xaf, 0x1e, 0x27, 0xb2, 0xc7, 0x82, 0x28, 0xfe, 0x3f, 0x89,
	0xec, 0x71, 0x1d, 0xa0, 0xf8, 0x0c, 0xc5, 0xc5, 0xf6, 0xf1, 0xdc, 0x5d, 0x20, 0x74, 0x20, 0x0b,
	0x64, 0xc9, 0x03, 0xbe, 0x8f, 0xee, 0x78, 0xac, 0x43, 0xec, 0xc0, 0x3b, 0x04, 0xb9, 0xc3, 0xe1,
	0x0a, 0xdf, 0xf2, 0x98, 0x29, 0x6e, 0x85, 0x77, 0xb8, 0x61, 0x7f, 0x2f, 0xa0, 0xdb, 0xdb, 0x40,
	0xc0, 0xb7, 0x0f, 0x76, 0x80, 0x31, 0xbb, 0xc7, 0x57, 0x92, 0xcf, 0x97, 0x2c, 0x7a, 0x42, 0xce,
	0x97, 0x98, 0xa8, 0x2d, 0xb4, 0xc4, 0xe8, 0xc8, 0x77, 0xa0, 0x23, 0xdb, 0x12, 0x9d, 0xd7, 0x96,
	0xb4, 0x84, 0xc8, 0x87, 0x67, 0x15, 0x25, 0x18, 0x10, 0x17, 0x7c, 0xa1, 0x60, 0xd1, 0x0a, 0x4f,
	0xf8, 0x43, 0xb4, 0xec, 0x02, 0x0b, 0x3c, 0x2e, 0x92, 0x92, 0x90, 0x2e, 0x36, 0x8f, 0x2e, 0x33,
	0x83, 0x93, 0x9c, 0x39, 0x94, 0xf2, 0xc1, 0x01, 0xef, 0x10, 0xfc, 0xf0, 0xc9, 0xb8, 0x3c, 0xe3,
	0x35, 0xb4, 0x34, 0xb4, 0x8f, 0x0e, 0xa8, 0xed, 0x76, 0xfa, 0x36, 0xeb, 0x67, 0x13, 0xbc, 0xce,
	0x56, 0x3a, 0xbc, 0x7b, 0x6a, 0xb3, 0x3e, 0xfe, 0x0c, 0x25, 0xf8, 0x6c, 0x8f, 0x58, 0x36, 0x29,
	0xf6, 0xe2, 0xfd, 0x1b, 0xf6, 0xe2, 0x6a, 0x6d, 0xb4, 0xa6, 0xf0, 0xb5, 0x42, 0x0e, 0x5c, 0x9a,
	0x4c, 0x5f, 0xea, 0x86, 0x0d, 0x0e, 0x07, 0xb3, 0xf8, 0x95, 0x82, 0x12, 0x92, 0x03, 0xaf, 0x23,
	0xdc, 0x6c, 0x95, 0x5b, 0xed, 0x66, 0xa7, 0x6d, 0x36, 0x77, 0xf5, 0xaa, 0x51, 0x37, 0xf4, 0x5a,
	0x26, 0x92, 0xbb, 0x73, 0x7c, 0x52, 0x48, 0x9b, 0x94, 0xe8, 0x63, 0x8f, 0x05, 0xfc, 0x99, 0x58,
	0x43, 0x77, 0x42, 0x60, 0x79, 0x77, 0xd7, 0x6a, 0x3c, 0xd7, 0x6b, 0x19, 0x25, 0xb7, 0x74, 0x7c,
	0x52, 0x48, 0x95, 0x87, 0x43, 0x9f, 0x1e, 0x82, 0x3b, 0x03, 0xd1, 0x3f, 0xd7, 0xab, 0xed, 0x96,
	0x5e, 0xcb, 0x44, 0x25, 0x44, 0x1f, 0x83, 0x33, 0x0a, 0xc0, 0xcd, 0xa5, 0xbe, 0xfe, 0x5e, 0x8d,
	0xfc, 0xf8, 0x83, 0xaa, 0xbc, 0xfb, 0xab, 0x82, 0x6e, 0x5d, 0x59, 0x77, 0xac, 0xa2, 0x5c, 0xcb,
	0x2a, 0x9b, 0xcd, 0xba, 0x6e, 0x75, 0x38, 0x8f, 0x7e, 0x55, 0x12, 0x5e, 0x47, 0xab, 0xd7, 0xec,
	0xbb, 0xba, 0x59, 0x33, 0xcc, 0xed, 0x8c, 0x92, 0x4b, 0x1f, 0x9f, 0x14, 0x92, 0xbb, 0x40, 0x5c,
	0x8f, 0xf4, 0xf0, 0x03, 0x74, 0xf7, 0x1a, 0xb0, 0x6c, 0x55, 0x9f, 0x1a, 0xcf, 0xa7, 0x7a, 0xca,
	0xbe, 0xd3, 0xf7, 0xb8, 0xe4, 0x8f, 0x50, 0xf1, 0x1a, 0xd4, 0x30, 0x9b, 0xed, 0x7a, 0xdd, 0xa8,
	0x1a, 0xba, 0xd9, 0xea, 0x94, 0x77, 0x1a, 0x6d, 0xb3, 0x95, 0x59, 0xc8, 0xad, 0x1e, 0x9f, 0x14,
	0xb0, 0x41, 0xd8, 0xa8, 0xdb, 0xf5, 0x1c, 0xfe, 0x6c, 0x96, 0x07, 0x74, 0x44, 0x82, 0x99, 0x7c,
	0x7e, 0x56, 0xd0, 0xf2, 0x24, 0x9f, 0x9a, 0xe7, 0x83, 0xc3, 0x87, 0x05, 0x3f, 0x46, 0xea, 0x25,
	0x7f, 0xcd, 0xb0, 0xf4, 0x6a, 0xcb, 0x68, 0x98, 0xf3, 0x4a, 0xdd, 0x26, 0x6c, 0x08, 0x8e, 0xd7,
	0xf5, 0xc0, 0xc5, 0x9b, 0xe8, 0xad, 0x39, 0x4e, 0x86, 0x59, 0x6d, 0xec, 0xc8, 0x6c, 0x45, 0x0e,
	0x06, 0x71, 0xe8, 0x80, 0xa7, 0x3b, 0x1f, 0xde, 0x68, 0xb7, 0xb6, 0x1b, 0x1c, 0x1e, 0xa6, 0xdc,
	0x18, 0x05, 0x3d, 0xea, 0x91, 0x5e, 0x2e, 0xc6, 0x25, 0x57, 0x9a, 0xa7, 0x7f, 0xa9, 0x91, 0xd3,
	0x73, 0x55, 0x79, 0x71, 0xae, 0x2a, 0x7f, 0x9e, 0xab, 0xca, 0xb7, 0x17, 0x6a, 0xe4, 0xc5, 0x85,
	0x1a, 0xf9, 0xed, 0x42, 0x8d, 0x7c, 0xf1, 0x64, 0xe6, 0x31, 0x90, 0x93, 0x49, 0x20, 0xf8, 0x92,
	0xfa, 0xfb, 0xe1, 0x69, 0xd3, 0xa1, 0x3e, 0x94, 0xc6, 0xd7, 0x7e, 0x7e, 0xec, 0x25, 0xc4, 0xff,
	0xfc, 0xc7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x50, 0x8e, 0x95, 0x9e, 0x08, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x2a
	}
	if m.KeyType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x20
	}
	if m.SupportsForeignAssets {
		i--
		if m.SupportsForeignAssets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CrossChainTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.ID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Recipient.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TransferFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxFee.Size()
		i -= size
		if _, err := m.MaxFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MinFee.Size()
		i -= size
		if _, err := m.MinFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsNativeAsset {
		i--
		if m.IsNativeAsset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeneralMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PayloadHash) > 0 {
		i -= len(m.PayloadHash)
		copy(dAtA[i:], m.PayloadHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PayloadHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceChain) > 0 {
		i -= len(m.SourceChain)
		copy(dAtA[i:], m.SourceChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SupportsForeignAssets {
		n += 2
	}
	if m.KeyType != 0 {
		n += 1 + sovTypes(uint64(m.KeyType))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CrossChainAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Chain.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CrossChainTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Recipient.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ID != 0 {
		n += 1 + sovTypes(uint64(m.ID))
	}
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	return n
}

func (m *TransferFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *FeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.FeeRate.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MinFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MaxFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IsNativeAsset {
		n += 2
	}
	return n
}

func (m *GeneralMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SourceChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PayloadHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsForeignAssets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsForeignAssets = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= exported.KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Recipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= TransferID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TransferState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNativeAsset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNativeAsset = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChain = ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = append(m.PayloadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PayloadHash == nil {
				m.PayloadHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GeneralMessage_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &types.Coin{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
