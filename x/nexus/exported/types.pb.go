// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nexus/exported/v1beta1/types.proto

package exported

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferState int32

const (
	TRANSFER_STATE_UNSPECIFIED TransferState = 0
	Pending                    TransferState = 1
	Archived                   TransferState = 2
)

var TransferState_name = map[int32]string{
	0: "TRANSFER_STATE_UNSPECIFIED",
	1: "TRANSFER_STATE_PENDING",
	2: "TRANSFER_STATE_ARCHIVED",
}

var TransferState_value = map[string]int32{
	"TRANSFER_STATE_UNSPECIFIED": 0,
	"TRANSFER_STATE_PENDING":     1,
	"TRANSFER_STATE_ARCHIVED":    2,
}

func (x TransferState) String() string {
	return proto.EnumName(TransferState_name, int32(x))
}

func (TransferState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a644c78dbaa440f, []int{0}
}

// Chain represents the properties of a registered blockchain
type Chain struct {
	Name                  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NativeAsset           string `protobuf:"bytes,2,opt,name=native_asset,json=nativeAsset,proto3" json:"native_asset,omitempty"`
	SupportsForeignAssets bool   `protobuf:"varint,3,opt,name=supports_foreign_assets,json=supportsForeignAssets,proto3" json:"supports_foreign_assets,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a644c78dbaa440f, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

// CrossChainAddress represents a generalized address on any registered chain
type CrossChainAddress struct {
	Chain   Chain  `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CrossChainAddress) Reset()         { *m = CrossChainAddress{} }
func (m *CrossChainAddress) String() string { return proto.CompactTextString(m) }
func (*CrossChainAddress) ProtoMessage()    {}
func (*CrossChainAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a644c78dbaa440f, []int{1}
}
func (m *CrossChainAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainAddress.Merge(m, src)
}
func (m *CrossChainAddress) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainAddress.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainAddress proto.InternalMessageInfo

// CrossChainTransfer represents a generalized transfer of some asset to a
// registered blockchain
type CrossChainTransfer struct {
	Recipient CrossChainAddress `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient"`
	Asset     types.Coin        `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset"`
	ID        uint64            `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CrossChainTransfer) Reset()         { *m = CrossChainTransfer{} }
func (m *CrossChainTransfer) String() string { return proto.CompactTextString(m) }
func (*CrossChainTransfer) ProtoMessage()    {}
func (*CrossChainTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a644c78dbaa440f, []int{2}
}
func (m *CrossChainTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTransfer.Merge(m, src)
}
func (m *CrossChainTransfer) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTransfer proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nexus.exported.v1beta1.TransferState", TransferState_name, TransferState_value)
	proto.RegisterType((*Chain)(nil), "nexus.exported.v1beta1.Chain")
	proto.RegisterType((*CrossChainAddress)(nil), "nexus.exported.v1beta1.CrossChainAddress")
	proto.RegisterType((*CrossChainTransfer)(nil), "nexus.exported.v1beta1.CrossChainTransfer")
}

func init() {
	proto.RegisterFile("nexus/exported/v1beta1/types.proto", fileDescriptor_5a644c78dbaa440f)
}

var fileDescriptor_5a644c78dbaa440f = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0x77, 0x11, 0x5a, 0x3a, 0xd4, 0x04, 0x27, 0x4a, 0x71, 0x13, 0xa7, 0xc8, 0xc5, 0xd6,
	0xc4, 0xdd, 0xb4, 0xa6, 0x26, 0x1e, 0x17, 0x58, 0x94, 0x83, 0x84, 0x2c, 0xe8, 0xc1, 0x0b, 0x19,
	0x76, 0x5f, 0x61, 0xa2, 0xcc, 0x90, 0x99, 0x01, 0xf1, 0x1b, 0x98, 0x26, 0x26, 0x7e, 0x81, 0x9e,
	0xf4, 0xe0, 0xd9, 0x4f, 0xc1, 0xb1, 0x47, 0x4f, 0x8d, 0xc2, 0x17, 0x31, 0xcc, 0x82, 0x44, 0x62,
	0x6f, 0xf3, 0xe6, 0xff, 0x7b, 0xef, 0xff, 0x9f, 0x97, 0x41, 0x65, 0x0e, 0xd3, 0xb1, 0xf2, 0x60,
	0x3a, 0x12, 0x52, 0x43, 0xec, 0x4d, 0x4e, 0x7a, 0xa0, 0xe9, 0x89, 0xa7, 0x3f, 0x8e, 0x40, 0xb9,
	0x23, 0x29, 0xb4, 0xc0, 0x05, 0xc3, 0xb8, 0x6b, 0xc6, 0x5d, 0x31, 0xce, 0xdd, 0xbe, 0xe8, 0x0b,
	0x83, 0x78, 0xcb, 0x53, 0x42, 0x3b, 0x24, 0x12, 0x6a, 0x28, 0x94, 0xd7, 0xa3, 0x0a, 0xfe, 0x8e,
	0x8b, 0x04, 0xe3, 0x89, 0x5e, 0x9e, 0xa0, 0x4c, 0x75, 0x40, 0x19, 0xc7, 0x18, 0xa5, 0x39, 0x1d,
	0x42, 0xd1, 0x2e, 0xd9, 0x47, 0x7b, 0xa1, 0x39, 0xe3, 0x87, 0x68, 0x9f, 0x53, 0xcd, 0x26, 0xd0,
	0xa5, 0x4a, 0x81, 0x2e, 0xa6, 0x8c, 0x96, 0x4b, 0xee, 0xfc, 0xe5, 0x15, 0x7e, 0x86, 0x0e, 0xd4,
	0x78, 0xb4, 0x8c, 0xa2, 0xba, 0xe7, 0x42, 0x02, 0xeb, 0xf3, 0x04, 0x56, 0xc5, 0x5b, 0x25, 0xfb,
	0x28, 0x1b, 0xde, 0x5b, 0xcb, 0xf5, 0x44, 0x35, 0x6d, 0xaa, 0x3c, 0x40, 0x77, 0xaa, 0x52, 0x28,
	0x65, 0xcc, 0xfd, 0x38, 0x96, 0xa0, 0x14, 0x7e, 0x8e, 0x32, 0xd1, 0xb2, 0x36, 0x21, 0x72, 0xa7,
	0x0f, 0xdc, 0xff, 0x3f, 0xd5, 0x35, 0x4d, 0x95, 0xf4, 0xec, 0xfa, 0xd0, 0x0a, 0x93, 0x0e, 0x5c,
	0x44, 0xbb, 0x34, 0x99, 0xb2, 0x4a, 0xb9, 0x2e, 0xcb, 0x3f, 0x6c, 0x84, 0x37, 0x56, 0x1d, 0x49,
	0xb9, 0x3a, 0x07, 0x89, 0x5f, 0xa1, 0x3d, 0x09, 0x11, 0x1b, 0x31, 0xe0, 0x7a, 0xe5, 0x77, 0x7c,
	0xa3, 0xdf, 0x76, 0xd2, 0x95, 0xf7, 0x66, 0x02, 0x3e, 0x43, 0x99, 0xcd, 0x8e, 0x72, 0xa7, 0xf7,
	0xdd, 0x64, 0xef, 0xee, 0x72, 0xef, 0x9b, 0x39, 0x62, 0x13, 0xdb, 0xd0, 0xb8, 0x80, 0x52, 0x2c,
	0x36, 0x9b, 0x4a, 0x57, 0x76, 0xe6, 0xd7, 0x87, 0xa9, 0x46, 0x2d, 0x4c, 0xb1, 0xf8, 0xf1, 0x67,
	0x1b, 0xdd, 0x5e, 0x47, 0x6d, 0x6b, 0xaa, 0x01, 0x13, 0xe4, 0x74, 0x42, 0xbf, 0xd9, 0xae, 0x07,
	0x61, 0xb7, 0xdd, 0xf1, 0x3b, 0x41, 0xf7, 0x75, 0xb3, 0xdd, 0x0a, 0xaa, 0x8d, 0x7a, 0x23, 0xa8,
	0xe5, 0x2d, 0xfc, 0x08, 0x15, 0xb6, 0xf4, 0x56, 0xd0, 0xac, 0x35, 0x9a, 0x2f, 0xf2, 0xb6, 0x93,
	0xbb, 0xb8, 0x2c, 0xed, 0xb6, 0x80, 0xc7, 0x8c, 0xf7, 0xf1, 0x31, 0x3a, 0xd8, 0x02, 0xfd, 0xb0,
	0xfa, 0xb2, 0xf1, 0x26, 0xa8, 0xe5, 0x53, 0xce, 0xfe, 0xc5, 0x65, 0x29, 0xeb, 0xcb, 0x68, 0xc0,
	0x26, 0x10, 0x3b, 0xd9, 0x4f, 0x5f, 0x89, 0xf5, 0xfd, 0x1b, 0xb1, 0x2b, 0xed, 0xd9, 0x6f, 0x62,
	0xcd, 0xe6, 0xc4, 0xbe, 0x9a, 0x13, 0xfb, 0xd7, 0x9c, 0xd8, 0x5f, 0x16, 0xc4, 0xba, 0x5a, 0x10,
	0xeb, 0xe7, 0x82, 0x58, 0x6f, 0xcf, 0xfa, 0x4c, 0x0f, 0xc6, 0x3d, 0x37, 0x12, 0x43, 0x8f, 0x4e,
	0xe1, 0x3d, 0x95, 0x1c, 0xf4, 0x07, 0x21, 0xdf, 0xad, 0xaa, 0x27, 0x91, 0x90, 0xe0, 0x4d, 0xbd,
	0x7f, 0x7f, 0x77, 0x6f, 0xc7, 0x7c, 0xc1, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x18,
	0x34, 0xf2, 0xf6, 0x02, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupportsForeignAssets {
		i--
		if m.SupportsForeignAssets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.NativeAsset) > 0 {
		i -= len(m.NativeAsset)
		copy(dAtA[i:], m.NativeAsset)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NativeAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CrossChainTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Recipient.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NativeAsset)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SupportsForeignAssets {
		n += 2
	}
	return n
}

func (m *CrossChainAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Chain.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CrossChainTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Recipient.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ID != 0 {
		n += 1 + sovTypes(uint64(m.ID))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsForeignAssets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsForeignAssets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Recipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
