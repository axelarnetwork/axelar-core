// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/axelarnetwork/axelar-core/x/nexus/exported"
	types "github.com/cosmos/cosmos-sdk/types"
	"sync"
)

// Ensure, that HandlerMock does implement exported.Handler.
// If this is not the case, regenerate this file with moq.
var _ exported.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of exported.Handler.
//
// 	func TestSomethingThatUsesHandler(t *testing.T) {
//
// 		// make and configure a mocked exported.Handler
// 		mockedHandler := &HandlerMock{
// 			ValidateFunc: func(ctx types.Context, address exported.CrossChainAddress) error {
// 				panic("mock out the Validate method")
// 			},
// 			WithFunc: func(properties ...exported.HandlerProperty) exported.Handler {
// 				panic("mock out the With method")
// 			},
// 		}
//
// 		// use mockedHandler in code that requires exported.Handler
// 		// and then make assertions.
//
// 	}
type HandlerMock struct {
	// ValidateFunc mocks the Validate method.
	ValidateFunc func(ctx types.Context, address exported.CrossChainAddress) error

	// WithFunc mocks the With method.
	WithFunc func(properties ...exported.HandlerProperty) exported.Handler

	// calls tracks calls to the methods.
	calls struct {
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// Ctx is the ctx argument value.
			Ctx types.Context
			// Address is the address argument value.
			Address exported.CrossChainAddress
		}
		// With holds details about calls to the With method.
		With []struct {
			// Properties is the properties argument value.
			Properties []exported.HandlerProperty
		}
	}
	lockValidate sync.RWMutex
	lockWith     sync.RWMutex
}

// Validate calls ValidateFunc.
func (mock *HandlerMock) Validate(ctx types.Context, address exported.CrossChainAddress) error {
	if mock.ValidateFunc == nil {
		panic("HandlerMock.ValidateFunc: method is nil but Handler.Validate was just called")
	}
	callInfo := struct {
		Ctx     types.Context
		Address exported.CrossChainAddress
	}{
		Ctx:     ctx,
		Address: address,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(ctx, address)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//     len(mockedHandler.ValidateCalls())
func (mock *HandlerMock) ValidateCalls() []struct {
	Ctx     types.Context
	Address exported.CrossChainAddress
} {
	var calls []struct {
		Ctx     types.Context
		Address exported.CrossChainAddress
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}

// With calls WithFunc.
func (mock *HandlerMock) With(properties ...exported.HandlerProperty) exported.Handler {
	if mock.WithFunc == nil {
		panic("HandlerMock.WithFunc: method is nil but Handler.With was just called")
	}
	callInfo := struct {
		Properties []exported.HandlerProperty
	}{
		Properties: properties,
	}
	mock.lockWith.Lock()
	mock.calls.With = append(mock.calls.With, callInfo)
	mock.lockWith.Unlock()
	return mock.WithFunc(properties...)
}

// WithCalls gets all the calls that were made to With.
// Check the length with:
//     len(mockedHandler.WithCalls())
func (mock *HandlerMock) WithCalls() []struct {
	Properties []exported.HandlerProperty
} {
	var calls []struct {
		Properties []exported.HandlerProperty
	}
	mock.lockWith.RLock()
	calls = mock.calls.With
	mock.lockWith.RUnlock()
	return calls
}
