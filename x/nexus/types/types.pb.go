// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/nexus/v1beta1/types.proto

package types

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MaintainerState struct {
	Address        github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"address,omitempty"`
	MissingVotes   utils.Bitmap                                  `protobuf:"bytes,2,opt,name=missing_votes,json=missingVotes,proto3" json:"missing_votes"`
	IncorrectVotes utils.Bitmap                                  `protobuf:"bytes,3,opt,name=incorrect_votes,json=incorrectVotes,proto3" json:"incorrect_votes"`
}

func (m *MaintainerState) Reset()         { *m = MaintainerState{} }
func (m *MaintainerState) String() string { return proto.CompactTextString(m) }
func (*MaintainerState) ProtoMessage()    {}
func (*MaintainerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecc98625accd1ae9, []int{0}
}
func (m *MaintainerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerState.Merge(m, src)
}
func (m *MaintainerState) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerState) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerState.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerState proto.InternalMessageInfo

// ChainState represents the state of a registered blockchain
type ChainState struct {
	Chain            exported.Chain                                  `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	Maintainers      []github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,2,rep,name=maintainers,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"maintainers,omitempty"` // Deprecated: Do not use.
	Activated        bool                                            `protobuf:"varint,3,opt,name=activated,proto3" json:"activated,omitempty"`
	Assets           []exported.Asset                                `protobuf:"bytes,5,rep,name=assets,proto3" json:"assets"`
	MaintainerStates []MaintainerState                               `protobuf:"bytes,6,rep,name=maintainer_states,json=maintainerStates,proto3" json:"maintainer_states"`
}

func (m *ChainState) Reset()         { *m = ChainState{} }
func (m *ChainState) String() string { return proto.CompactTextString(m) }
func (*ChainState) ProtoMessage()    {}
func (*ChainState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecc98625accd1ae9, []int{1}
}
func (m *ChainState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainState.Merge(m, src)
}
func (m *ChainState) XXX_Size() int {
	return m.Size()
}
func (m *ChainState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainState.DiscardUnknown(m)
}

var xxx_messageInfo_ChainState proto.InternalMessageInfo

type LinkedAddresses struct {
	DepositAddress   exported.CrossChainAddress `protobuf:"bytes,1,opt,name=deposit_address,json=depositAddress,proto3" json:"deposit_address"`
	RecipientAddress exported.CrossChainAddress `protobuf:"bytes,2,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address"`
}

func (m *LinkedAddresses) Reset()         { *m = LinkedAddresses{} }
func (m *LinkedAddresses) String() string { return proto.CompactTextString(m) }
func (*LinkedAddresses) ProtoMessage()    {}
func (*LinkedAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecc98625accd1ae9, []int{2}
}
func (m *LinkedAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkedAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkedAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkedAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkedAddresses.Merge(m, src)
}
func (m *LinkedAddresses) XXX_Size() int {
	return m.Size()
}
func (m *LinkedAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkedAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_LinkedAddresses proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MaintainerState)(nil), "axelar.nexus.v1beta1.MaintainerState")
	proto.RegisterType((*ChainState)(nil), "axelar.nexus.v1beta1.ChainState")
	proto.RegisterType((*LinkedAddresses)(nil), "axelar.nexus.v1beta1.LinkedAddresses")
}

func init() { proto.RegisterFile("axelar/nexus/v1beta1/types.proto", fileDescriptor_ecc98625accd1ae9) }

var fileDescriptor_ecc98625accd1ae9 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0x67, 0xf9, 0x67, 0x1d, 0x50, 0xe8, 0xa6, 0x07, 0x42, 0x9a, 0x2d, 0x12, 0x4d, 0xf0, 0xc0,
	0xae, 0xd0, 0x2f, 0x60, 0xf1, 0x60, 0x62, 0x35, 0x31, 0x18, 0x1b, 0xe3, 0x85, 0x0c, 0xb3, 0x2f,
	0x74, 0x02, 0x3b, 0xb3, 0x99, 0x37, 0x20, 0x7e, 0x0b, 0x3f, 0x16, 0xc7, 0xde, 0xf4, 0xd4, 0x28,
	0x1c, 0xfc, 0x02, 0x9e, 0x3c, 0x99, 0x9d, 0x1d, 0xfe, 0x99, 0x26, 0xd6, 0xf4, 0x04, 0xf3, 0xf6,
	0xf7, 0xe7, 0xbd, 0xdf, 0xbc, 0x21, 0x0d, 0x3a, 0x87, 0x09, 0x55, 0x81, 0x80, 0xf9, 0x14, 0x83,
	0x59, 0x67, 0x08, 0x9a, 0x76, 0x02, 0xfd, 0x39, 0x06, 0xf4, 0x63, 0x25, 0xb5, 0x74, 0x8f, 0x52,
	0x84, 0x6f, 0x10, 0xbe, 0x45, 0xd4, 0x8f, 0x46, 0x72, 0x24, 0x0d, 0x20, 0x48, 0xfe, 0xa5, 0xd8,
	0xba, 0xc7, 0x24, 0x46, 0x12, 0x83, 0x21, 0x45, 0xd8, 0x88, 0x31, 0xc9, 0x85, 0xfd, 0xfe, 0x74,
	0xcf, 0x0d, 0xe6, 0xb1, 0x54, 0x1a, 0xc2, 0x9b, 0x6c, 0xeb, 0x8f, 0x2c, 0x74, 0xaa, 0xf9, 0x64,
	0xdb, 0xd8, 0x90, 0xeb, 0x88, 0xc6, 0x29, 0xa4, 0xf9, 0xcb, 0x21, 0x95, 0x37, 0x94, 0x0b, 0x4d,
	0xb9, 0x00, 0xf5, 0x4e, 0x53, 0x0d, 0xee, 0x39, 0xb9, 0x47, 0xc3, 0x50, 0x01, 0x62, 0xcd, 0x69,
	0x38, 0xad, 0x72, 0xaf, 0xf3, 0xfb, 0xfa, 0xa4, 0x3d, 0xe2, 0xfa, 0x72, 0x3a, 0xf4, 0x99, 0x8c,
	0x02, 0xdb, 0x61, 0xfa, 0xd3, 0xc6, 0x70, 0x6c, 0x5d, 0x2f, 0xe8, 0xe4, 0x2c, 0x25, 0xf6, 0xd7,
	0x0a, 0xee, 0x4b, 0xf2, 0x20, 0xe2, 0x88, 0x5c, 0x8c, 0x06, 0x33, 0xa9, 0x01, 0x6b, 0xd9, 0x86,
	0xd3, 0x2a, 0x75, 0x8f, 0x7d, 0x1b, 0x89, 0xe9, 0x6d, 0x1d, 0x89, 0xdf, 0x33, 0xbd, 0xf5, 0xf2,
	0x8b, 0xeb, 0x93, 0x4c, 0xbf, 0x6c, 0x89, 0x17, 0x09, 0xcf, 0x3d, 0x27, 0x15, 0x2e, 0x98, 0x54,
	0x0a, 0x98, 0xb6, 0x52, 0xb9, 0x5b, 0x4b, 0x3d, 0xdc, 0x50, 0x8d, 0x58, 0xf3, 0x67, 0x96, 0x90,
	0x17, 0x97, 0x94, 0x8b, 0x74, 0xe2, 0xe7, 0xa4, 0xc0, 0x92, 0x93, 0x99, 0xb7, 0xd4, 0x7d, 0xec,
	0xef, 0xdd, 0xd7, 0x3a, 0xe3, 0x8d, 0xb4, 0x61, 0x5a, 0xe5, 0x94, 0xe8, 0xbe, 0x27, 0xa5, 0x68,
	0x13, 0x63, 0x32, 0x64, 0xae, 0x55, 0xee, 0x9d, 0xfe, 0x77, 0x6e, 0x35, 0xa7, 0xbf, 0xab, 0xe3,
	0x1e, 0x93, 0xfb, 0x94, 0x69, 0x3e, 0xa3, 0x1a, 0x42, 0x33, 0xee, 0x41, 0x7f, 0x5b, 0x70, 0x7b,
	0xa4, 0x48, 0x11, 0x41, 0x63, 0xad, 0xd0, 0xc8, 0xdd, 0xa2, 0xef, 0xb3, 0x04, 0x6c, 0xfb, 0xb6,
	0x4c, 0xf7, 0x03, 0x39, 0xdc, 0x1a, 0x0e, 0x30, 0x89, 0x03, 0x6b, 0x45, 0x23, 0xf7, 0xc4, 0xbf,
	0x69, 0x6d, 0xfd, 0xbf, 0xd6, 0xc5, 0xea, 0x55, 0xa3, 0xfd, 0x32, 0xbe, 0xca, 0x1f, 0xe4, 0xab,
	0x85, 0xe6, 0x57, 0x87, 0x54, 0x5e, 0x73, 0x31, 0x86, 0xd0, 0x8e, 0x08, 0xe8, 0x0e, 0x48, 0x25,
	0x84, 0x58, 0x22, 0xd7, 0x83, 0xdd, 0x45, 0x2b, 0x75, 0x9f, 0xfd, 0x2b, 0x78, 0x25, 0x11, 0x4d,
	0xfa, 0x56, 0x6c, 0x7d, 0xbd, 0x56, 0xce, 0x56, 0x5d, 0x46, 0x0e, 0x15, 0x30, 0x1e, 0x73, 0x10,
	0x5b, 0x8b, 0xec, 0x9d, 0x2c, 0xaa, 0x1b, 0xc1, 0x75, 0xfd, 0xed, 0xe2, 0x87, 0x97, 0x59, 0x2c,
	0x3d, 0xe7, 0x6a, 0xe9, 0x39, 0xdf, 0x97, 0x9e, 0xf3, 0x65, 0xe5, 0x65, 0xae, 0x56, 0x5e, 0xe6,
	0xdb, 0xca, 0xcb, 0x7c, 0xec, 0xee, 0xdc, 0x7b, 0xea, 0x28, 0x40, 0x7f, 0x92, 0x6a, 0x6c, 0x4f,
	0x6d, 0x26, 0x15, 0x04, 0x73, 0xfb, 0x8c, 0xcd, 0x1e, 0x0c, 0x8b, 0xe6, 0x4d, 0x9e, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0x61, 0x3d, 0x21, 0x51, 0x04, 0x00, 0x00,
}

func (m *MaintainerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IncorrectVotes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MissingVotes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaintainerStates) > 0 {
		for iNdEx := len(m.MaintainerStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaintainerStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Activated {
		i--
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Maintainers) > 0 {
		for iNdEx := len(m.Maintainers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Maintainers[iNdEx])
			copy(dAtA[i:], m.Maintainers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Maintainers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LinkedAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkedAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkedAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RecipientAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.DepositAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MaintainerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.MissingVotes.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.IncorrectVotes.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *ChainState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Chain.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Maintainers) > 0 {
		for _, b := range m.Maintainers {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Activated {
		n += 2
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.MaintainerStates) > 0 {
		for _, e := range m.MaintainerStates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *LinkedAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DepositAddress.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RecipientAddress.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MaintainerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MissingVotes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncorrectVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncorrectVotes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maintainers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maintainers = append(m.Maintainers, make([]byte, postIndex-iNdEx))
			copy(m.Maintainers[len(m.Maintainers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, exported.Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintainerStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaintainerStates = append(m.MaintainerStates, MaintainerState{})
			if err := m.MaintainerStates[len(m.MaintainerStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkedAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkedAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkedAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecipientAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
