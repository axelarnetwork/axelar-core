// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	context "context"
	axelarnettypes "github.com/axelarnetwork/axelar-core/x/axelarnet/types"
	evm "github.com/axelarnetwork/axelar-core/x/evm/types"
	exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	nexustypes "github.com/axelarnetwork/axelar-core/x/nexus/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	"github.com/tendermint/tendermint/libs/log"
	"sync"
)

// Ensure, that NexusMock does implement nexustypes.Nexus.
// If this is not the case, regenerate this file with moq.
var _ nexustypes.Nexus = &NexusMock{}

// NexusMock is a mock implementation of nexustypes.Nexus.
//
// 	func TestSomethingThatUsesNexus(t *testing.T) {
//
// 		// make and configure a mocked nexustypes.Nexus
// 		mockedNexus := &NexusMock{
// 			ActivateChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain)  {
// 				panic("mock out the ActivateChain method")
// 			},
// 			AddChainMaintainerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, validator github_com_cosmos_cosmos_sdk_types.ValAddress) error {
// 				panic("mock out the AddChainMaintainer method")
// 			},
// 			DeactivateChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain)  {
// 				panic("mock out the DeactivateChain method")
// 			},
// 			ExportGenesisFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) *nexustypes.GenesisState {
// 				panic("mock out the ExportGenesis method")
// 			},
// 			GetChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (exported.Chain, bool) {
// 				panic("mock out the GetChain method")
// 			},
// 			GetChainMaintainersFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) []github_com_cosmos_cosmos_sdk_types.ValAddress {
// 				panic("mock out the GetChainMaintainers method")
// 			},
// 			GetChainsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) []exported.Chain {
// 				panic("mock out the GetChains method")
// 			},
// 			GetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) nexustypes.Params {
// 				panic("mock out the GetParams method")
// 			},
// 			InitGenesisFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, genState *nexustypes.GenesisState)  {
// 				panic("mock out the InitGenesis method")
// 			},
// 			IsChainActivatedFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) bool {
// 				panic("mock out the IsChainActivated method")
// 			},
// 			IsChainMaintainerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, maintainer github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
// 				panic("mock out the IsChainMaintainer method")
// 			},
// 			LatestDepositAddressFunc: func(c context.Context, req *nexustypes.LatestDepositAddressRequest) (*nexustypes.LatestDepositAddressResponse, error) {
// 				panic("mock out the LatestDepositAddress method")
// 			},
// 			LinkAddressesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender exported.CrossChainAddress, recipient exported.CrossChainAddress) error {
// 				panic("mock out the LinkAddresses method")
// 			},
// 			LoggerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
// 				panic("mock out the Logger method")
// 			},
// 			RemoveChainMaintainerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, validator github_com_cosmos_cosmos_sdk_types.ValAddress) error {
// 				panic("mock out the RemoveChainMaintainer method")
// 			},
// 			SetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, p nexustypes.Params)  {
// 				panic("mock out the SetParams method")
// 			},
// 		}
//
// 		// use mockedNexus in code that requires nexustypes.Nexus
// 		// and then make assertions.
//
// 	}
type NexusMock struct {
	// ActivateChainFunc mocks the ActivateChain method.
	ActivateChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain)

	// AddChainMaintainerFunc mocks the AddChainMaintainer method.
	AddChainMaintainerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, validator github_com_cosmos_cosmos_sdk_types.ValAddress) error

	// DeactivateChainFunc mocks the DeactivateChain method.
	DeactivateChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain)

	// ExportGenesisFunc mocks the ExportGenesis method.
	ExportGenesisFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) *nexustypes.GenesisState

	// GetChainFunc mocks the GetChain method.
	GetChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (exported.Chain, bool)

	// GetChainMaintainersFunc mocks the GetChainMaintainers method.
	GetChainMaintainersFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) []github_com_cosmos_cosmos_sdk_types.ValAddress

	// GetChainsFunc mocks the GetChains method.
	GetChainsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) []exported.Chain

	// GetParamsFunc mocks the GetParams method.
	GetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) nexustypes.Params

	// InitGenesisFunc mocks the InitGenesis method.
	InitGenesisFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, genState *nexustypes.GenesisState)

	// IsChainActivatedFunc mocks the IsChainActivated method.
	IsChainActivatedFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) bool

	// IsChainMaintainerFunc mocks the IsChainMaintainer method.
	IsChainMaintainerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, maintainer github_com_cosmos_cosmos_sdk_types.ValAddress) bool

	// LatestDepositAddressFunc mocks the LatestDepositAddress method.
	LatestDepositAddressFunc func(c context.Context, req *nexustypes.LatestDepositAddressRequest) (*nexustypes.LatestDepositAddressResponse, error)

	// LinkAddressesFunc mocks the LinkAddresses method.
	LinkAddressesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender exported.CrossChainAddress, recipient exported.CrossChainAddress) error

	// LoggerFunc mocks the Logger method.
	LoggerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger

	// RemoveChainMaintainerFunc mocks the RemoveChainMaintainer method.
	RemoveChainMaintainerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, validator github_com_cosmos_cosmos_sdk_types.ValAddress) error

	// SetParamsFunc mocks the SetParams method.
	SetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, p nexustypes.Params)

	// calls tracks calls to the methods.
	calls struct {
		// ActivateChain holds details about calls to the ActivateChain method.
		ActivateChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain exported.Chain
		}
		// AddChainMaintainer holds details about calls to the AddChainMaintainer method.
		AddChainMaintainer []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain exported.Chain
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// DeactivateChain holds details about calls to the DeactivateChain method.
		DeactivateChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain exported.Chain
		}
		// ExportGenesis holds details about calls to the ExportGenesis method.
		ExportGenesis []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetChain holds details about calls to the GetChain method.
		GetChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetChainMaintainers holds details about calls to the GetChainMaintainers method.
		GetChainMaintainers []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain exported.Chain
		}
		// GetChains holds details about calls to the GetChains method.
		GetChains []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetParams holds details about calls to the GetParams method.
		GetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// InitGenesis holds details about calls to the InitGenesis method.
		InitGenesis []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// GenState is the genState argument value.
			GenState *nexustypes.GenesisState
		}
		// IsChainActivated holds details about calls to the IsChainActivated method.
		IsChainActivated []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain exported.Chain
		}
		// IsChainMaintainer holds details about calls to the IsChainMaintainer method.
		IsChainMaintainer []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain exported.Chain
			// Maintainer is the maintainer argument value.
			Maintainer github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// LatestDepositAddress holds details about calls to the LatestDepositAddress method.
		LatestDepositAddress []struct {
			// C is the c argument value.
			C context.Context
			// Req is the req argument value.
			Req *nexustypes.LatestDepositAddressRequest
		}
		// LinkAddresses holds details about calls to the LinkAddresses method.
		LinkAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender exported.CrossChainAddress
			// Recipient is the recipient argument value.
			Recipient exported.CrossChainAddress
		}
		// Logger holds details about calls to the Logger method.
		Logger []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// RemoveChainMaintainer holds details about calls to the RemoveChainMaintainer method.
		RemoveChainMaintainer []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain exported.Chain
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// SetParams holds details about calls to the SetParams method.
		SetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// P is the p argument value.
			P nexustypes.Params
		}
	}
	lockActivateChain         sync.RWMutex
	lockAddChainMaintainer    sync.RWMutex
	lockDeactivateChain       sync.RWMutex
	lockExportGenesis         sync.RWMutex
	lockGetChain              sync.RWMutex
	lockGetChainMaintainers   sync.RWMutex
	lockGetChains             sync.RWMutex
	lockGetParams             sync.RWMutex
	lockInitGenesis           sync.RWMutex
	lockIsChainActivated      sync.RWMutex
	lockIsChainMaintainer     sync.RWMutex
	lockLatestDepositAddress  sync.RWMutex
	lockLinkAddresses         sync.RWMutex
	lockLogger                sync.RWMutex
	lockRemoveChainMaintainer sync.RWMutex
	lockSetParams             sync.RWMutex
}

// ActivateChain calls ActivateChainFunc.
func (mock *NexusMock) ActivateChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) {
	if mock.ActivateChainFunc == nil {
		panic("NexusMock.ActivateChainFunc: method is nil but Nexus.ActivateChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockActivateChain.Lock()
	mock.calls.ActivateChain = append(mock.calls.ActivateChain, callInfo)
	mock.lockActivateChain.Unlock()
	mock.ActivateChainFunc(ctx, chain)
}

// ActivateChainCalls gets all the calls that were made to ActivateChain.
// Check the length with:
//     len(mockedNexus.ActivateChainCalls())
func (mock *NexusMock) ActivateChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain exported.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}
	mock.lockActivateChain.RLock()
	calls = mock.calls.ActivateChain
	mock.lockActivateChain.RUnlock()
	return calls
}

// AddChainMaintainer calls AddChainMaintainerFunc.
func (mock *NexusMock) AddChainMaintainer(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, validator github_com_cosmos_cosmos_sdk_types.ValAddress) error {
	if mock.AddChainMaintainerFunc == nil {
		panic("NexusMock.AddChainMaintainerFunc: method is nil but Nexus.AddChainMaintainer was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Chain     exported.Chain
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		Chain:     chain,
		Validator: validator,
	}
	mock.lockAddChainMaintainer.Lock()
	mock.calls.AddChainMaintainer = append(mock.calls.AddChainMaintainer, callInfo)
	mock.lockAddChainMaintainer.Unlock()
	return mock.AddChainMaintainerFunc(ctx, chain, validator)
}

// AddChainMaintainerCalls gets all the calls that were made to AddChainMaintainer.
// Check the length with:
//     len(mockedNexus.AddChainMaintainerCalls())
func (mock *NexusMock) AddChainMaintainerCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Chain     exported.Chain
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Chain     exported.Chain
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockAddChainMaintainer.RLock()
	calls = mock.calls.AddChainMaintainer
	mock.lockAddChainMaintainer.RUnlock()
	return calls
}

// DeactivateChain calls DeactivateChainFunc.
func (mock *NexusMock) DeactivateChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) {
	if mock.DeactivateChainFunc == nil {
		panic("NexusMock.DeactivateChainFunc: method is nil but Nexus.DeactivateChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockDeactivateChain.Lock()
	mock.calls.DeactivateChain = append(mock.calls.DeactivateChain, callInfo)
	mock.lockDeactivateChain.Unlock()
	mock.DeactivateChainFunc(ctx, chain)
}

// DeactivateChainCalls gets all the calls that were made to DeactivateChain.
// Check the length with:
//     len(mockedNexus.DeactivateChainCalls())
func (mock *NexusMock) DeactivateChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain exported.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}
	mock.lockDeactivateChain.RLock()
	calls = mock.calls.DeactivateChain
	mock.lockDeactivateChain.RUnlock()
	return calls
}

// ExportGenesis calls ExportGenesisFunc.
func (mock *NexusMock) ExportGenesis(ctx github_com_cosmos_cosmos_sdk_types.Context) *nexustypes.GenesisState {
	if mock.ExportGenesisFunc == nil {
		panic("NexusMock.ExportGenesisFunc: method is nil but Nexus.ExportGenesis was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockExportGenesis.Lock()
	mock.calls.ExportGenesis = append(mock.calls.ExportGenesis, callInfo)
	mock.lockExportGenesis.Unlock()
	return mock.ExportGenesisFunc(ctx)
}

// ExportGenesisCalls gets all the calls that were made to ExportGenesis.
// Check the length with:
//     len(mockedNexus.ExportGenesisCalls())
func (mock *NexusMock) ExportGenesisCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockExportGenesis.RLock()
	calls = mock.calls.ExportGenesis
	mock.lockExportGenesis.RUnlock()
	return calls
}

// GetChain calls GetChainFunc.
func (mock *NexusMock) GetChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (exported.Chain, bool) {
	if mock.GetChainFunc == nil {
		panic("NexusMock.GetChainFunc: method is nil but Nexus.GetChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChain.Lock()
	mock.calls.GetChain = append(mock.calls.GetChain, callInfo)
	mock.lockGetChain.Unlock()
	return mock.GetChainFunc(ctx, chain)
}

// GetChainCalls gets all the calls that were made to GetChain.
// Check the length with:
//     len(mockedNexus.GetChainCalls())
func (mock *NexusMock) GetChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetChain.RLock()
	calls = mock.calls.GetChain
	mock.lockGetChain.RUnlock()
	return calls
}

// GetChainMaintainers calls GetChainMaintainersFunc.
func (mock *NexusMock) GetChainMaintainers(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if mock.GetChainMaintainersFunc == nil {
		panic("NexusMock.GetChainMaintainersFunc: method is nil but Nexus.GetChainMaintainers was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChainMaintainers.Lock()
	mock.calls.GetChainMaintainers = append(mock.calls.GetChainMaintainers, callInfo)
	mock.lockGetChainMaintainers.Unlock()
	return mock.GetChainMaintainersFunc(ctx, chain)
}

// GetChainMaintainersCalls gets all the calls that were made to GetChainMaintainers.
// Check the length with:
//     len(mockedNexus.GetChainMaintainersCalls())
func (mock *NexusMock) GetChainMaintainersCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain exported.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}
	mock.lockGetChainMaintainers.RLock()
	calls = mock.calls.GetChainMaintainers
	mock.lockGetChainMaintainers.RUnlock()
	return calls
}

// GetChains calls GetChainsFunc.
func (mock *NexusMock) GetChains(ctx github_com_cosmos_cosmos_sdk_types.Context) []exported.Chain {
	if mock.GetChainsFunc == nil {
		panic("NexusMock.GetChainsFunc: method is nil but Nexus.GetChains was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetChains.Lock()
	mock.calls.GetChains = append(mock.calls.GetChains, callInfo)
	mock.lockGetChains.Unlock()
	return mock.GetChainsFunc(ctx)
}

// GetChainsCalls gets all the calls that were made to GetChains.
// Check the length with:
//     len(mockedNexus.GetChainsCalls())
func (mock *NexusMock) GetChainsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetChains.RLock()
	calls = mock.calls.GetChains
	mock.lockGetChains.RUnlock()
	return calls
}

// GetParams calls GetParamsFunc.
func (mock *NexusMock) GetParams(ctx github_com_cosmos_cosmos_sdk_types.Context) nexustypes.Params {
	if mock.GetParamsFunc == nil {
		panic("NexusMock.GetParamsFunc: method is nil but Nexus.GetParams was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetParams.Lock()
	mock.calls.GetParams = append(mock.calls.GetParams, callInfo)
	mock.lockGetParams.Unlock()
	return mock.GetParamsFunc(ctx)
}

// GetParamsCalls gets all the calls that were made to GetParams.
// Check the length with:
//     len(mockedNexus.GetParamsCalls())
func (mock *NexusMock) GetParamsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetParams.RLock()
	calls = mock.calls.GetParams
	mock.lockGetParams.RUnlock()
	return calls
}

// InitGenesis calls InitGenesisFunc.
func (mock *NexusMock) InitGenesis(ctx github_com_cosmos_cosmos_sdk_types.Context, genState *nexustypes.GenesisState) {
	if mock.InitGenesisFunc == nil {
		panic("NexusMock.InitGenesisFunc: method is nil but Nexus.InitGenesis was just called")
	}
	callInfo := struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		GenState *nexustypes.GenesisState
	}{
		Ctx:      ctx,
		GenState: genState,
	}
	mock.lockInitGenesis.Lock()
	mock.calls.InitGenesis = append(mock.calls.InitGenesis, callInfo)
	mock.lockInitGenesis.Unlock()
	mock.InitGenesisFunc(ctx, genState)
}

// InitGenesisCalls gets all the calls that were made to InitGenesis.
// Check the length with:
//     len(mockedNexus.InitGenesisCalls())
func (mock *NexusMock) InitGenesisCalls() []struct {
	Ctx      github_com_cosmos_cosmos_sdk_types.Context
	GenState *nexustypes.GenesisState
} {
	var calls []struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		GenState *nexustypes.GenesisState
	}
	mock.lockInitGenesis.RLock()
	calls = mock.calls.InitGenesis
	mock.lockInitGenesis.RUnlock()
	return calls
}

// IsChainActivated calls IsChainActivatedFunc.
func (mock *NexusMock) IsChainActivated(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain) bool {
	if mock.IsChainActivatedFunc == nil {
		panic("NexusMock.IsChainActivatedFunc: method is nil but Nexus.IsChainActivated was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockIsChainActivated.Lock()
	mock.calls.IsChainActivated = append(mock.calls.IsChainActivated, callInfo)
	mock.lockIsChainActivated.Unlock()
	return mock.IsChainActivatedFunc(ctx, chain)
}

// IsChainActivatedCalls gets all the calls that were made to IsChainActivated.
// Check the length with:
//     len(mockedNexus.IsChainActivatedCalls())
func (mock *NexusMock) IsChainActivatedCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain exported.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain exported.Chain
	}
	mock.lockIsChainActivated.RLock()
	calls = mock.calls.IsChainActivated
	mock.lockIsChainActivated.RUnlock()
	return calls
}

// IsChainMaintainer calls IsChainMaintainerFunc.
func (mock *NexusMock) IsChainMaintainer(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, maintainer github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
	if mock.IsChainMaintainerFunc == nil {
		panic("NexusMock.IsChainMaintainerFunc: method is nil but Nexus.IsChainMaintainer was just called")
	}
	callInfo := struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		Chain      exported.Chain
		Maintainer github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:        ctx,
		Chain:      chain,
		Maintainer: maintainer,
	}
	mock.lockIsChainMaintainer.Lock()
	mock.calls.IsChainMaintainer = append(mock.calls.IsChainMaintainer, callInfo)
	mock.lockIsChainMaintainer.Unlock()
	return mock.IsChainMaintainerFunc(ctx, chain, maintainer)
}

// IsChainMaintainerCalls gets all the calls that were made to IsChainMaintainer.
// Check the length with:
//     len(mockedNexus.IsChainMaintainerCalls())
func (mock *NexusMock) IsChainMaintainerCalls() []struct {
	Ctx        github_com_cosmos_cosmos_sdk_types.Context
	Chain      exported.Chain
	Maintainer github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		Chain      exported.Chain
		Maintainer github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockIsChainMaintainer.RLock()
	calls = mock.calls.IsChainMaintainer
	mock.lockIsChainMaintainer.RUnlock()
	return calls
}

// LatestDepositAddress calls LatestDepositAddressFunc.
func (mock *NexusMock) LatestDepositAddress(c context.Context, req *nexustypes.LatestDepositAddressRequest) (*nexustypes.LatestDepositAddressResponse, error) {
	if mock.LatestDepositAddressFunc == nil {
		panic("NexusMock.LatestDepositAddressFunc: method is nil but Nexus.LatestDepositAddress was just called")
	}
	callInfo := struct {
		C   context.Context
		Req *nexustypes.LatestDepositAddressRequest
	}{
		C:   c,
		Req: req,
	}
	mock.lockLatestDepositAddress.Lock()
	mock.calls.LatestDepositAddress = append(mock.calls.LatestDepositAddress, callInfo)
	mock.lockLatestDepositAddress.Unlock()
	return mock.LatestDepositAddressFunc(c, req)
}

// LatestDepositAddressCalls gets all the calls that were made to LatestDepositAddress.
// Check the length with:
//     len(mockedNexus.LatestDepositAddressCalls())
func (mock *NexusMock) LatestDepositAddressCalls() []struct {
	C   context.Context
	Req *nexustypes.LatestDepositAddressRequest
} {
	var calls []struct {
		C   context.Context
		Req *nexustypes.LatestDepositAddressRequest
	}
	mock.lockLatestDepositAddress.RLock()
	calls = mock.calls.LatestDepositAddress
	mock.lockLatestDepositAddress.RUnlock()
	return calls
}

// LinkAddresses calls LinkAddressesFunc.
func (mock *NexusMock) LinkAddresses(ctx github_com_cosmos_cosmos_sdk_types.Context, sender exported.CrossChainAddress, recipient exported.CrossChainAddress) error {
	if mock.LinkAddressesFunc == nil {
		panic("NexusMock.LinkAddressesFunc: method is nil but Nexus.LinkAddresses was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Sender    exported.CrossChainAddress
		Recipient exported.CrossChainAddress
	}{
		Ctx:       ctx,
		Sender:    sender,
		Recipient: recipient,
	}
	mock.lockLinkAddresses.Lock()
	mock.calls.LinkAddresses = append(mock.calls.LinkAddresses, callInfo)
	mock.lockLinkAddresses.Unlock()
	return mock.LinkAddressesFunc(ctx, sender, recipient)
}

// LinkAddressesCalls gets all the calls that were made to LinkAddresses.
// Check the length with:
//     len(mockedNexus.LinkAddressesCalls())
func (mock *NexusMock) LinkAddressesCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Sender    exported.CrossChainAddress
	Recipient exported.CrossChainAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Sender    exported.CrossChainAddress
		Recipient exported.CrossChainAddress
	}
	mock.lockLinkAddresses.RLock()
	calls = mock.calls.LinkAddresses
	mock.lockLinkAddresses.RUnlock()
	return calls
}

// Logger calls LoggerFunc.
func (mock *NexusMock) Logger(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
	if mock.LoggerFunc == nil {
		panic("NexusMock.LoggerFunc: method is nil but Nexus.Logger was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogger.Lock()
	mock.calls.Logger = append(mock.calls.Logger, callInfo)
	mock.lockLogger.Unlock()
	return mock.LoggerFunc(ctx)
}

// LoggerCalls gets all the calls that were made to Logger.
// Check the length with:
//     len(mockedNexus.LoggerCalls())
func (mock *NexusMock) LoggerCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockLogger.RLock()
	calls = mock.calls.Logger
	mock.lockLogger.RUnlock()
	return calls
}

// RemoveChainMaintainer calls RemoveChainMaintainerFunc.
func (mock *NexusMock) RemoveChainMaintainer(ctx github_com_cosmos_cosmos_sdk_types.Context, chain exported.Chain, validator github_com_cosmos_cosmos_sdk_types.ValAddress) error {
	if mock.RemoveChainMaintainerFunc == nil {
		panic("NexusMock.RemoveChainMaintainerFunc: method is nil but Nexus.RemoveChainMaintainer was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Chain     exported.Chain
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		Chain:     chain,
		Validator: validator,
	}
	mock.lockRemoveChainMaintainer.Lock()
	mock.calls.RemoveChainMaintainer = append(mock.calls.RemoveChainMaintainer, callInfo)
	mock.lockRemoveChainMaintainer.Unlock()
	return mock.RemoveChainMaintainerFunc(ctx, chain, validator)
}

// RemoveChainMaintainerCalls gets all the calls that were made to RemoveChainMaintainer.
// Check the length with:
//     len(mockedNexus.RemoveChainMaintainerCalls())
func (mock *NexusMock) RemoveChainMaintainerCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Chain     exported.Chain
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Chain     exported.Chain
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockRemoveChainMaintainer.RLock()
	calls = mock.calls.RemoveChainMaintainer
	mock.lockRemoveChainMaintainer.RUnlock()
	return calls
}

// SetParams calls SetParamsFunc.
func (mock *NexusMock) SetParams(ctx github_com_cosmos_cosmos_sdk_types.Context, p nexustypes.Params) {
	if mock.SetParamsFunc == nil {
		panic("NexusMock.SetParamsFunc: method is nil but Nexus.SetParams was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		P   nexustypes.Params
	}{
		Ctx: ctx,
		P:   p,
	}
	mock.lockSetParams.Lock()
	mock.calls.SetParams = append(mock.calls.SetParams, callInfo)
	mock.lockSetParams.Unlock()
	mock.SetParamsFunc(ctx, p)
}

// SetParamsCalls gets all the calls that were made to SetParams.
// Check the length with:
//     len(mockedNexus.SetParamsCalls())
func (mock *NexusMock) SetParamsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	P   nexustypes.Params
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		P   nexustypes.Params
	}
	mock.lockSetParams.RLock()
	calls = mock.calls.SetParams
	mock.lockSetParams.RUnlock()
	return calls
}

// Ensure, that SnapshotterMock does implement nexustypes.Snapshotter.
// If this is not the case, regenerate this file with moq.
var _ nexustypes.Snapshotter = &SnapshotterMock{}

// SnapshotterMock is a mock implementation of nexustypes.Snapshotter.
//
// 	func TestSomethingThatUsesSnapshotter(t *testing.T) {
//
// 		// make and configure a mocked nexustypes.Snapshotter
// 		mockedSnapshotter := &SnapshotterMock{
// 			GetOperatorFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress {
// 				panic("mock out the GetOperator method")
// 			},
// 		}
//
// 		// use mockedSnapshotter in code that requires nexustypes.Snapshotter
// 		// and then make assertions.
//
// 	}
type SnapshotterMock struct {
	// GetOperatorFunc mocks the GetOperator method.
	GetOperatorFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress

	// calls tracks calls to the methods.
	calls struct {
		// GetOperator holds details about calls to the GetOperator method.
		GetOperator []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Proxy is the proxy argument value.
			Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
		}
	}
	lockGetOperator sync.RWMutex
}

// GetOperator calls GetOperatorFunc.
func (mock *SnapshotterMock) GetOperator(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress {
	if mock.GetOperatorFunc == nil {
		panic("SnapshotterMock.GetOperatorFunc: method is nil but Snapshotter.GetOperator was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
	}{
		Ctx:   ctx,
		Proxy: proxy,
	}
	mock.lockGetOperator.Lock()
	mock.calls.GetOperator = append(mock.calls.GetOperator, callInfo)
	mock.lockGetOperator.Unlock()
	return mock.GetOperatorFunc(ctx, proxy)
}

// GetOperatorCalls gets all the calls that were made to GetOperator.
// Check the length with:
//     len(mockedSnapshotter.GetOperatorCalls())
func (mock *SnapshotterMock) GetOperatorCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
	}
	mock.lockGetOperator.RLock()
	calls = mock.calls.GetOperator
	mock.lockGetOperator.RUnlock()
	return calls
}

// Ensure, that AxelarnetKeeperMock does implement nexustypes.AxelarnetKeeper.
// If this is not the case, regenerate this file with moq.
var _ nexustypes.AxelarnetKeeper = &AxelarnetKeeperMock{}

// AxelarnetKeeperMock is a mock implementation of nexustypes.AxelarnetKeeper.
//
// 	func TestSomethingThatUsesAxelarnetKeeper(t *testing.T) {
//
// 		// make and configure a mocked nexustypes.AxelarnetKeeper
// 		mockedAxelarnetKeeper := &AxelarnetKeeperMock{
// 			GetCosmosChainByNameFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (axelarnettypes.CosmosChain, bool) {
// 				panic("mock out the GetCosmosChainByName method")
// 			},
// 			GetCosmosChainsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) []string {
// 				panic("mock out the GetCosmosChains method")
// 			},
// 			GetFeeCollectorFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool) {
// 				panic("mock out the GetFeeCollector method")
// 			},
// 			IsCosmosChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) bool {
// 				panic("mock out the IsCosmosChain method")
// 			},
// 		}
//
// 		// use mockedAxelarnetKeeper in code that requires nexustypes.AxelarnetKeeper
// 		// and then make assertions.
//
// 	}
type AxelarnetKeeperMock struct {
	// GetCosmosChainByNameFunc mocks the GetCosmosChainByName method.
	GetCosmosChainByNameFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (axelarnettypes.CosmosChain, bool)

	// GetCosmosChainsFunc mocks the GetCosmosChains method.
	GetCosmosChainsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) []string

	// GetFeeCollectorFunc mocks the GetFeeCollector method.
	GetFeeCollectorFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool)

	// IsCosmosChainFunc mocks the IsCosmosChain method.
	IsCosmosChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) bool

	// calls tracks calls to the methods.
	calls struct {
		// GetCosmosChainByName holds details about calls to the GetCosmosChainByName method.
		GetCosmosChainByName []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetCosmosChains holds details about calls to the GetCosmosChains method.
		GetCosmosChains []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetFeeCollector holds details about calls to the GetFeeCollector method.
		GetFeeCollector []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// IsCosmosChain holds details about calls to the IsCosmosChain method.
		IsCosmosChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
	}
	lockGetCosmosChainByName sync.RWMutex
	lockGetCosmosChains      sync.RWMutex
	lockGetFeeCollector      sync.RWMutex
	lockIsCosmosChain        sync.RWMutex
}

// GetCosmosChainByName calls GetCosmosChainByNameFunc.
func (mock *AxelarnetKeeperMock) GetCosmosChainByName(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (axelarnettypes.CosmosChain, bool) {
	if mock.GetCosmosChainByNameFunc == nil {
		panic("AxelarnetKeeperMock.GetCosmosChainByNameFunc: method is nil but AxelarnetKeeper.GetCosmosChainByName was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetCosmosChainByName.Lock()
	mock.calls.GetCosmosChainByName = append(mock.calls.GetCosmosChainByName, callInfo)
	mock.lockGetCosmosChainByName.Unlock()
	return mock.GetCosmosChainByNameFunc(ctx, chain)
}

// GetCosmosChainByNameCalls gets all the calls that were made to GetCosmosChainByName.
// Check the length with:
//     len(mockedAxelarnetKeeper.GetCosmosChainByNameCalls())
func (mock *AxelarnetKeeperMock) GetCosmosChainByNameCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetCosmosChainByName.RLock()
	calls = mock.calls.GetCosmosChainByName
	mock.lockGetCosmosChainByName.RUnlock()
	return calls
}

// GetCosmosChains calls GetCosmosChainsFunc.
func (mock *AxelarnetKeeperMock) GetCosmosChains(ctx github_com_cosmos_cosmos_sdk_types.Context) []string {
	if mock.GetCosmosChainsFunc == nil {
		panic("AxelarnetKeeperMock.GetCosmosChainsFunc: method is nil but AxelarnetKeeper.GetCosmosChains was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetCosmosChains.Lock()
	mock.calls.GetCosmosChains = append(mock.calls.GetCosmosChains, callInfo)
	mock.lockGetCosmosChains.Unlock()
	return mock.GetCosmosChainsFunc(ctx)
}

// GetCosmosChainsCalls gets all the calls that were made to GetCosmosChains.
// Check the length with:
//     len(mockedAxelarnetKeeper.GetCosmosChainsCalls())
func (mock *AxelarnetKeeperMock) GetCosmosChainsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetCosmosChains.RLock()
	calls = mock.calls.GetCosmosChains
	mock.lockGetCosmosChains.RUnlock()
	return calls
}

// GetFeeCollector calls GetFeeCollectorFunc.
func (mock *AxelarnetKeeperMock) GetFeeCollector(ctx github_com_cosmos_cosmos_sdk_types.Context) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool) {
	if mock.GetFeeCollectorFunc == nil {
		panic("AxelarnetKeeperMock.GetFeeCollectorFunc: method is nil but AxelarnetKeeper.GetFeeCollector was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetFeeCollector.Lock()
	mock.calls.GetFeeCollector = append(mock.calls.GetFeeCollector, callInfo)
	mock.lockGetFeeCollector.Unlock()
	return mock.GetFeeCollectorFunc(ctx)
}

// GetFeeCollectorCalls gets all the calls that were made to GetFeeCollector.
// Check the length with:
//     len(mockedAxelarnetKeeper.GetFeeCollectorCalls())
func (mock *AxelarnetKeeperMock) GetFeeCollectorCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetFeeCollector.RLock()
	calls = mock.calls.GetFeeCollector
	mock.lockGetFeeCollector.RUnlock()
	return calls
}

// IsCosmosChain calls IsCosmosChainFunc.
func (mock *AxelarnetKeeperMock) IsCosmosChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) bool {
	if mock.IsCosmosChainFunc == nil {
		panic("AxelarnetKeeperMock.IsCosmosChainFunc: method is nil but AxelarnetKeeper.IsCosmosChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockIsCosmosChain.Lock()
	mock.calls.IsCosmosChain = append(mock.calls.IsCosmosChain, callInfo)
	mock.lockIsCosmosChain.Unlock()
	return mock.IsCosmosChainFunc(ctx, chain)
}

// IsCosmosChainCalls gets all the calls that were made to IsCosmosChain.
// Check the length with:
//     len(mockedAxelarnetKeeper.IsCosmosChainCalls())
func (mock *AxelarnetKeeperMock) IsCosmosChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockIsCosmosChain.RLock()
	calls = mock.calls.IsCosmosChain
	mock.lockIsCosmosChain.RUnlock()
	return calls
}

// Ensure, that EVMBaseKeeperMock does implement nexustypes.EVMBaseKeeper.
// If this is not the case, regenerate this file with moq.
var _ nexustypes.EVMBaseKeeper = &EVMBaseKeeperMock{}

// EVMBaseKeeperMock is a mock implementation of nexustypes.EVMBaseKeeper.
//
// 	func TestSomethingThatUsesEVMBaseKeeper(t *testing.T) {
//
// 		// make and configure a mocked nexustypes.EVMBaseKeeper
// 		mockedEVMBaseKeeper := &EVMBaseKeeperMock{
// 			ForChainFunc: func(chain string) evm.ChainKeeper {
// 				panic("mock out the ForChain method")
// 			},
// 		}
//
// 		// use mockedEVMBaseKeeper in code that requires nexustypes.EVMBaseKeeper
// 		// and then make assertions.
//
// 	}
type EVMBaseKeeperMock struct {
	// ForChainFunc mocks the ForChain method.
	ForChainFunc func(chain string) evm.ChainKeeper

	// calls tracks calls to the methods.
	calls struct {
		// ForChain holds details about calls to the ForChain method.
		ForChain []struct {
			// Chain is the chain argument value.
			Chain string
		}
	}
	lockForChain sync.RWMutex
}

// ForChain calls ForChainFunc.
func (mock *EVMBaseKeeperMock) ForChain(chain string) evm.ChainKeeper {
	if mock.ForChainFunc == nil {
		panic("EVMBaseKeeperMock.ForChainFunc: method is nil but EVMBaseKeeper.ForChain was just called")
	}
	callInfo := struct {
		Chain string
	}{
		Chain: chain,
	}
	mock.lockForChain.Lock()
	mock.calls.ForChain = append(mock.calls.ForChain, callInfo)
	mock.lockForChain.Unlock()
	return mock.ForChainFunc(chain)
}

// ForChainCalls gets all the calls that were made to ForChain.
// Check the length with:
//     len(mockedEVMBaseKeeper.ForChainCalls())
func (mock *EVMBaseKeeperMock) ForChainCalls() []struct {
	Chain string
} {
	var calls []struct {
		Chain string
	}
	mock.lockForChain.RLock()
	calls = mock.calls.ForChain
	mock.lockForChain.RUnlock()
	return calls
}
