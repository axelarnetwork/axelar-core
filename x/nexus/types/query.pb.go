// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nexus/v1beta1/query.proto

package types

import (
	fmt "fmt"
	exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryChainMaintainersResponse struct {
	Maintainers []github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,rep,name=maintainers,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"maintainers,omitempty"`
}

func (m *QueryChainMaintainersResponse) Reset()         { *m = QueryChainMaintainersResponse{} }
func (m *QueryChainMaintainersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainMaintainersResponse) ProtoMessage()    {}
func (*QueryChainMaintainersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{0}
}
func (m *QueryChainMaintainersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainMaintainersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainMaintainersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainMaintainersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainMaintainersResponse.Merge(m, src)
}
func (m *QueryChainMaintainersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainMaintainersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainMaintainersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainMaintainersResponse proto.InternalMessageInfo

// LatestDepositAddressRequest represents a message that queries a deposit
// address by recipient address
type LatestDepositAddressRequest struct {
	RecipientAddr  string `protobuf:"bytes,1,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`
	RecipientChain string `protobuf:"bytes,2,opt,name=recipient_chain,json=recipientChain,proto3" json:"recipient_chain,omitempty"`
	DepositChain   string `protobuf:"bytes,3,opt,name=deposit_chain,json=depositChain,proto3" json:"deposit_chain,omitempty"`
}

func (m *LatestDepositAddressRequest) Reset()         { *m = LatestDepositAddressRequest{} }
func (m *LatestDepositAddressRequest) String() string { return proto.CompactTextString(m) }
func (*LatestDepositAddressRequest) ProtoMessage()    {}
func (*LatestDepositAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{1}
}
func (m *LatestDepositAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestDepositAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestDepositAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestDepositAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestDepositAddressRequest.Merge(m, src)
}
func (m *LatestDepositAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *LatestDepositAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestDepositAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LatestDepositAddressRequest proto.InternalMessageInfo

type LatestDepositAddressResponse struct {
	DepositAddr string `protobuf:"bytes,1,opt,name=deposit_addr,json=depositAddr,proto3" json:"deposit_addr,omitempty"`
}

func (m *LatestDepositAddressResponse) Reset()         { *m = LatestDepositAddressResponse{} }
func (m *LatestDepositAddressResponse) String() string { return proto.CompactTextString(m) }
func (*LatestDepositAddressResponse) ProtoMessage()    {}
func (*LatestDepositAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{2}
}
func (m *LatestDepositAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestDepositAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestDepositAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestDepositAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestDepositAddressResponse.Merge(m, src)
}
func (m *LatestDepositAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *LatestDepositAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestDepositAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LatestDepositAddressResponse proto.InternalMessageInfo

// TransfersForChainRequest represents a message that queries the
// transfers for the specified chain
type TransfersForChainRequest struct {
	Chain      string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	State      exported.TransferState `protobuf:"varint,2,opt,name=state,proto3,enum=nexus.exported.v1beta1.TransferState" json:"state,omitempty"`
	Pagination *query.PageRequest     `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *TransfersForChainRequest) Reset()         { *m = TransfersForChainRequest{} }
func (m *TransfersForChainRequest) String() string { return proto.CompactTextString(m) }
func (*TransfersForChainRequest) ProtoMessage()    {}
func (*TransfersForChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{3}
}
func (m *TransfersForChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransfersForChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransfersForChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransfersForChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransfersForChainRequest.Merge(m, src)
}
func (m *TransfersForChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransfersForChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransfersForChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransfersForChainRequest proto.InternalMessageInfo

type TransfersForChainResponse struct {
	Transfers  []exported.CrossChainTransfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers"`
	Pagination *query.PageResponse           `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *TransfersForChainResponse) Reset()         { *m = TransfersForChainResponse{} }
func (m *TransfersForChainResponse) String() string { return proto.CompactTextString(m) }
func (*TransfersForChainResponse) ProtoMessage()    {}
func (*TransfersForChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{4}
}
func (m *TransfersForChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransfersForChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransfersForChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransfersForChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransfersForChainResponse.Merge(m, src)
}
func (m *TransfersForChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransfersForChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransfersForChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransfersForChainResponse proto.InternalMessageInfo

// FeeRequest represents a message that queries the transfer fees associated
// to an asset on a chain
type FeeRequest struct {
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (m *FeeRequest) Reset()         { *m = FeeRequest{} }
func (m *FeeRequest) String() string { return proto.CompactTextString(m) }
func (*FeeRequest) ProtoMessage()    {}
func (*FeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{5}
}
func (m *FeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeRequest.Merge(m, src)
}
func (m *FeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *FeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeeRequest proto.InternalMessageInfo

type FeeResponse struct {
	FeeInfo *exported.FeeInfo `protobuf:"bytes,1,opt,name=fee_info,json=feeInfo,proto3" json:"fee_info,omitempty"`
}

func (m *FeeResponse) Reset()         { *m = FeeResponse{} }
func (m *FeeResponse) String() string { return proto.CompactTextString(m) }
func (*FeeResponse) ProtoMessage()    {}
func (*FeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{6}
}
func (m *FeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeResponse.Merge(m, src)
}
func (m *FeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *FeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeeResponse proto.InternalMessageInfo

// TransferFeeRequest represents a message that queries the fees charged by
// the network for a cross-chain transfer
type TransferFeeRequest struct {
	SourceChain      string                                  `protobuf:"bytes,1,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	DestinationChain string                                  `protobuf:"bytes,2,opt,name=destination_chain,json=destinationChain,proto3" json:"destination_chain,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	Asset            string                                  `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (m *TransferFeeRequest) Reset()         { *m = TransferFeeRequest{} }
func (m *TransferFeeRequest) String() string { return proto.CompactTextString(m) }
func (*TransferFeeRequest) ProtoMessage()    {}
func (*TransferFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{7}
}
func (m *TransferFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFeeRequest.Merge(m, src)
}
func (m *TransferFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFeeRequest proto.InternalMessageInfo

type TransferFeeResponse struct {
	Fee      github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"fee"`
	Received github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=received,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"received"`
	FeeInfo  *exported.FeeInfo                       `protobuf:"bytes,3,opt,name=fee_info,json=feeInfo,proto3" json:"fee_info,omitempty"`
}

func (m *TransferFeeResponse) Reset()         { *m = TransferFeeResponse{} }
func (m *TransferFeeResponse) String() string { return proto.CompactTextString(m) }
func (*TransferFeeResponse) ProtoMessage()    {}
func (*TransferFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18ecb24985e280bf, []int{8}
}
func (m *TransferFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFeeResponse.Merge(m, src)
}
func (m *TransferFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFeeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryChainMaintainersResponse)(nil), "nexus.v1beta1.QueryChainMaintainersResponse")
	proto.RegisterType((*LatestDepositAddressRequest)(nil), "nexus.v1beta1.LatestDepositAddressRequest")
	proto.RegisterType((*LatestDepositAddressResponse)(nil), "nexus.v1beta1.LatestDepositAddressResponse")
	proto.RegisterType((*TransfersForChainRequest)(nil), "nexus.v1beta1.TransfersForChainRequest")
	proto.RegisterType((*TransfersForChainResponse)(nil), "nexus.v1beta1.TransfersForChainResponse")
	proto.RegisterType((*FeeRequest)(nil), "nexus.v1beta1.FeeRequest")
	proto.RegisterType((*FeeResponse)(nil), "nexus.v1beta1.FeeResponse")
	proto.RegisterType((*TransferFeeRequest)(nil), "nexus.v1beta1.TransferFeeRequest")
	proto.RegisterType((*TransferFeeResponse)(nil), "nexus.v1beta1.TransferFeeResponse")
}

func init() { proto.RegisterFile("nexus/v1beta1/query.proto", fileDescriptor_18ecb24985e280bf) }

var fileDescriptor_18ecb24985e280bf = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0x8e, 0x09, 0xf0, 0xc2, 0x24, 0xf0, 0xbe, 0xaf, 0xcb, 0x21, 0xd0, 0x36, 0x01, 0x57, 0x14,
	0x44, 0x85, 0x2d, 0xd2, 0x4b, 0xd5, 0x9e, 0x08, 0x55, 0x10, 0xea, 0x87, 0xa8, 0x69, 0x7b, 0xe8,
	0x05, 0x6d, 0xec, 0x49, 0xb0, 0x20, 0xbb, 0x66, 0x77, 0x43, 0xc3, 0xbf, 0xa8, 0xfa, 0x5b, 0xda,
	0x5f, 0xd0, 0x0b, 0x47, 0x8e, 0x55, 0x0f, 0xa8, 0xc0, 0xbf, 0xe8, 0xa9, 0xf2, 0xee, 0x3a, 0x76,
	0x24, 0xe8, 0x07, 0xa7, 0x78, 0x77, 0x9e, 0x67, 0xe6, 0x79, 0x66, 0x26, 0x0b, 0xb3, 0x14, 0xfb,
	0x3d, 0xe1, 0x1d, 0xad, 0xb5, 0x50, 0x92, 0x35, 0xef, 0xb0, 0x87, 0xfc, 0xd8, 0x8d, 0x39, 0x93,
	0xcc, 0x9e, 0x52, 0x21, 0xd7, 0x84, 0xe6, 0x66, 0x3a, 0xac, 0xc3, 0x54, 0xc4, 0x4b, 0xbe, 0x34,
	0x68, 0xce, 0xd1, 0x7c, 0xec, 0xc7, 0x8c, 0x4b, 0x0c, 0x07, 0x89, 0xe4, 0x71, 0x8c, 0xc2, 0x60,
	0x56, 0x02, 0x26, 0xba, 0x4c, 0x78, 0x2d, 0x22, 0x50, 0x57, 0x18, 0xc0, 0x62, 0xd2, 0x89, 0x28,
	0x91, 0x11, 0xa3, 0x1a, 0xeb, 0x48, 0xb8, 0xfb, 0x2a, 0x41, 0x6c, 0xec, 0x91, 0x88, 0xbe, 0x20,
	0x11, 0x95, 0x24, 0xa2, 0xc8, 0x85, 0x8f, 0x22, 0x66, 0x54, 0xa0, 0xbd, 0x03, 0xa5, 0x6e, 0x76,
	0x5d, 0xb1, 0xe6, 0x8b, 0xcb, 0xe5, 0xc6, 0xda, 0x8f, 0xb3, 0xda, 0x6a, 0x27, 0x92, 0x7b, 0xbd,
	0x96, 0x1b, 0xb0, 0xae, 0x67, 0x0a, 0xea, 0x9f, 0x55, 0x11, 0xee, 0x1b, 0x3d, 0x6f, 0xc9, 0xc1,
	0x7a, 0x18, 0x72, 0x14, 0xc2, 0xcf, 0x67, 0x71, 0x3e, 0x5a, 0x70, 0xfb, 0x39, 0x91, 0x28, 0xe4,
	0x53, 0x8c, 0x99, 0x88, 0x64, 0x8a, 0xc2, 0xc3, 0x1e, 0x0a, 0x69, 0x2f, 0xc2, 0x34, 0xc7, 0x20,
	0x8a, 0x23, 0xa4, 0x72, 0x97, 0x84, 0x21, 0xaf, 0x58, 0xf3, 0xd6, 0xf2, 0xa4, 0x3f, 0x35, 0xb8,
	0x4d, 0x08, 0xf6, 0x12, 0xfc, 0x9b, 0xc1, 0x82, 0xc4, 0x41, 0x65, 0x44, 0xe1, 0x32, 0xb6, 0xf2,
	0x65, 0xdf, 0x83, 0xa9, 0x50, 0x17, 0x32, 0xb0, 0xa2, 0x82, 0x95, 0xcd, 0xa5, 0x02, 0x39, 0xeb,
	0x70, 0xe7, 0x6a, 0x4d, 0xa6, 0x13, 0x0b, 0x90, 0xe2, 0xf3, 0x92, 0x4a, 0x61, 0x86, 0x76, 0x3e,
	0x5b, 0x50, 0x79, 0xcd, 0x09, 0x15, 0x6d, 0xe4, 0xa2, 0xc9, 0xb8, 0x4a, 0x9c, 0x9a, 0x9a, 0x81,
	0x31, 0x5d, 0x5c, 0x13, 0xf5, 0xc1, 0x7e, 0x02, 0x63, 0x42, 0x12, 0x89, 0x4a, 0xf9, 0x74, 0x7d,
	0xd1, 0xd5, 0x5b, 0x90, 0x0e, 0x38, 0x5d, 0x07, 0x37, 0x4d, 0xbb, 0x93, 0x80, 0x7d, 0xcd, 0xb1,
	0x9b, 0x00, 0xd9, 0x44, 0x95, 0xa9, 0x52, 0xfd, 0xbe, 0xab, 0xc7, 0xe0, 0x26, 0xe3, 0x77, 0xf5,
	0x82, 0xa5, 0x49, 0xb6, 0x49, 0x07, 0x8d, 0x1c, 0x3f, 0xc7, 0x74, 0x3e, 0x59, 0x30, 0x7b, 0x85,
	0x6e, 0x63, 0xfc, 0x25, 0x4c, 0xca, 0x34, 0xa8, 0x16, 0xa0, 0x54, 0x5f, 0xb9, 0x4e, 0xe6, 0x06,
	0x67, 0x42, 0x28, 0x7a, 0x9a, 0xaf, 0x31, 0x7a, 0x72, 0x56, 0x2b, 0xf8, 0x59, 0x0a, 0x7b, 0x73,
	0x48, 0xf5, 0x88, 0x52, 0xbd, 0xf4, 0x5b, 0xd5, 0x5a, 0xcc, 0x90, 0xec, 0x47, 0x00, 0x4d, 0xc4,
	0x5f, 0xf7, 0x77, 0x06, 0xc6, 0x88, 0x10, 0x28, 0xcd, 0x66, 0xe8, 0x83, 0xb3, 0x05, 0x25, 0xc5,
	0x34, 0x0e, 0x1f, 0xc3, 0x44, 0x1b, 0x71, 0x37, 0xa2, 0x6d, 0xa6, 0xd8, 0xa5, 0x7a, 0xed, 0x3a,
	0x83, 0x4d, 0xc4, 0x2d, 0xda, 0x66, 0xfe, 0x3f, 0x6d, 0xfd, 0xe1, 0x7c, 0xb1, 0xc0, 0x4e, 0xbd,
	0xe6, 0xd4, 0x2c, 0x40, 0x59, 0xb0, 0x1e, 0x0f, 0x70, 0x37, 0x2f, 0xaa, 0xa4, 0xef, 0xf4, 0x56,
	0x3e, 0x80, 0xff, 0x43, 0x14, 0xd2, 0xb8, 0x19, 0x5a, 0xe0, 0xff, 0x72, 0x01, 0x0d, 0xde, 0x84,
	0x71, 0xd2, 0x65, 0x3d, 0x2a, 0xd5, 0x98, 0xcb, 0x0d, 0x2f, 0xe9, 0xea, 0xb7, 0xb3, 0xda, 0xd2,
	0x1f, 0xfc, 0x0d, 0xdf, 0x44, 0x54, 0xfa, 0x86, 0x9e, 0x35, 0x64, 0x34, 0xdf, 0x90, 0x73, 0x0b,
	0x6e, 0x0d, 0xb9, 0x30, 0x9d, 0x59, 0x87, 0x62, 0x1b, 0x51, 0xa9, 0xbf, 0x41, 0xcd, 0x84, 0x6b,
	0x3f, 0x83, 0x09, 0x8e, 0x01, 0x46, 0x47, 0x18, 0x2a, 0x77, 0x37, 0xc8, 0x33, 0x48, 0x30, 0x34,
	0xa9, 0xe2, 0xdf, 0x4d, 0xaa, 0xb1, 0x7d, 0x72, 0x5e, 0x2d, 0x9c, 0x5c, 0x54, 0xad, 0xd3, 0x8b,
	0xaa, 0xf5, 0xfd, 0xa2, 0x6a, 0x7d, 0xb8, 0xac, 0x16, 0x4e, 0x2f, 0xab, 0x85, 0xaf, 0x97, 0xd5,
	0xc2, 0xbb, 0x7a, 0x4e, 0x0c, 0xe9, 0xe3, 0x01, 0xe1, 0x14, 0xe5, 0x7b, 0xc6, 0xf7, 0xcd, 0x69,
	0x35, 0x60, 0x1c, 0xbd, 0xbe, 0xa7, 0x1f, 0x60, 0x25, 0xae, 0x35, 0xae, 0x1e, 0xd1, 0x87, 0x3f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xb4, 0x35, 0x09, 0xd6, 0x05, 0x00, 0x00,
}

func (m *QueryChainMaintainersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainMaintainersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainMaintainersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Maintainers) > 0 {
		for iNdEx := len(m.Maintainers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Maintainers[iNdEx])
			copy(dAtA[i:], m.Maintainers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Maintainers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LatestDepositAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestDepositAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestDepositAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositChain) > 0 {
		i -= len(m.DepositChain)
		copy(dAtA[i:], m.DepositChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipientChain) > 0 {
		i -= len(m.RecipientChain)
		copy(dAtA[i:], m.RecipientChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipientChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecipientAddr) > 0 {
		i -= len(m.RecipientAddr)
		copy(dAtA[i:], m.RecipientAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipientAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LatestDepositAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestDepositAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestDepositAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositAddr) > 0 {
		i -= len(m.DepositAddr)
		copy(dAtA[i:], m.DepositAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransfersForChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransfersForChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransfersForChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransfersForChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransfersForChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransfersForChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceChain) > 0 {
		i -= len(m.SourceChain)
		copy(dAtA[i:], m.SourceChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Received.Size()
		i -= size
		if _, err := m.Received.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryChainMaintainersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Maintainers) > 0 {
		for _, b := range m.Maintainers {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LatestDepositAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecipientAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecipientChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DepositChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LatestDepositAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TransfersForChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovQuery(uint64(m.State))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TransfersForChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TransferFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TransferFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fee.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Received.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryChainMaintainersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainMaintainersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainMaintainersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maintainers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maintainers = append(m.Maintainers, make([]byte, postIndex-iNdEx))
			copy(m.Maintainers[len(m.Maintainers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestDepositAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestDepositAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestDepositAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestDepositAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestDepositAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestDepositAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransfersForChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransfersForChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransfersForChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= exported.TransferState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransfersForChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransfersForChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransfersForChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, exported.CrossChainTransfer{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &exported.FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Received", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Received.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &exported.FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
