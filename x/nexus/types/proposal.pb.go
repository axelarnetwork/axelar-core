// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/nexus/v1beta1/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	github_com_axelarnetwork_axelar_core_x_nexus_exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CallContractsProposal is a gov Content type for calling contracts on other
// chains
type CallContractsProposal struct {
	Title         string         `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ContractCalls []ContractCall `protobuf:"bytes,3,rep,name=contract_calls,json=contractCalls,proto3" json:"contract_calls"`
}

func (m *CallContractsProposal) Reset()      { *m = CallContractsProposal{} }
func (*CallContractsProposal) ProtoMessage() {}
func (*CallContractsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f356d9be3beaafec, []int{0}
}
func (m *CallContractsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallContractsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallContractsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallContractsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallContractsProposal.Merge(m, src)
}
func (m *CallContractsProposal) XXX_Size() int {
	return m.Size()
}
func (m *CallContractsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CallContractsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CallContractsProposal proto.InternalMessageInfo

type ContractCall struct {
	Chain           github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=chain,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" json:"chain,omitempty"`
	ContractAddress string                                                          `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Payload         []byte                                                          `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ContractCall) Reset()      { *m = ContractCall{} }
func (*ContractCall) ProtoMessage() {}
func (*ContractCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_f356d9be3beaafec, []int{1}
}
func (m *ContractCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCall.Merge(m, src)
}
func (m *ContractCall) XXX_Size() int {
	return m.Size()
}
func (m *ContractCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCall.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCall proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CallContractsProposal)(nil), "axelar.nexus.v1beta1.CallContractsProposal")
	proto.RegisterType((*ContractCall)(nil), "axelar.nexus.v1beta1.ContractCall")
}

func init() {
	proto.RegisterFile("axelar/nexus/v1beta1/proposal.proto", fileDescriptor_f356d9be3beaafec)
}

var fileDescriptor_f356d9be3beaafec = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x3f, 0x4f, 0xfa, 0x40,
	0x1c, 0xc6, 0x7b, 0x3f, 0xe0, 0x67, 0x3c, 0xf0, 0x4f, 0x1a, 0x4c, 0x1a, 0x86, 0xd2, 0xe0, 0x02,
	0x83, 0xd7, 0x80, 0x9b, 0x8b, 0x91, 0xee, 0x4a, 0xba, 0xe9, 0x62, 0x8e, 0xeb, 0x05, 0x1a, 0x8f,
	0xde, 0xe5, 0xee, 0xd0, 0xf2, 0x2e, 0x1c, 0x1d, 0x9d, 0x7c, 0x05, 0xbe, 0x08, 0x46, 0x46, 0x27,
	0xa2, 0xf0, 0x2e, 0x9c, 0x0c, 0xbd, 0x42, 0xd0, 0xb8, 0xb8, 0xf5, 0xfb, 0xf4, 0x93, 0xe7, 0xfb,
	0x3c, 0xf7, 0x85, 0xc7, 0x38, 0xa5, 0x0c, 0x4b, 0x3f, 0xa1, 0xe9, 0x58, 0xf9, 0xf7, 0xed, 0x3e,
	0xd5, 0xb8, 0xed, 0x0b, 0xc9, 0x05, 0x57, 0x98, 0x21, 0x21, 0xb9, 0xe6, 0x76, 0xd5, 0x40, 0x28,
	0x83, 0x50, 0x0e, 0xd5, 0xaa, 0x03, 0x3e, 0xe0, 0x19, 0xe0, 0xaf, 0xbe, 0x0c, 0x5b, 0x6b, 0x7d,
	0x33, 0xa4, 0xa9, 0xe0, 0x52, 0xd3, 0x68, 0xe3, 0xac, 0x27, 0x82, 0x2a, 0x83, 0x36, 0x5e, 0x00,
	0x3c, 0x0a, 0x30, 0x63, 0x01, 0x4f, 0xb4, 0xc4, 0x44, 0xab, 0x5e, 0xbe, 0xd6, 0xae, 0xc2, 0x92,
	0x8e, 0x35, 0xa3, 0x0e, 0xf0, 0x40, 0x73, 0x37, 0x34, 0x83, 0xed, 0xc1, 0x72, 0x44, 0x15, 0x91,
	0xb1, 0xd0, 0x31, 0x4f, 0x9c, 0x7f, 0xd9, 0xbf, 0x6d, 0xc9, 0xbe, 0x82, 0xfb, 0x24, 0x37, 0xbb,
	0x25, 0x98, 0x31, 0xe5, 0x14, 0xbc, 0x42, 0xb3, 0xdc, 0x69, 0xa0, 0xdf, 0x1a, 0xa0, 0xf5, 0xe2,
	0x55, 0x88, 0x6e, 0x71, 0x3a, 0xaf, 0x5b, 0xe1, 0x1e, 0xd9, 0xd2, 0xd4, 0x59, 0xf1, 0xe9, 0xb9,
	0x6e, 0x35, 0x5e, 0x01, 0xac, 0x6c, 0xb3, 0xf6, 0x35, 0x2c, 0x91, 0x21, 0x8e, 0x13, 0x93, 0xaf,
	0x1b, 0x7c, 0xce, 0xeb, 0xe7, 0x83, 0x58, 0x0f, 0xc7, 0x7d, 0x44, 0xf8, 0xc8, 0x37, 0xcb, 0x12,
	0xaa, 0x1f, 0xb8, 0xbc, 0xcb, 0xa7, 0x13, 0xc2, 0x25, 0xf5, 0xd3, 0x1f, 0xef, 0x82, 0x82, 0x95,
	0xcd, 0x25, 0x1e, 0xd1, 0xd0, 0x38, 0xda, 0x2d, 0x78, 0xb8, 0xa9, 0x80, 0xa3, 0x48, 0x52, 0xa5,
	0xf2, 0xa6, 0x07, 0x6b, 0xfd, 0xc2, 0xc8, 0xb6, 0x03, 0x77, 0x04, 0x9e, 0x30, 0x8e, 0x23, 0xa7,
	0xe0, 0x81, 0x66, 0x25, 0x5c, 0x8f, 0x26, 0x76, 0xb7, 0x37, 0xfd, 0x70, 0xad, 0xe9, 0xc2, 0x05,
	0xb3, 0x85, 0x0b, 0xde, 0x17, 0x2e, 0x78, 0x5c, 0xba, 0xd6, 0x6c, 0xe9, 0x5a, 0x6f, 0x4b, 0xd7,
	0xba, 0xe9, 0xfc, 0x29, 0x70, 0x76, 0xb7, 0xfe, 0xff, 0xec, 0x70, 0xa7, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xa2, 0xb8, 0x43, 0xfc, 0x36, 0x02, 0x00, 0x00,
}

func (m *CallContractsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallContractsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallContractsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractCalls) > 0 {
		for iNdEx := len(m.ContractCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallContractsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.ContractCalls) > 0 {
		for _, e := range m.ContractCalls {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *ContractCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallContractsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallContractsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallContractsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCalls = append(m.ContractCalls, ContractCall{})
			if err := m.ContractCalls[len(m.ContractCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
