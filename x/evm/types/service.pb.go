// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evm/v1beta1/service.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("evm/v1beta1/service.proto", fileDescriptor_e674b0c159b5e0b5) }
func init() { golang_proto.RegisterFile("evm/v1beta1/service.proto", fileDescriptor_e674b0c159b5e0b5) }

var fileDescriptor_e674b0c159b5e0b5 = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x08, 0x21, 0x34, 0x54, 0xa8, 0xac, 0x42, 0xdb, 0x58, 0x61, 0x9b, 0x6e, 0x13,
	0x87, 0x3a, 0x59, 0xaf, 0x93, 0x4a, 0x1c, 0xb8, 0xd1, 0x54, 0x42, 0x88, 0xdf, 0x14, 0x71, 0xe0,
	0x52, 0xad, 0xbd, 0x2f, 0x9b, 0xc1, 0xf1, 0xcc, 0x76, 0x66, 0xec, 0xc4, 0x8a, 0x2a, 0x51, 0x2e,
	0x48, 0x1c, 0x10, 0x2a, 0x17, 0xce, 0x20, 0x71, 0xe0, 0xc8, 0x95, 0x0b, 0x47, 0x8e, 0x95, 0xb8,
	0xc0, 0x0d, 0x25, 0xfc, 0x21, 0x68, 0x66, 0x67, 0x9c, 0xd9, 0xf5, 0xee, 0xda, 0xdc, 0xec, 0x79,
	0xdf, 0xf7, 0xbe, 0x9f, 0x9d, 0xf7, 0x66, 0x77, 0xf0, 0x1a, 0x4c, 0x46, 0xd1, 0x64, 0xaf, 0x0f,
	0x32, 0xde, 0x8b, 0x04, 0xf0, 0x09, 0x19, 0x40, 0x37, 0xe3, 0x4c, 0x32, 0xef, 0x25, 0x98, 0x8c,
	0xba, 0x26, 0xd4, 0x5a, 0x4d, 0x59, 0xca, 0xf4, 0x7a, 0xa4, 0x7e, 0xe5, 0x92, 0xd6, 0x7a, 0xca,
	0x58, 0x7a, 0x0c, 0x51, 0x9c, 0x91, 0x28, 0xa6, 0x94, 0xc9, 0x58, 0x12, 0x46, 0x85, 0x89, 0xae,
	0xba, 0xb5, 0xe5, 0xa9, 0x59, 0xbd, 0xee, 0xae, 0x3e, 0x1a, 0x03, 0x9f, 0xe6, 0x81, 0xfd, 0xbf,
	0x57, 0x31, 0x7e, 0x5f, 0xa4, 0x0f, 0x72, 0x08, 0xef, 0x0b, 0xfc, 0xfc, 0x7b, 0x84, 0x0e, 0xbd,
	0x1b, 0x5d, 0x87, 0xa3, 0xab, 0x96, 0x3e, 0x81, 0x47, 0x63, 0x10, 0xb2, 0xb5, 0x56, 0x11, 0x11,
	0x19, 0xa3, 0x02, 0x82, 0xf0, 0xab, 0x3f, 0xff, 0xfd, 0xfe, 0xb9, 0xed, 0x20, 0x88, 0xe2, 0x53,
	0x38, 0x8e, 0x79, 0xa4, 0x4c, 0x8f, 0x09, 0x1d, 0x46, 0x67, 0x1c, 0x06, 0x24, 0x23, 0x40, 0xe5,
	0xc3, 0xc1, 0x51, 0x4c, 0xe8, 0xe3, 0x37, 0x51, 0xc7, 0x9b, 0xe2, 0x2b, 0x07, 0x8c, 0x1e, 0x12,
	0x3e, 0x3a, 0x50, 0x6b, 0xde, 0x46, 0xa1, 0xb2, 0x1b, 0xb2, 0xde, 0xb7, 0x1a, 0x14, 0x86, 0x61,
	0x53, 0x33, 0xf8, 0xc1, 0x9a, 0xcb, 0x30, 0xc8, 0x95, 0xa1, 0xf6, 0x56, 0xd6, 0xbf, 0x20, 0x7c,
	0xc3, 0xa4, 0xbf, 0x1d, 0x4b, 0x38, 0x89, 0xa7, 0xf7, 0x21, 0x3b, 0x66, 0xd3, 0x11, 0x50, 0xe9,
	0xed, 0x56, 0xb9, 0xcc, 0xc9, 0x2c, 0x53, 0xb8, 0xa4, 0xda, 0xf0, 0xed, 0x69, 0xbe, 0x9d, 0xa0,
	0x5d, 0xc5, 0x97, 0xe6, 0x69, 0x61, 0x32, 0xcb, 0x53, 0xb0, 0x5f, 0xa2, 0xd9, 0x46, 0x7d, 0xca,
	0x86, 0x50, 0xb3, 0x51, 0x3a, 0xd4, 0xb8, 0x51, 0x46, 0x61, 0x40, 0x76, 0x34, 0xc8, 0x56, 0xb0,
	0x51, 0x05, 0x02, 0x7c, 0xb0, 0xdf, 0x33, 0x18, 0x0a, 0xe1, 0x6b, 0x84, 0x5f, 0x36, 0x55, 0xee,
	0x43, 0xc6, 0x04, 0x91, 0x5e, 0x50, 0x65, 0x61, 0x82, 0x16, 0xe3, 0x76, 0xa3, 0xc6, 0x80, 0xec,
	0x6a, 0x90, 0x76, 0x70, 0xab, 0x11, 0x44, 0xa5, 0x28, 0x92, 0x1f, 0x10, 0xf6, 0xec, 0xf3, 0xf0,
	0x98, 0x8a, 0x43, 0xe0, 0xef, 0xc2, 0xd4, 0x6b, 0x57, 0x3e, 0xf0, 0xa5, 0xc0, 0x12, 0x6d, 0x2f,
	0xd4, 0x2d, 0xd3, 0x27, 0x69, 0x12, 0x42, 0x76, 0x42, 0x81, 0x8b, 0x23, 0x92, 0x29, 0xb4, 0x6f,
	0x10, 0xbe, 0xfa, 0x19, 0x93, 0x50, 0x18, 0xea, 0xcd, 0x82, 0x61, 0x39, 0x6c, 0xb1, 0xb6, 0x16,
	0xa8, 0x0c, 0xd4, 0x1d, 0x0d, 0x75, 0x3b, 0xf0, 0x5d, 0xa8, 0x09, 0x93, 0x10, 0xce, 0x4d, 0xf8,
	0x6f, 0x08, 0xaf, 0x3b, 0x75, 0xe6, 0xa7, 0xbc, 0x57, 0x67, 0x59, 0x3b, 0xe9, 0x7b, 0xff, 0x23,
	0xc3, 0x00, 0xbf, 0xa1, 0x81, 0x7b, 0xc1, 0x4e, 0x2d, 0x70, 0xf5, 0xc8, 0x3f, 0x45, 0xd8, 0x73,
	0x0c, 0xec, 0xcc, 0xb5, 0xeb, 0x08, 0x4a, 0x73, 0xb7, 0xbd, 0x50, 0xd7, 0x74, 0x08, 0x0a, 0x7c,
	0xce, 0xe8, 0x95, 0xfa, 0x9b, 0x9f, 0xc5, 0xda, 0xfe, 0x16, 0xce, 0xe3, 0xd6, 0x02, 0xd5, 0xd2,
	0xfd, 0x95, 0x4a, 0xaf, 0x60, 0x7e, 0x42, 0xf8, 0x9a, 0x5b, 0xc7, 0x39, 0x0b, 0x9d, 0x5a, 0xb3,
	0xf9, 0xf3, 0xb0, 0xb3, 0x94, 0xd6, 0xe0, 0xf5, 0x34, 0x5e, 0x27, 0xd8, 0xaa, 0xc7, 0xb3, 0x07,
	0x63, 0x08, 0xfa, 0xbd, 0xf1, 0x2d, 0xc2, 0xaf, 0x1c, 0x70, 0x88, 0x25, 0xe4, 0xc3, 0x91, 0xef,
	0x59, 0x71, 0x37, 0xe6, 0xe2, 0x96, 0xad, 0xbd, 0x48, 0x66, 0xb0, 0x3a, 0x1a, 0x6b, 0x33, 0xb8,
	0x59, 0x38, 0xaa, 0x5a, 0x6e, 0xc6, 0xea, 0x72, 0xdb, 0x9e, 0x20, 0x7c, 0x35, 0xaf, 0x74, 0x6f,
	0xcc, 0xa9, 0xae, 0x23, 0x4a, 0x3d, 0x2c, 0x87, 0xab, 0x7b, 0x38, 0xaf, 0x32, 0x34, 0x1b, 0x9a,
	0xa6, 0x15, 0xbc, 0xea, 0xd2, 0x08, 0x92, 0xd2, 0xb0, 0x3f, 0xe6, 0x9a, 0xe1, 0x47, 0x84, 0xaf,
	0xe5, 0xe9, 0x1f, 0x01, 0x4d, 0x08, 0x4d, 0xed, 0x5e, 0x8b, 0x52, 0xeb, 0xaa, 0x45, 0xd5, 0xad,
	0xab, 0xd3, 0x1a, 0xaa, 0x48, 0x53, 0xdd, 0x09, 0x36, 0x2b, 0xf6, 0x28, 0xcb, 0x93, 0x66, 0xcd,
	0x13, 0x0a, 0xf2, 0x67, 0x84, 0xaf, 0xe7, 0x35, 0x6d, 0xb1, 0x0f, 0xed, 0xbb, 0xce, 0xab, 0x72,
	0x9e, 0x53, 0x59, 0xcc, 0xdd, 0xe5, 0xc4, 0x4d, 0x23, 0x66, 0x38, 0xab, 0xdf, 0xba, 0xbf, 0x22,
	0xdc, 0x2a, 0x55, 0xcd, 0x80, 0xc7, 0x92, 0xe5, 0xac, 0xdd, 0x26, 0x7b, 0x47, 0x68, 0x71, 0xa3,
	0xa5, 0xf5, 0x86, 0xf8, 0xae, 0x26, 0x0e, 0x83, 0xd7, 0x1b, 0x89, 0x9d, 0x4c, 0x73, 0xf5, 0x79,
	0x40, 0x52, 0x7a, 0xc0, 0x46, 0xa3, 0x98, 0x26, 0xa2, 0xf4, 0x45, 0x77, 0x43, 0xd5, 0x5f, 0xf4,
	0xa2, 0xa2, 0xe9, 0xea, 0xa3, 0x27, 0x6f, 0x60, 0xa4, 0xca, 0x9a, 0xe0, 0x17, 0xdf, 0x4a, 0x92,
	0xfc, 0xe3, 0xb4, 0x5e, 0x28, 0x6a, 0x97, 0xad, 0xe5, 0x6b, 0x35, 0xd1, 0xa6, 0x41, 0x8f, 0x93,
	0x64, 0xf6, 0x0d, 0xda, 0x7f, 0x8a, 0xf0, 0x95, 0x8f, 0xd5, 0x5d, 0xd3, 0xde, 0x2e, 0x9f, 0x20,
	0x8c, 0xd5, 0x91, 0x01, 0xfe, 0x0e, 0x3d, 0x64, 0x9e, 0x5f, 0x30, 0xb8, 0x0c, 0x58, 0x80, 0x9b,
	0xb5, 0x71, 0x83, 0xb0, 0xaf, 0x11, 0x76, 0xbd, 0x4e, 0xe4, 0x5e, 0x6f, 0xfb, 0x5a, 0xf8, 0x90,
	0xd0, 0x43, 0x16, 0x9d, 0xe5, 0xd7, 0xcd, 0xe8, 0x2c, 0x4e, 0x12, 0x0e, 0x42, 0x3c, 0xbe, 0xf7,
	0xc1, 0x1f, 0xe7, 0x3e, 0x7a, 0x76, 0xee, 0xa3, 0x7f, 0xce, 0x7d, 0xf4, 0xdd, 0x85, 0xbf, 0xf2,
	0xfb, 0x85, 0x8f, 0x9e, 0x5d, 0xf8, 0x2b, 0x7f, 0x5d, 0xf8, 0x2b, 0x9f, 0xf7, 0x52, 0x22, 0x8f,
	0xc6, 0xfd, 0xee, 0x80, 0x8d, 0xcc, 0x63, 0x51, 0x90, 0x27, 0x8c, 0x0f, 0xcd, 0xbf, 0x70, 0xc0,
	0x38, 0x44, 0xa7, 0xda, 0x4f, 0x4e, 0x33, 0x10, 0xfd, 0x17, 0xf4, 0x3d, 0xfa, 0xee, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0xbb, 0x8e, 0xde, 0xd4, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	ConfirmChain(ctx context.Context, in *ConfirmChainRequest, opts ...grpc.CallOption) (*ConfirmChainResponse, error)
	ConfirmGatewayDeployment(ctx context.Context, in *ConfirmGatewayDeploymentRequest, opts ...grpc.CallOption) (*ConfirmGatewayDeploymentResponse, error)
	ConfirmToken(ctx context.Context, in *ConfirmTokenRequest, opts ...grpc.CallOption) (*ConfirmTokenResponse, error)
	ConfirmDeposit(ctx context.Context, in *ConfirmDepositRequest, opts ...grpc.CallOption) (*ConfirmDepositResponse, error)
	ConfirmTransferKey(ctx context.Context, in *ConfirmTransferKeyRequest, opts ...grpc.CallOption) (*ConfirmTransferKeyResponse, error)
	VoteConfirmChain(ctx context.Context, in *VoteConfirmChainRequest, opts ...grpc.CallOption) (*VoteConfirmChainResponse, error)
	VoteConfirmGatewayDeployment(ctx context.Context, in *VoteConfirmGatewayDeploymentRequest, opts ...grpc.CallOption) (*VoteConfirmGatewayDeploymentResponse, error)
	VoteConfirmDeposit(ctx context.Context, in *VoteConfirmDepositRequest, opts ...grpc.CallOption) (*VoteConfirmDepositResponse, error)
	VoteConfirmToken(ctx context.Context, in *VoteConfirmTokenRequest, opts ...grpc.CallOption) (*VoteConfirmTokenResponse, error)
	VoteConfirmTransferKey(ctx context.Context, in *VoteConfirmTransferKeyRequest, opts ...grpc.CallOption) (*VoteConfirmTransferKeyResponse, error)
	CreateDeployToken(ctx context.Context, in *CreateDeployTokenRequest, opts ...grpc.CallOption) (*CreateDeployTokenResponse, error)
	CreateBurnTokens(ctx context.Context, in *CreateBurnTokensRequest, opts ...grpc.CallOption) (*CreateBurnTokensResponse, error)
	CreatePendingTransfers(ctx context.Context, in *CreatePendingTransfersRequest, opts ...grpc.CallOption) (*CreatePendingTransfersResponse, error)
	CreateTransferOwnership(ctx context.Context, in *CreateTransferOwnershipRequest, opts ...grpc.CallOption) (*CreateTransferOwnershipResponse, error)
	CreateTransferOperatorship(ctx context.Context, in *CreateTransferOperatorshipRequest, opts ...grpc.CallOption) (*CreateTransferOperatorshipResponse, error)
	SignCommands(ctx context.Context, in *SignCommandsRequest, opts ...grpc.CallOption) (*SignCommandsResponse, error)
	AddChain(ctx context.Context, in *AddChainRequest, opts ...grpc.CallOption) (*AddChainResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmChain(ctx context.Context, in *ConfirmChainRequest, opts ...grpc.CallOption) (*ConfirmChainResponse, error) {
	out := new(ConfirmChainResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/ConfirmChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmGatewayDeployment(ctx context.Context, in *ConfirmGatewayDeploymentRequest, opts ...grpc.CallOption) (*ConfirmGatewayDeploymentResponse, error) {
	out := new(ConfirmGatewayDeploymentResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/ConfirmGatewayDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmToken(ctx context.Context, in *ConfirmTokenRequest, opts ...grpc.CallOption) (*ConfirmTokenResponse, error) {
	out := new(ConfirmTokenResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/ConfirmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmDeposit(ctx context.Context, in *ConfirmDepositRequest, opts ...grpc.CallOption) (*ConfirmDepositResponse, error) {
	out := new(ConfirmDepositResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/ConfirmDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmTransferKey(ctx context.Context, in *ConfirmTransferKeyRequest, opts ...grpc.CallOption) (*ConfirmTransferKeyResponse, error) {
	out := new(ConfirmTransferKeyResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/ConfirmTransferKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) VoteConfirmChain(ctx context.Context, in *VoteConfirmChainRequest, opts ...grpc.CallOption) (*VoteConfirmChainResponse, error) {
	out := new(VoteConfirmChainResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/VoteConfirmChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) VoteConfirmGatewayDeployment(ctx context.Context, in *VoteConfirmGatewayDeploymentRequest, opts ...grpc.CallOption) (*VoteConfirmGatewayDeploymentResponse, error) {
	out := new(VoteConfirmGatewayDeploymentResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/VoteConfirmGatewayDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) VoteConfirmDeposit(ctx context.Context, in *VoteConfirmDepositRequest, opts ...grpc.CallOption) (*VoteConfirmDepositResponse, error) {
	out := new(VoteConfirmDepositResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/VoteConfirmDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) VoteConfirmToken(ctx context.Context, in *VoteConfirmTokenRequest, opts ...grpc.CallOption) (*VoteConfirmTokenResponse, error) {
	out := new(VoteConfirmTokenResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/VoteConfirmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) VoteConfirmTransferKey(ctx context.Context, in *VoteConfirmTransferKeyRequest, opts ...grpc.CallOption) (*VoteConfirmTransferKeyResponse, error) {
	out := new(VoteConfirmTransferKeyResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/VoteConfirmTransferKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateDeployToken(ctx context.Context, in *CreateDeployTokenRequest, opts ...grpc.CallOption) (*CreateDeployTokenResponse, error) {
	out := new(CreateDeployTokenResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/CreateDeployToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateBurnTokens(ctx context.Context, in *CreateBurnTokensRequest, opts ...grpc.CallOption) (*CreateBurnTokensResponse, error) {
	out := new(CreateBurnTokensResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/CreateBurnTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreatePendingTransfers(ctx context.Context, in *CreatePendingTransfersRequest, opts ...grpc.CallOption) (*CreatePendingTransfersResponse, error) {
	out := new(CreatePendingTransfersResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/CreatePendingTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateTransferOwnership(ctx context.Context, in *CreateTransferOwnershipRequest, opts ...grpc.CallOption) (*CreateTransferOwnershipResponse, error) {
	out := new(CreateTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/CreateTransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateTransferOperatorship(ctx context.Context, in *CreateTransferOperatorshipRequest, opts ...grpc.CallOption) (*CreateTransferOperatorshipResponse, error) {
	out := new(CreateTransferOperatorshipResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/CreateTransferOperatorship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) SignCommands(ctx context.Context, in *SignCommandsRequest, opts ...grpc.CallOption) (*SignCommandsResponse, error) {
	out := new(SignCommandsResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/SignCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddChain(ctx context.Context, in *AddChainRequest, opts ...grpc.CallOption) (*AddChainResponse, error) {
	out := new(AddChainResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.MsgService/AddChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	Link(context.Context, *LinkRequest) (*LinkResponse, error)
	ConfirmChain(context.Context, *ConfirmChainRequest) (*ConfirmChainResponse, error)
	ConfirmGatewayDeployment(context.Context, *ConfirmGatewayDeploymentRequest) (*ConfirmGatewayDeploymentResponse, error)
	ConfirmToken(context.Context, *ConfirmTokenRequest) (*ConfirmTokenResponse, error)
	ConfirmDeposit(context.Context, *ConfirmDepositRequest) (*ConfirmDepositResponse, error)
	ConfirmTransferKey(context.Context, *ConfirmTransferKeyRequest) (*ConfirmTransferKeyResponse, error)
	VoteConfirmChain(context.Context, *VoteConfirmChainRequest) (*VoteConfirmChainResponse, error)
	VoteConfirmGatewayDeployment(context.Context, *VoteConfirmGatewayDeploymentRequest) (*VoteConfirmGatewayDeploymentResponse, error)
	VoteConfirmDeposit(context.Context, *VoteConfirmDepositRequest) (*VoteConfirmDepositResponse, error)
	VoteConfirmToken(context.Context, *VoteConfirmTokenRequest) (*VoteConfirmTokenResponse, error)
	VoteConfirmTransferKey(context.Context, *VoteConfirmTransferKeyRequest) (*VoteConfirmTransferKeyResponse, error)
	CreateDeployToken(context.Context, *CreateDeployTokenRequest) (*CreateDeployTokenResponse, error)
	CreateBurnTokens(context.Context, *CreateBurnTokensRequest) (*CreateBurnTokensResponse, error)
	CreatePendingTransfers(context.Context, *CreatePendingTransfersRequest) (*CreatePendingTransfersResponse, error)
	CreateTransferOwnership(context.Context, *CreateTransferOwnershipRequest) (*CreateTransferOwnershipResponse, error)
	CreateTransferOperatorship(context.Context, *CreateTransferOperatorshipRequest) (*CreateTransferOperatorshipResponse, error)
	SignCommands(context.Context, *SignCommandsRequest) (*SignCommandsResponse, error)
	AddChain(context.Context, *AddChainRequest) (*AddChainResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) Link(ctx context.Context, req *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmChain(ctx context.Context, req *ConfirmChainRequest) (*ConfirmChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChain not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmGatewayDeployment(ctx context.Context, req *ConfirmGatewayDeploymentRequest) (*ConfirmGatewayDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmGatewayDeployment not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmToken(ctx context.Context, req *ConfirmTokenRequest) (*ConfirmTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmToken not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmDeposit(ctx context.Context, req *ConfirmDepositRequest) (*ConfirmDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDeposit not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmTransferKey(ctx context.Context, req *ConfirmTransferKeyRequest) (*ConfirmTransferKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTransferKey not implemented")
}
func (*UnimplementedMsgServiceServer) VoteConfirmChain(ctx context.Context, req *VoteConfirmChainRequest) (*VoteConfirmChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConfirmChain not implemented")
}
func (*UnimplementedMsgServiceServer) VoteConfirmGatewayDeployment(ctx context.Context, req *VoteConfirmGatewayDeploymentRequest) (*VoteConfirmGatewayDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConfirmGatewayDeployment not implemented")
}
func (*UnimplementedMsgServiceServer) VoteConfirmDeposit(ctx context.Context, req *VoteConfirmDepositRequest) (*VoteConfirmDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConfirmDeposit not implemented")
}
func (*UnimplementedMsgServiceServer) VoteConfirmToken(ctx context.Context, req *VoteConfirmTokenRequest) (*VoteConfirmTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConfirmToken not implemented")
}
func (*UnimplementedMsgServiceServer) VoteConfirmTransferKey(ctx context.Context, req *VoteConfirmTransferKeyRequest) (*VoteConfirmTransferKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConfirmTransferKey not implemented")
}
func (*UnimplementedMsgServiceServer) CreateDeployToken(ctx context.Context, req *CreateDeployTokenRequest) (*CreateDeployTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployToken not implemented")
}
func (*UnimplementedMsgServiceServer) CreateBurnTokens(ctx context.Context, req *CreateBurnTokensRequest) (*CreateBurnTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBurnTokens not implemented")
}
func (*UnimplementedMsgServiceServer) CreatePendingTransfers(ctx context.Context, req *CreatePendingTransfersRequest) (*CreatePendingTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePendingTransfers not implemented")
}
func (*UnimplementedMsgServiceServer) CreateTransferOwnership(ctx context.Context, req *CreateTransferOwnershipRequest) (*CreateTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferOwnership not implemented")
}
func (*UnimplementedMsgServiceServer) CreateTransferOperatorship(ctx context.Context, req *CreateTransferOperatorshipRequest) (*CreateTransferOperatorshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferOperatorship not implemented")
}
func (*UnimplementedMsgServiceServer) SignCommands(ctx context.Context, req *SignCommandsRequest) (*SignCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCommands not implemented")
}
func (*UnimplementedMsgServiceServer) AddChain(ctx context.Context, req *AddChainRequest) (*AddChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChain not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).Link(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/ConfirmChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmChain(ctx, req.(*ConfirmChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmGatewayDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmGatewayDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmGatewayDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/ConfirmGatewayDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmGatewayDeployment(ctx, req.(*ConfirmGatewayDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/ConfirmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmToken(ctx, req.(*ConfirmTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/ConfirmDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmDeposit(ctx, req.(*ConfirmDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmTransferKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTransferKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmTransferKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/ConfirmTransferKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmTransferKey(ctx, req.(*ConfirmTransferKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_VoteConfirmChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteConfirmChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).VoteConfirmChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/VoteConfirmChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).VoteConfirmChain(ctx, req.(*VoteConfirmChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_VoteConfirmGatewayDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteConfirmGatewayDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).VoteConfirmGatewayDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/VoteConfirmGatewayDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).VoteConfirmGatewayDeployment(ctx, req.(*VoteConfirmGatewayDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_VoteConfirmDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteConfirmDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).VoteConfirmDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/VoteConfirmDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).VoteConfirmDeposit(ctx, req.(*VoteConfirmDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_VoteConfirmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteConfirmTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).VoteConfirmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/VoteConfirmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).VoteConfirmToken(ctx, req.(*VoteConfirmTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_VoteConfirmTransferKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteConfirmTransferKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).VoteConfirmTransferKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/VoteConfirmTransferKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).VoteConfirmTransferKey(ctx, req.(*VoteConfirmTransferKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateDeployToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateDeployToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/CreateDeployToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateDeployToken(ctx, req.(*CreateDeployTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateBurnTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBurnTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateBurnTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/CreateBurnTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateBurnTokens(ctx, req.(*CreateBurnTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreatePendingTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePendingTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreatePendingTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/CreatePendingTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreatePendingTransfers(ctx, req.(*CreatePendingTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateTransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateTransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/CreateTransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateTransferOwnership(ctx, req.(*CreateTransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateTransferOperatorship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferOperatorshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateTransferOperatorship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/CreateTransferOperatorship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateTransferOperatorship(ctx, req.(*CreateTransferOperatorshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_SignCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).SignCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/SignCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).SignCommands(ctx, req.(*SignCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.MsgService/AddChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddChain(ctx, req.(*AddChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evm.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Link",
			Handler:    _MsgService_Link_Handler,
		},
		{
			MethodName: "ConfirmChain",
			Handler:    _MsgService_ConfirmChain_Handler,
		},
		{
			MethodName: "ConfirmGatewayDeployment",
			Handler:    _MsgService_ConfirmGatewayDeployment_Handler,
		},
		{
			MethodName: "ConfirmToken",
			Handler:    _MsgService_ConfirmToken_Handler,
		},
		{
			MethodName: "ConfirmDeposit",
			Handler:    _MsgService_ConfirmDeposit_Handler,
		},
		{
			MethodName: "ConfirmTransferKey",
			Handler:    _MsgService_ConfirmTransferKey_Handler,
		},
		{
			MethodName: "VoteConfirmChain",
			Handler:    _MsgService_VoteConfirmChain_Handler,
		},
		{
			MethodName: "VoteConfirmGatewayDeployment",
			Handler:    _MsgService_VoteConfirmGatewayDeployment_Handler,
		},
		{
			MethodName: "VoteConfirmDeposit",
			Handler:    _MsgService_VoteConfirmDeposit_Handler,
		},
		{
			MethodName: "VoteConfirmToken",
			Handler:    _MsgService_VoteConfirmToken_Handler,
		},
		{
			MethodName: "VoteConfirmTransferKey",
			Handler:    _MsgService_VoteConfirmTransferKey_Handler,
		},
		{
			MethodName: "CreateDeployToken",
			Handler:    _MsgService_CreateDeployToken_Handler,
		},
		{
			MethodName: "CreateBurnTokens",
			Handler:    _MsgService_CreateBurnTokens_Handler,
		},
		{
			MethodName: "CreatePendingTransfers",
			Handler:    _MsgService_CreatePendingTransfers_Handler,
		},
		{
			MethodName: "CreateTransferOwnership",
			Handler:    _MsgService_CreateTransferOwnership_Handler,
		},
		{
			MethodName: "CreateTransferOperatorship",
			Handler:    _MsgService_CreateTransferOperatorship_Handler,
		},
		{
			MethodName: "SignCommands",
			Handler:    _MsgService_SignCommands_Handler,
		},
		{
			MethodName: "AddChain",
			Handler:    _MsgService_AddChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evm/v1beta1/service.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// BurnerInfo queries the burner info for the specified address
	BurnerInfo(ctx context.Context, in *BurnerInfoRequest, opts ...grpc.CallOption) (*BurnerInfoResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) BurnerInfo(ctx context.Context, in *BurnerInfoRequest, opts ...grpc.CallOption) (*BurnerInfoResponse, error) {
	out := new(BurnerInfoResponse)
	err := c.cc.Invoke(ctx, "/evm.v1beta1.QueryService/BurnerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// BurnerInfo queries the burner info for the specified address
	BurnerInfo(context.Context, *BurnerInfoRequest) (*BurnerInfoResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) BurnerInfo(ctx context.Context, req *BurnerInfoRequest) (*BurnerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnerInfo not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_BurnerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).BurnerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evm.v1beta1.QueryService/BurnerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).BurnerInfo(ctx, req.(*BurnerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evm.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BurnerInfo",
			Handler:    _QueryService_BurnerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evm/v1beta1/service.proto",
}
