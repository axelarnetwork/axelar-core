// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/axelarnetwork/axelar-core/x/evm/types"
	nexus "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	snapshot "github.com/axelarnetwork/axelar-core/x/snapshot/exported"
	tss "github.com/axelarnetwork/axelar-core/x/tss/exported"
	exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	"github.com/ethereum/go-ethereum/common"
	ethTypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/tendermint/tendermint/libs/log"
	"math/big"
	"sync"
)

// Ensure, that VoterMock does implement types.Voter.
// If this is not the case, regenerate this file with moq.
var _ types.Voter = &VoterMock{}

// VoterMock is a mock implementation of types.Voter.
//
// 	func TestSomethingThatUsesVoter(t *testing.T) {
//
// 		// make and configure a mocked types.Voter
// 		mockedVoter := &VoterMock{
// 			DeletePollFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta)  {
// 				panic("mock out the DeletePoll method")
// 			},
// 			InitPollFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error {
// 				panic("mock out the InitPoll method")
// 			},
// 			ResultFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta) exported.VotingData {
// 				panic("mock out the Result method")
// 			},
// 			TallyVoteFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.AccAddress, pollMeta exported.PollMeta, data exported.VotingData) error {
// 				panic("mock out the TallyVote method")
// 			},
// 		}
//
// 		// use mockedVoter in code that requires types.Voter
// 		// and then make assertions.
//
// 	}
type VoterMock struct {
	// DeletePollFunc mocks the DeletePoll method.
	DeletePollFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta)

	// InitPollFunc mocks the InitPoll method.
	InitPollFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error

	// ResultFunc mocks the Result method.
	ResultFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta) exported.VotingData

	// TallyVoteFunc mocks the TallyVote method.
	TallyVoteFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.AccAddress, pollMeta exported.PollMeta, data exported.VotingData) error

	// calls tracks calls to the methods.
	calls struct {
		// DeletePoll holds details about calls to the DeletePoll method.
		DeletePoll []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Poll is the poll argument value.
			Poll exported.PollMeta
		}
		// InitPoll holds details about calls to the InitPoll method.
		InitPoll []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Poll is the poll argument value.
			Poll exported.PollMeta
			// SnapshotCounter is the snapshotCounter argument value.
			SnapshotCounter int64
			// ExpireAt is the expireAt argument value.
			ExpireAt int64
		}
		// Result holds details about calls to the Result method.
		Result []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Poll is the poll argument value.
			Poll exported.PollMeta
		}
		// TallyVote holds details about calls to the TallyVote method.
		TallyVote []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender github_com_cosmos_cosmos_sdk_types.AccAddress
			// PollMeta is the pollMeta argument value.
			PollMeta exported.PollMeta
			// Data is the data argument value.
			Data exported.VotingData
		}
	}
	lockDeletePoll sync.RWMutex
	lockInitPoll   sync.RWMutex
	lockResult     sync.RWMutex
	lockTallyVote  sync.RWMutex
}

// DeletePoll calls DeletePollFunc.
func (mock *VoterMock) DeletePoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta) {
	if mock.DeletePollFunc == nil {
		panic("VoterMock.DeletePollFunc: method is nil but Voter.DeletePoll was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Poll exported.PollMeta
	}{
		Ctx:  ctx,
		Poll: poll,
	}
	mock.lockDeletePoll.Lock()
	mock.calls.DeletePoll = append(mock.calls.DeletePoll, callInfo)
	mock.lockDeletePoll.Unlock()
	mock.DeletePollFunc(ctx, poll)
}

// DeletePollCalls gets all the calls that were made to DeletePoll.
// Check the length with:
//     len(mockedVoter.DeletePollCalls())
func (mock *VoterMock) DeletePollCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	Poll exported.PollMeta
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Poll exported.PollMeta
	}
	mock.lockDeletePoll.RLock()
	calls = mock.calls.DeletePoll
	mock.lockDeletePoll.RUnlock()
	return calls
}

// InitPoll calls InitPollFunc.
func (mock *VoterMock) InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error {
	if mock.InitPollFunc == nil {
		panic("VoterMock.InitPollFunc: method is nil but Voter.InitPoll was just called")
	}
	callInfo := struct {
		Ctx             github_com_cosmos_cosmos_sdk_types.Context
		Poll            exported.PollMeta
		SnapshotCounter int64
		ExpireAt        int64
	}{
		Ctx:             ctx,
		Poll:            poll,
		SnapshotCounter: snapshotCounter,
		ExpireAt:        expireAt,
	}
	mock.lockInitPoll.Lock()
	mock.calls.InitPoll = append(mock.calls.InitPoll, callInfo)
	mock.lockInitPoll.Unlock()
	return mock.InitPollFunc(ctx, poll, snapshotCounter, expireAt)
}

// InitPollCalls gets all the calls that were made to InitPoll.
// Check the length with:
//     len(mockedVoter.InitPollCalls())
func (mock *VoterMock) InitPollCalls() []struct {
	Ctx             github_com_cosmos_cosmos_sdk_types.Context
	Poll            exported.PollMeta
	SnapshotCounter int64
	ExpireAt        int64
} {
	var calls []struct {
		Ctx             github_com_cosmos_cosmos_sdk_types.Context
		Poll            exported.PollMeta
		SnapshotCounter int64
		ExpireAt        int64
	}
	mock.lockInitPoll.RLock()
	calls = mock.calls.InitPoll
	mock.lockInitPoll.RUnlock()
	return calls
}

// Result calls ResultFunc.
func (mock *VoterMock) Result(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta) exported.VotingData {
	if mock.ResultFunc == nil {
		panic("VoterMock.ResultFunc: method is nil but Voter.Result was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Poll exported.PollMeta
	}{
		Ctx:  ctx,
		Poll: poll,
	}
	mock.lockResult.Lock()
	mock.calls.Result = append(mock.calls.Result, callInfo)
	mock.lockResult.Unlock()
	return mock.ResultFunc(ctx, poll)
}

// ResultCalls gets all the calls that were made to Result.
// Check the length with:
//     len(mockedVoter.ResultCalls())
func (mock *VoterMock) ResultCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	Poll exported.PollMeta
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Poll exported.PollMeta
	}
	mock.lockResult.RLock()
	calls = mock.calls.Result
	mock.lockResult.RUnlock()
	return calls
}

// TallyVote calls TallyVoteFunc.
func (mock *VoterMock) TallyVote(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.AccAddress, pollMeta exported.PollMeta, data exported.VotingData) error {
	if mock.TallyVoteFunc == nil {
		panic("VoterMock.TallyVoteFunc: method is nil but Voter.TallyVote was just called")
	}
	callInfo := struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Sender   github_com_cosmos_cosmos_sdk_types.AccAddress
		PollMeta exported.PollMeta
		Data     exported.VotingData
	}{
		Ctx:      ctx,
		Sender:   sender,
		PollMeta: pollMeta,
		Data:     data,
	}
	mock.lockTallyVote.Lock()
	mock.calls.TallyVote = append(mock.calls.TallyVote, callInfo)
	mock.lockTallyVote.Unlock()
	return mock.TallyVoteFunc(ctx, sender, pollMeta, data)
}

// TallyVoteCalls gets all the calls that were made to TallyVote.
// Check the length with:
//     len(mockedVoter.TallyVoteCalls())
func (mock *VoterMock) TallyVoteCalls() []struct {
	Ctx      github_com_cosmos_cosmos_sdk_types.Context
	Sender   github_com_cosmos_cosmos_sdk_types.AccAddress
	PollMeta exported.PollMeta
	Data     exported.VotingData
} {
	var calls []struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Sender   github_com_cosmos_cosmos_sdk_types.AccAddress
		PollMeta exported.PollMeta
		Data     exported.VotingData
	}
	mock.lockTallyVote.RLock()
	calls = mock.calls.TallyVote
	mock.lockTallyVote.RUnlock()
	return calls
}

// Ensure, that SignerMock does implement types.Signer.
// If this is not the case, regenerate this file with moq.
var _ types.Signer = &SignerMock{}

// SignerMock is a mock implementation of types.Signer.
//
// 	func TestSomethingThatUsesSigner(t *testing.T) {
//
// 		// make and configure a mocked types.Signer
// 		mockedSigner := &SignerMock{
// 			GetCurrentKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (tss.Key, bool) {
// 				panic("mock out the GetCurrentKey method")
// 			},
// 			GetCurrentKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (string, bool) {
// 				panic("mock out the GetCurrentKeyID method")
// 			},
// 			GetKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID string) (tss.Key, bool) {
// 				panic("mock out the GetKey method")
// 			},
// 			GetKeyForSigIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (tss.Key, bool) {
// 				panic("mock out the GetKeyForSigID method")
// 			},
// 			GetNextKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (tss.Key, bool) {
// 				panic("mock out the GetNextKey method")
// 			},
// 			GetSigFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (tss.Signature, bool) {
// 				panic("mock out the GetSig method")
// 			},
// 			GetSnapshotCounterForKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID string) (int64, bool) {
// 				panic("mock out the GetSnapshotCounterForKeyID method")
// 			},
// 			StartSignFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, initPoll interface{InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error}, keyID string, sigID string, msg []byte, snapshotMoqParam snapshot.Snapshot) error {
// 				panic("mock out the StartSign method")
// 			},
// 		}
//
// 		// use mockedSigner in code that requires types.Signer
// 		// and then make assertions.
//
// 	}
type SignerMock struct {
	// GetCurrentKeyFunc mocks the GetCurrentKey method.
	GetCurrentKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (tss.Key, bool)

	// GetCurrentKeyIDFunc mocks the GetCurrentKeyID method.
	GetCurrentKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (string, bool)

	// GetKeyFunc mocks the GetKey method.
	GetKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID string) (tss.Key, bool)

	// GetKeyForSigIDFunc mocks the GetKeyForSigID method.
	GetKeyForSigIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (tss.Key, bool)

	// GetNextKeyFunc mocks the GetNextKey method.
	GetNextKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (tss.Key, bool)

	// GetSigFunc mocks the GetSig method.
	GetSigFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (tss.Signature, bool)

	// GetSnapshotCounterForKeyIDFunc mocks the GetSnapshotCounterForKeyID method.
	GetSnapshotCounterForKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID string) (int64, bool)

	// StartSignFunc mocks the StartSign method.
	StartSignFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, initPoll interface {
		InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error
	}, keyID string, sigID string, msg []byte, snapshotMoqParam snapshot.Snapshot) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCurrentKey holds details about calls to the GetCurrentKey method.
		GetCurrentKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole tss.KeyRole
		}
		// GetCurrentKeyID holds details about calls to the GetCurrentKeyID method.
		GetCurrentKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole tss.KeyRole
		}
		// GetKey holds details about calls to the GetKey method.
		GetKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID string
		}
		// GetKeyForSigID holds details about calls to the GetKeyForSigID method.
		GetKeyForSigID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetNextKey holds details about calls to the GetNextKey method.
		GetNextKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole tss.KeyRole
		}
		// GetSig holds details about calls to the GetSig method.
		GetSig []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetSnapshotCounterForKeyID holds details about calls to the GetSnapshotCounterForKeyID method.
		GetSnapshotCounterForKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID string
		}
		// StartSign holds details about calls to the StartSign method.
		StartSign []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// InitPoll is the initPoll argument value.
			InitPoll interface {
				InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error
			}
			// KeyID is the keyID argument value.
			KeyID string
			// SigID is the sigID argument value.
			SigID string
			// Msg is the msg argument value.
			Msg []byte
			// SnapshotMoqParam is the snapshotMoqParam argument value.
			SnapshotMoqParam snapshot.Snapshot
		}
	}
	lockGetCurrentKey              sync.RWMutex
	lockGetCurrentKeyID            sync.RWMutex
	lockGetKey                     sync.RWMutex
	lockGetKeyForSigID             sync.RWMutex
	lockGetNextKey                 sync.RWMutex
	lockGetSig                     sync.RWMutex
	lockGetSnapshotCounterForKeyID sync.RWMutex
	lockStartSign                  sync.RWMutex
}

// GetCurrentKey calls GetCurrentKeyFunc.
func (mock *SignerMock) GetCurrentKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (tss.Key, bool) {
	if mock.GetCurrentKeyFunc == nil {
		panic("SignerMock.GetCurrentKeyFunc: method is nil but Signer.GetCurrentKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole tss.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKey.Lock()
	mock.calls.GetCurrentKey = append(mock.calls.GetCurrentKey, callInfo)
	mock.lockGetCurrentKey.Unlock()
	return mock.GetCurrentKeyFunc(ctx, chain, keyRole)
}

// GetCurrentKeyCalls gets all the calls that were made to GetCurrentKey.
// Check the length with:
//     len(mockedSigner.GetCurrentKeyCalls())
func (mock *SignerMock) GetCurrentKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole tss.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole tss.KeyRole
	}
	mock.lockGetCurrentKey.RLock()
	calls = mock.calls.GetCurrentKey
	mock.lockGetCurrentKey.RUnlock()
	return calls
}

// GetCurrentKeyID calls GetCurrentKeyIDFunc.
func (mock *SignerMock) GetCurrentKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (string, bool) {
	if mock.GetCurrentKeyIDFunc == nil {
		panic("SignerMock.GetCurrentKeyIDFunc: method is nil but Signer.GetCurrentKeyID was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole tss.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKeyID.Lock()
	mock.calls.GetCurrentKeyID = append(mock.calls.GetCurrentKeyID, callInfo)
	mock.lockGetCurrentKeyID.Unlock()
	return mock.GetCurrentKeyIDFunc(ctx, chain, keyRole)
}

// GetCurrentKeyIDCalls gets all the calls that were made to GetCurrentKeyID.
// Check the length with:
//     len(mockedSigner.GetCurrentKeyIDCalls())
func (mock *SignerMock) GetCurrentKeyIDCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole tss.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole tss.KeyRole
	}
	mock.lockGetCurrentKeyID.RLock()
	calls = mock.calls.GetCurrentKeyID
	mock.lockGetCurrentKeyID.RUnlock()
	return calls
}

// GetKey calls GetKeyFunc.
func (mock *SignerMock) GetKey(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID string) (tss.Key, bool) {
	if mock.GetKeyFunc == nil {
		panic("SignerMock.GetKeyFunc: method is nil but Signer.GetKey was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID string
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetKey.Lock()
	mock.calls.GetKey = append(mock.calls.GetKey, callInfo)
	mock.lockGetKey.Unlock()
	return mock.GetKeyFunc(ctx, keyID)
}

// GetKeyCalls gets all the calls that were made to GetKey.
// Check the length with:
//     len(mockedSigner.GetKeyCalls())
func (mock *SignerMock) GetKeyCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID string
	}
	mock.lockGetKey.RLock()
	calls = mock.calls.GetKey
	mock.lockGetKey.RUnlock()
	return calls
}

// GetKeyForSigID calls GetKeyForSigIDFunc.
func (mock *SignerMock) GetKeyForSigID(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (tss.Key, bool) {
	if mock.GetKeyForSigIDFunc == nil {
		panic("SignerMock.GetKeyForSigIDFunc: method is nil but Signer.GetKeyForSigID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetKeyForSigID.Lock()
	mock.calls.GetKeyForSigID = append(mock.calls.GetKeyForSigID, callInfo)
	mock.lockGetKeyForSigID.Unlock()
	return mock.GetKeyForSigIDFunc(ctx, sigID)
}

// GetKeyForSigIDCalls gets all the calls that were made to GetKeyForSigID.
// Check the length with:
//     len(mockedSigner.GetKeyForSigIDCalls())
func (mock *SignerMock) GetKeyForSigIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetKeyForSigID.RLock()
	calls = mock.calls.GetKeyForSigID
	mock.lockGetKeyForSigID.RUnlock()
	return calls
}

// GetNextKey calls GetNextKeyFunc.
func (mock *SignerMock) GetNextKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole tss.KeyRole) (tss.Key, bool) {
	if mock.GetNextKeyFunc == nil {
		panic("SignerMock.GetNextKeyFunc: method is nil but Signer.GetNextKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole tss.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetNextKey.Lock()
	mock.calls.GetNextKey = append(mock.calls.GetNextKey, callInfo)
	mock.lockGetNextKey.Unlock()
	return mock.GetNextKeyFunc(ctx, chain, keyRole)
}

// GetNextKeyCalls gets all the calls that were made to GetNextKey.
// Check the length with:
//     len(mockedSigner.GetNextKeyCalls())
func (mock *SignerMock) GetNextKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole tss.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole tss.KeyRole
	}
	mock.lockGetNextKey.RLock()
	calls = mock.calls.GetNextKey
	mock.lockGetNextKey.RUnlock()
	return calls
}

// GetSig calls GetSigFunc.
func (mock *SignerMock) GetSig(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (tss.Signature, bool) {
	if mock.GetSigFunc == nil {
		panic("SignerMock.GetSigFunc: method is nil but Signer.GetSig was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetSig.Lock()
	mock.calls.GetSig = append(mock.calls.GetSig, callInfo)
	mock.lockGetSig.Unlock()
	return mock.GetSigFunc(ctx, sigID)
}

// GetSigCalls gets all the calls that were made to GetSig.
// Check the length with:
//     len(mockedSigner.GetSigCalls())
func (mock *SignerMock) GetSigCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetSig.RLock()
	calls = mock.calls.GetSig
	mock.lockGetSig.RUnlock()
	return calls
}

// GetSnapshotCounterForKeyID calls GetSnapshotCounterForKeyIDFunc.
func (mock *SignerMock) GetSnapshotCounterForKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID string) (int64, bool) {
	if mock.GetSnapshotCounterForKeyIDFunc == nil {
		panic("SignerMock.GetSnapshotCounterForKeyIDFunc: method is nil but Signer.GetSnapshotCounterForKeyID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID string
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetSnapshotCounterForKeyID.Lock()
	mock.calls.GetSnapshotCounterForKeyID = append(mock.calls.GetSnapshotCounterForKeyID, callInfo)
	mock.lockGetSnapshotCounterForKeyID.Unlock()
	return mock.GetSnapshotCounterForKeyIDFunc(ctx, keyID)
}

// GetSnapshotCounterForKeyIDCalls gets all the calls that were made to GetSnapshotCounterForKeyID.
// Check the length with:
//     len(mockedSigner.GetSnapshotCounterForKeyIDCalls())
func (mock *SignerMock) GetSnapshotCounterForKeyIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID string
	}
	mock.lockGetSnapshotCounterForKeyID.RLock()
	calls = mock.calls.GetSnapshotCounterForKeyID
	mock.lockGetSnapshotCounterForKeyID.RUnlock()
	return calls
}

// StartSign calls StartSignFunc.
func (mock *SignerMock) StartSign(ctx github_com_cosmos_cosmos_sdk_types.Context, initPoll interface {
	InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error
}, keyID string, sigID string, msg []byte, snapshotMoqParam snapshot.Snapshot) error {
	if mock.StartSignFunc == nil {
		panic("SignerMock.StartSignFunc: method is nil but Signer.StartSign was just called")
	}
	callInfo := struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		InitPoll interface {
			InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error
		}
		KeyID            string
		SigID            string
		Msg              []byte
		SnapshotMoqParam snapshot.Snapshot
	}{
		Ctx:              ctx,
		InitPoll:         initPoll,
		KeyID:            keyID,
		SigID:            sigID,
		Msg:              msg,
		SnapshotMoqParam: snapshotMoqParam,
	}
	mock.lockStartSign.Lock()
	mock.calls.StartSign = append(mock.calls.StartSign, callInfo)
	mock.lockStartSign.Unlock()
	return mock.StartSignFunc(ctx, initPoll, keyID, sigID, msg, snapshotMoqParam)
}

// StartSignCalls gets all the calls that were made to StartSign.
// Check the length with:
//     len(mockedSigner.StartSignCalls())
func (mock *SignerMock) StartSignCalls() []struct {
	Ctx      github_com_cosmos_cosmos_sdk_types.Context
	InitPoll interface {
		InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error
	}
	KeyID            string
	SigID            string
	Msg              []byte
	SnapshotMoqParam snapshot.Snapshot
} {
	var calls []struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		InitPoll interface {
			InitPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, poll exported.PollMeta, snapshotCounter int64, expireAt int64) error
		}
		KeyID            string
		SigID            string
		Msg              []byte
		SnapshotMoqParam snapshot.Snapshot
	}
	mock.lockStartSign.RLock()
	calls = mock.calls.StartSign
	mock.lockStartSign.RUnlock()
	return calls
}

// Ensure, that NexusMock does implement types.Nexus.
// If this is not the case, regenerate this file with moq.
var _ types.Nexus = &NexusMock{}

// NexusMock is a mock implementation of types.Nexus.
//
// 	func TestSomethingThatUsesNexus(t *testing.T) {
//
// 		// make and configure a mocked types.Nexus
// 		mockedNexus := &NexusMock{
// 			ArchivePendingTransferFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, transfer nexus.CrossChainTransfer)  {
// 				panic("mock out the ArchivePendingTransfer method")
// 			},
// 			EnqueueForTransferFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, amount github_com_cosmos_cosmos_sdk_types.Coin) error {
// 				panic("mock out the EnqueueForTransfer method")
// 			},
// 			GetChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
// 				panic("mock out the GetChain method")
// 			},
// 			GetRecipientFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool) {
// 				panic("mock out the GetRecipient method")
// 			},
// 			GetTransfersForChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer {
// 				panic("mock out the GetTransfersForChain method")
// 			},
// 			IsAssetRegisteredFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) bool {
// 				panic("mock out the IsAssetRegistered method")
// 			},
// 			LinkAddressesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress)  {
// 				panic("mock out the LinkAddresses method")
// 			},
// 			RegisterAssetFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string)  {
// 				panic("mock out the RegisterAsset method")
// 			},
// 			SetChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)  {
// 				panic("mock out the SetChain method")
// 			},
// 		}
//
// 		// use mockedNexus in code that requires types.Nexus
// 		// and then make assertions.
//
// 	}
type NexusMock struct {
	// ArchivePendingTransferFunc mocks the ArchivePendingTransfer method.
	ArchivePendingTransferFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, transfer nexus.CrossChainTransfer)

	// EnqueueForTransferFunc mocks the EnqueueForTransfer method.
	EnqueueForTransferFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, amount github_com_cosmos_cosmos_sdk_types.Coin) error

	// GetChainFunc mocks the GetChain method.
	GetChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool)

	// GetRecipientFunc mocks the GetRecipient method.
	GetRecipientFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool)

	// GetTransfersForChainFunc mocks the GetTransfersForChain method.
	GetTransfersForChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer

	// IsAssetRegisteredFunc mocks the IsAssetRegistered method.
	IsAssetRegisteredFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) bool

	// LinkAddressesFunc mocks the LinkAddresses method.
	LinkAddressesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress)

	// RegisterAssetFunc mocks the RegisterAsset method.
	RegisterAssetFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string)

	// SetChainFunc mocks the SetChain method.
	SetChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)

	// calls tracks calls to the methods.
	calls struct {
		// ArchivePendingTransfer holds details about calls to the ArchivePendingTransfer method.
		ArchivePendingTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Transfer is the transfer argument value.
			Transfer nexus.CrossChainTransfer
		}
		// EnqueueForTransfer holds details about calls to the EnqueueForTransfer method.
		EnqueueForTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
			// Amount is the amount argument value.
			Amount github_com_cosmos_cosmos_sdk_types.Coin
		}
		// GetChain holds details about calls to the GetChain method.
		GetChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetRecipient holds details about calls to the GetRecipient method.
		GetRecipient []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
		}
		// GetTransfersForChain holds details about calls to the GetTransfersForChain method.
		GetTransfersForChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// State is the state argument value.
			State nexus.TransferState
		}
		// IsAssetRegistered holds details about calls to the IsAssetRegistered method.
		IsAssetRegistered []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// ChainName is the chainName argument value.
			ChainName string
			// Denom is the denom argument value.
			Denom string
		}
		// LinkAddresses holds details about calls to the LinkAddresses method.
		LinkAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
			// Recipient is the recipient argument value.
			Recipient nexus.CrossChainAddress
		}
		// RegisterAsset holds details about calls to the RegisterAsset method.
		RegisterAsset []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// ChainName is the chainName argument value.
			ChainName string
			// Denom is the denom argument value.
			Denom string
		}
		// SetChain holds details about calls to the SetChain method.
		SetChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
	}
	lockArchivePendingTransfer sync.RWMutex
	lockEnqueueForTransfer     sync.RWMutex
	lockGetChain               sync.RWMutex
	lockGetRecipient           sync.RWMutex
	lockGetTransfersForChain   sync.RWMutex
	lockIsAssetRegistered      sync.RWMutex
	lockLinkAddresses          sync.RWMutex
	lockRegisterAsset          sync.RWMutex
	lockSetChain               sync.RWMutex
}

// ArchivePendingTransfer calls ArchivePendingTransferFunc.
func (mock *NexusMock) ArchivePendingTransfer(ctx github_com_cosmos_cosmos_sdk_types.Context, transfer nexus.CrossChainTransfer) {
	if mock.ArchivePendingTransferFunc == nil {
		panic("NexusMock.ArchivePendingTransferFunc: method is nil but Nexus.ArchivePendingTransfer was just called")
	}
	callInfo := struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Transfer nexus.CrossChainTransfer
	}{
		Ctx:      ctx,
		Transfer: transfer,
	}
	mock.lockArchivePendingTransfer.Lock()
	mock.calls.ArchivePendingTransfer = append(mock.calls.ArchivePendingTransfer, callInfo)
	mock.lockArchivePendingTransfer.Unlock()
	mock.ArchivePendingTransferFunc(ctx, transfer)
}

// ArchivePendingTransferCalls gets all the calls that were made to ArchivePendingTransfer.
// Check the length with:
//     len(mockedNexus.ArchivePendingTransferCalls())
func (mock *NexusMock) ArchivePendingTransferCalls() []struct {
	Ctx      github_com_cosmos_cosmos_sdk_types.Context
	Transfer nexus.CrossChainTransfer
} {
	var calls []struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Transfer nexus.CrossChainTransfer
	}
	mock.lockArchivePendingTransfer.RLock()
	calls = mock.calls.ArchivePendingTransfer
	mock.lockArchivePendingTransfer.RUnlock()
	return calls
}

// EnqueueForTransfer calls EnqueueForTransferFunc.
func (mock *NexusMock) EnqueueForTransfer(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, amount github_com_cosmos_cosmos_sdk_types.Coin) error {
	if mock.EnqueueForTransferFunc == nil {
		panic("NexusMock.EnqueueForTransferFunc: method is nil but Nexus.EnqueueForTransfer was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
		Amount github_com_cosmos_cosmos_sdk_types.Coin
	}{
		Ctx:    ctx,
		Sender: sender,
		Amount: amount,
	}
	mock.lockEnqueueForTransfer.Lock()
	mock.calls.EnqueueForTransfer = append(mock.calls.EnqueueForTransfer, callInfo)
	mock.lockEnqueueForTransfer.Unlock()
	return mock.EnqueueForTransferFunc(ctx, sender, amount)
}

// EnqueueForTransferCalls gets all the calls that were made to EnqueueForTransfer.
// Check the length with:
//     len(mockedNexus.EnqueueForTransferCalls())
func (mock *NexusMock) EnqueueForTransferCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Sender nexus.CrossChainAddress
	Amount github_com_cosmos_cosmos_sdk_types.Coin
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
		Amount github_com_cosmos_cosmos_sdk_types.Coin
	}
	mock.lockEnqueueForTransfer.RLock()
	calls = mock.calls.EnqueueForTransfer
	mock.lockEnqueueForTransfer.RUnlock()
	return calls
}

// GetChain calls GetChainFunc.
func (mock *NexusMock) GetChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
	if mock.GetChainFunc == nil {
		panic("NexusMock.GetChainFunc: method is nil but Nexus.GetChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChain.Lock()
	mock.calls.GetChain = append(mock.calls.GetChain, callInfo)
	mock.lockGetChain.Unlock()
	return mock.GetChainFunc(ctx, chain)
}

// GetChainCalls gets all the calls that were made to GetChain.
// Check the length with:
//     len(mockedNexus.GetChainCalls())
func (mock *NexusMock) GetChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetChain.RLock()
	calls = mock.calls.GetChain
	mock.lockGetChain.RUnlock()
	return calls
}

// GetRecipient calls GetRecipientFunc.
func (mock *NexusMock) GetRecipient(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool) {
	if mock.GetRecipientFunc == nil {
		panic("NexusMock.GetRecipientFunc: method is nil but Nexus.GetRecipient was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
	}{
		Ctx:    ctx,
		Sender: sender,
	}
	mock.lockGetRecipient.Lock()
	mock.calls.GetRecipient = append(mock.calls.GetRecipient, callInfo)
	mock.lockGetRecipient.Unlock()
	return mock.GetRecipientFunc(ctx, sender)
}

// GetRecipientCalls gets all the calls that were made to GetRecipient.
// Check the length with:
//     len(mockedNexus.GetRecipientCalls())
func (mock *NexusMock) GetRecipientCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Sender nexus.CrossChainAddress
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
	}
	mock.lockGetRecipient.RLock()
	calls = mock.calls.GetRecipient
	mock.lockGetRecipient.RUnlock()
	return calls
}

// GetTransfersForChain calls GetTransfersForChainFunc.
func (mock *NexusMock) GetTransfersForChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer {
	if mock.GetTransfersForChainFunc == nil {
		panic("NexusMock.GetTransfersForChainFunc: method is nil but Nexus.GetTransfersForChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
		State nexus.TransferState
	}{
		Ctx:   ctx,
		Chain: chain,
		State: state,
	}
	mock.lockGetTransfersForChain.Lock()
	mock.calls.GetTransfersForChain = append(mock.calls.GetTransfersForChain, callInfo)
	mock.lockGetTransfersForChain.Unlock()
	return mock.GetTransfersForChainFunc(ctx, chain, state)
}

// GetTransfersForChainCalls gets all the calls that were made to GetTransfersForChain.
// Check the length with:
//     len(mockedNexus.GetTransfersForChainCalls())
func (mock *NexusMock) GetTransfersForChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
	State nexus.TransferState
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
		State nexus.TransferState
	}
	mock.lockGetTransfersForChain.RLock()
	calls = mock.calls.GetTransfersForChain
	mock.lockGetTransfersForChain.RUnlock()
	return calls
}

// IsAssetRegistered calls IsAssetRegisteredFunc.
func (mock *NexusMock) IsAssetRegistered(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) bool {
	if mock.IsAssetRegisteredFunc == nil {
		panic("NexusMock.IsAssetRegisteredFunc: method is nil but Nexus.IsAssetRegistered was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}{
		Ctx:       ctx,
		ChainName: chainName,
		Denom:     denom,
	}
	mock.lockIsAssetRegistered.Lock()
	mock.calls.IsAssetRegistered = append(mock.calls.IsAssetRegistered, callInfo)
	mock.lockIsAssetRegistered.Unlock()
	return mock.IsAssetRegisteredFunc(ctx, chainName, denom)
}

// IsAssetRegisteredCalls gets all the calls that were made to IsAssetRegistered.
// Check the length with:
//     len(mockedNexus.IsAssetRegisteredCalls())
func (mock *NexusMock) IsAssetRegisteredCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	ChainName string
	Denom     string
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}
	mock.lockIsAssetRegistered.RLock()
	calls = mock.calls.IsAssetRegistered
	mock.lockIsAssetRegistered.RUnlock()
	return calls
}

// LinkAddresses calls LinkAddressesFunc.
func (mock *NexusMock) LinkAddresses(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress) {
	if mock.LinkAddressesFunc == nil {
		panic("NexusMock.LinkAddressesFunc: method is nil but Nexus.LinkAddresses was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Sender    nexus.CrossChainAddress
		Recipient nexus.CrossChainAddress
	}{
		Ctx:       ctx,
		Sender:    sender,
		Recipient: recipient,
	}
	mock.lockLinkAddresses.Lock()
	mock.calls.LinkAddresses = append(mock.calls.LinkAddresses, callInfo)
	mock.lockLinkAddresses.Unlock()
	mock.LinkAddressesFunc(ctx, sender, recipient)
}

// LinkAddressesCalls gets all the calls that were made to LinkAddresses.
// Check the length with:
//     len(mockedNexus.LinkAddressesCalls())
func (mock *NexusMock) LinkAddressesCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Sender    nexus.CrossChainAddress
	Recipient nexus.CrossChainAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Sender    nexus.CrossChainAddress
		Recipient nexus.CrossChainAddress
	}
	mock.lockLinkAddresses.RLock()
	calls = mock.calls.LinkAddresses
	mock.lockLinkAddresses.RUnlock()
	return calls
}

// RegisterAsset calls RegisterAssetFunc.
func (mock *NexusMock) RegisterAsset(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) {
	if mock.RegisterAssetFunc == nil {
		panic("NexusMock.RegisterAssetFunc: method is nil but Nexus.RegisterAsset was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}{
		Ctx:       ctx,
		ChainName: chainName,
		Denom:     denom,
	}
	mock.lockRegisterAsset.Lock()
	mock.calls.RegisterAsset = append(mock.calls.RegisterAsset, callInfo)
	mock.lockRegisterAsset.Unlock()
	mock.RegisterAssetFunc(ctx, chainName, denom)
}

// RegisterAssetCalls gets all the calls that were made to RegisterAsset.
// Check the length with:
//     len(mockedNexus.RegisterAssetCalls())
func (mock *NexusMock) RegisterAssetCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	ChainName string
	Denom     string
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}
	mock.lockRegisterAsset.RLock()
	calls = mock.calls.RegisterAsset
	mock.lockRegisterAsset.RUnlock()
	return calls
}

// SetChain calls SetChainFunc.
func (mock *NexusMock) SetChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) {
	if mock.SetChainFunc == nil {
		panic("NexusMock.SetChainFunc: method is nil but Nexus.SetChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockSetChain.Lock()
	mock.calls.SetChain = append(mock.calls.SetChain, callInfo)
	mock.lockSetChain.Unlock()
	mock.SetChainFunc(ctx, chain)
}

// SetChainCalls gets all the calls that were made to SetChain.
// Check the length with:
//     len(mockedNexus.SetChainCalls())
func (mock *NexusMock) SetChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockSetChain.RLock()
	calls = mock.calls.SetChain
	mock.lockSetChain.RUnlock()
	return calls
}

// Ensure, that SnapshotterMock does implement types.Snapshotter.
// If this is not the case, regenerate this file with moq.
var _ types.Snapshotter = &SnapshotterMock{}

// SnapshotterMock is a mock implementation of types.Snapshotter.
//
// 	func TestSomethingThatUsesSnapshotter(t *testing.T) {
//
// 		// make and configure a mocked types.Snapshotter
// 		mockedSnapshotter := &SnapshotterMock{
// 			GetSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, counter int64) (snapshot.Snapshot, bool) {
// 				panic("mock out the GetSnapshot method")
// 			},
// 		}
//
// 		// use mockedSnapshotter in code that requires types.Snapshotter
// 		// and then make assertions.
//
// 	}
type SnapshotterMock struct {
	// GetSnapshotFunc mocks the GetSnapshot method.
	GetSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, counter int64) (snapshot.Snapshot, bool)

	// calls tracks calls to the methods.
	calls struct {
		// GetSnapshot holds details about calls to the GetSnapshot method.
		GetSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Counter is the counter argument value.
			Counter int64
		}
	}
	lockGetSnapshot sync.RWMutex
}

// GetSnapshot calls GetSnapshotFunc.
func (mock *SnapshotterMock) GetSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, counter int64) (snapshot.Snapshot, bool) {
	if mock.GetSnapshotFunc == nil {
		panic("SnapshotterMock.GetSnapshotFunc: method is nil but Snapshotter.GetSnapshot was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Counter int64
	}{
		Ctx:     ctx,
		Counter: counter,
	}
	mock.lockGetSnapshot.Lock()
	mock.calls.GetSnapshot = append(mock.calls.GetSnapshot, callInfo)
	mock.lockGetSnapshot.Unlock()
	return mock.GetSnapshotFunc(ctx, counter)
}

// GetSnapshotCalls gets all the calls that were made to GetSnapshot.
// Check the length with:
//     len(mockedSnapshotter.GetSnapshotCalls())
func (mock *SnapshotterMock) GetSnapshotCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Counter int64
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Counter int64
	}
	mock.lockGetSnapshot.RLock()
	calls = mock.calls.GetSnapshot
	mock.lockGetSnapshot.RUnlock()
	return calls
}

// Ensure, that EVMKeeperMock does implement types.EVMKeeper.
// If this is not the case, regenerate this file with moq.
var _ types.EVMKeeper = &EVMKeeperMock{}

// EVMKeeperMock is a mock implementation of types.EVMKeeper.
//
// 	func TestSomethingThatUsesEVMKeeper(t *testing.T) {
//
// 		// make and configure a mocked types.EVMKeeper
// 		mockedEVMKeeper := &EVMKeeperMock{
// 			DeleteDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, deposit types.ERC20Deposit)  {
// 				panic("mock out the DeleteDeposit method")
// 			},
// 			DeletePendingChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string)  {
// 				panic("mock out the DeletePendingChain method")
// 			},
// 			DeletePendingDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta)  {
// 				panic("mock out the DeletePendingDeposit method")
// 			},
// 			DeletePendingTokenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta)  {
// 				panic("mock out the DeletePendingToken method")
// 			},
// 			GetBurnerAddressAndSaltFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, tokenAddr common.Address, recipient string, gatewayAddr common.Address) (common.Address, common.Hash, error) {
// 				panic("mock out the GetBurnerAddressAndSalt method")
// 			},
// 			GetBurnerInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, address common.Address) *types.BurnerInfo {
// 				panic("mock out the GetBurnerInfo method")
// 			},
// 			GetChainIDByNetworkFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, network string) *big.Int {
// 				panic("mock out the GetChainIDByNetwork method")
// 			},
// 			GetConfirmedDepositsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) []types.ERC20Deposit {
// 				panic("mock out the GetConfirmedDeposits method")
// 			},
// 			GetDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID common.Hash, burnerAddr common.Address) (types.ERC20Deposit, types.DepositState, bool) {
// 				panic("mock out the GetDeposit method")
// 			},
// 			GetGatewayAddressFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (common.Address, bool) {
// 				panic("mock out the GetGatewayAddress method")
// 			},
// 			GetGatewayByteCodesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) ([]byte, bool) {
// 				panic("mock out the GetGatewayByteCodes method")
// 			},
// 			GetHashToSignFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID string) (common.Hash, error) {
// 				panic("mock out the GetHashToSign method")
// 			},
// 			GetNetworkFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (string, bool) {
// 				panic("mock out the GetNetwork method")
// 			},
// 			GetNetworkByIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, id *big.Int) (string, bool) {
// 				panic("mock out the GetNetworkByID method")
// 			},
// 			GetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.Params {
// 				panic("mock out the GetParams method")
// 			},
// 			GetPendingChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
// 				panic("mock out the GetPendingChain method")
// 			},
// 			GetPendingDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) (types.ERC20Deposit, bool) {
// 				panic("mock out the GetPendingDeposit method")
// 			},
// 			GetPendingTokenDeploymentFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) (types.ERC20TokenDeployment, bool) {
// 				panic("mock out the GetPendingTokenDeployment method")
// 			},
// 			GetRequiredConfirmationHeightFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (uint64, bool) {
// 				panic("mock out the GetRequiredConfirmationHeight method")
// 			},
// 			GetRevoteLockingPeriodFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (int64, bool) {
// 				panic("mock out the GetRevoteLockingPeriod method")
// 			},
// 			GetTokenAddressFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, symbol string, gatewayAddr common.Address) (common.Address, error) {
// 				panic("mock out the GetTokenAddress method")
// 			},
// 			LoggerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
// 				panic("mock out the Logger method")
// 			},
// 			SetBurnerInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, burnerAddr common.Address, burnerInfo *types.BurnerInfo)  {
// 				panic("mock out the SetBurnerInfo method")
// 			},
// 			SetCommandDataFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, commandID types.CommandID, commandData []byte)  {
// 				panic("mock out the SetCommandData method")
// 			},
// 			SetDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, deposit types.ERC20Deposit, state types.DepositState)  {
// 				panic("mock out the SetDeposit method")
// 			},
// 			SetGatewayAddressFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, addr common.Address)  {
// 				panic("mock out the SetGatewayAddress method")
// 			},
// 			SetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, params ...types.Params)  {
// 				panic("mock out the SetParams method")
// 			},
// 			SetPendingChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)  {
// 				panic("mock out the SetPendingChain method")
// 			},
// 			SetPendingDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta, deposit *types.ERC20Deposit)  {
// 				panic("mock out the SetPendingDeposit method")
// 			},
// 			SetPendingTokenDeploymentFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta, tokenDeploy types.ERC20TokenDeployment)  {
// 				panic("mock out the SetPendingTokenDeployment method")
// 			},
// 			SetTokenInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, msg *types.SignDeployTokenRequest)  {
// 				panic("mock out the SetTokenInfo method")
// 			},
// 			SetUnsignedTxFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID string, tx *ethTypes.Transaction)  {
// 				panic("mock out the SetUnsignedTx method")
// 			},
// 		}
//
// 		// use mockedEVMKeeper in code that requires types.EVMKeeper
// 		// and then make assertions.
//
// 	}
type EVMKeeperMock struct {
	// DeleteDepositFunc mocks the DeleteDeposit method.
	DeleteDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, deposit types.ERC20Deposit)

	// DeletePendingChainFunc mocks the DeletePendingChain method.
	DeletePendingChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string)

	// DeletePendingDepositFunc mocks the DeletePendingDeposit method.
	DeletePendingDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta)

	// DeletePendingTokenFunc mocks the DeletePendingToken method.
	DeletePendingTokenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta)

	// GetBurnerAddressAndSaltFunc mocks the GetBurnerAddressAndSalt method.
	GetBurnerAddressAndSaltFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, tokenAddr common.Address, recipient string, gatewayAddr common.Address) (common.Address, common.Hash, error)

	// GetBurnerInfoFunc mocks the GetBurnerInfo method.
	GetBurnerInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, address common.Address) *types.BurnerInfo

	// GetChainIDByNetworkFunc mocks the GetChainIDByNetwork method.
	GetChainIDByNetworkFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, network string) *big.Int

	// GetConfirmedDepositsFunc mocks the GetConfirmedDeposits method.
	GetConfirmedDepositsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) []types.ERC20Deposit

	// GetDepositFunc mocks the GetDeposit method.
	GetDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID common.Hash, burnerAddr common.Address) (types.ERC20Deposit, types.DepositState, bool)

	// GetGatewayAddressFunc mocks the GetGatewayAddress method.
	GetGatewayAddressFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (common.Address, bool)

	// GetGatewayByteCodesFunc mocks the GetGatewayByteCodes method.
	GetGatewayByteCodesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) ([]byte, bool)

	// GetHashToSignFunc mocks the GetHashToSign method.
	GetHashToSignFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID string) (common.Hash, error)

	// GetNetworkFunc mocks the GetNetwork method.
	GetNetworkFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (string, bool)

	// GetNetworkByIDFunc mocks the GetNetworkByID method.
	GetNetworkByIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, id *big.Int) (string, bool)

	// GetParamsFunc mocks the GetParams method.
	GetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.Params

	// GetPendingChainFunc mocks the GetPendingChain method.
	GetPendingChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool)

	// GetPendingDepositFunc mocks the GetPendingDeposit method.
	GetPendingDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) (types.ERC20Deposit, bool)

	// GetPendingTokenDeploymentFunc mocks the GetPendingTokenDeployment method.
	GetPendingTokenDeploymentFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) (types.ERC20TokenDeployment, bool)

	// GetRequiredConfirmationHeightFunc mocks the GetRequiredConfirmationHeight method.
	GetRequiredConfirmationHeightFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (uint64, bool)

	// GetRevoteLockingPeriodFunc mocks the GetRevoteLockingPeriod method.
	GetRevoteLockingPeriodFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (int64, bool)

	// GetTokenAddressFunc mocks the GetTokenAddress method.
	GetTokenAddressFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, symbol string, gatewayAddr common.Address) (common.Address, error)

	// LoggerFunc mocks the Logger method.
	LoggerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger

	// SetBurnerInfoFunc mocks the SetBurnerInfo method.
	SetBurnerInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, burnerAddr common.Address, burnerInfo *types.BurnerInfo)

	// SetCommandDataFunc mocks the SetCommandData method.
	SetCommandDataFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, commandID types.CommandID, commandData []byte)

	// SetDepositFunc mocks the SetDeposit method.
	SetDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, deposit types.ERC20Deposit, state types.DepositState)

	// SetGatewayAddressFunc mocks the SetGatewayAddress method.
	SetGatewayAddressFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, addr common.Address)

	// SetParamsFunc mocks the SetParams method.
	SetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, params ...types.Params)

	// SetPendingChainFunc mocks the SetPendingChain method.
	SetPendingChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)

	// SetPendingDepositFunc mocks the SetPendingDeposit method.
	SetPendingDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta, deposit *types.ERC20Deposit)

	// SetPendingTokenDeploymentFunc mocks the SetPendingTokenDeployment method.
	SetPendingTokenDeploymentFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta, tokenDeploy types.ERC20TokenDeployment)

	// SetTokenInfoFunc mocks the SetTokenInfo method.
	SetTokenInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, msg *types.SignDeployTokenRequest)

	// SetUnsignedTxFunc mocks the SetUnsignedTx method.
	SetUnsignedTxFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID string, tx *ethTypes.Transaction)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteDeposit holds details about calls to the DeleteDeposit method.
		DeleteDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Deposit is the deposit argument value.
			Deposit types.ERC20Deposit
		}
		// DeletePendingChain holds details about calls to the DeletePendingChain method.
		DeletePendingChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// DeletePendingDeposit holds details about calls to the DeletePendingDeposit method.
		DeletePendingDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Poll is the poll argument value.
			Poll exported.PollMeta
		}
		// DeletePendingToken holds details about calls to the DeletePendingToken method.
		DeletePendingToken []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Poll is the poll argument value.
			Poll exported.PollMeta
		}
		// GetBurnerAddressAndSalt holds details about calls to the GetBurnerAddressAndSalt method.
		GetBurnerAddressAndSalt []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// TokenAddr is the tokenAddr argument value.
			TokenAddr common.Address
			// Recipient is the recipient argument value.
			Recipient string
			// GatewayAddr is the gatewayAddr argument value.
			GatewayAddr common.Address
		}
		// GetBurnerInfo holds details about calls to the GetBurnerInfo method.
		GetBurnerInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Address is the address argument value.
			Address common.Address
		}
		// GetChainIDByNetwork holds details about calls to the GetChainIDByNetwork method.
		GetChainIDByNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Network is the network argument value.
			Network string
		}
		// GetConfirmedDeposits holds details about calls to the GetConfirmedDeposits method.
		GetConfirmedDeposits []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetDeposit holds details about calls to the GetDeposit method.
		GetDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// TxID is the txID argument value.
			TxID common.Hash
			// BurnerAddr is the burnerAddr argument value.
			BurnerAddr common.Address
		}
		// GetGatewayAddress holds details about calls to the GetGatewayAddress method.
		GetGatewayAddress []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetGatewayByteCodes holds details about calls to the GetGatewayByteCodes method.
		GetGatewayByteCodes []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetHashToSign holds details about calls to the GetHashToSign method.
		GetHashToSign []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// TxID is the txID argument value.
			TxID string
		}
		// GetNetwork holds details about calls to the GetNetwork method.
		GetNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetNetworkByID holds details about calls to the GetNetworkByID method.
		GetNetworkByID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// ID is the id argument value.
			ID *big.Int
		}
		// GetParams holds details about calls to the GetParams method.
		GetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetPendingChain holds details about calls to the GetPendingChain method.
		GetPendingChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetPendingDeposit holds details about calls to the GetPendingDeposit method.
		GetPendingDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Poll is the poll argument value.
			Poll exported.PollMeta
		}
		// GetPendingTokenDeployment holds details about calls to the GetPendingTokenDeployment method.
		GetPendingTokenDeployment []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Poll is the poll argument value.
			Poll exported.PollMeta
		}
		// GetRequiredConfirmationHeight holds details about calls to the GetRequiredConfirmationHeight method.
		GetRequiredConfirmationHeight []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetRevoteLockingPeriod holds details about calls to the GetRevoteLockingPeriod method.
		GetRevoteLockingPeriod []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetTokenAddress holds details about calls to the GetTokenAddress method.
		GetTokenAddress []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Symbol is the symbol argument value.
			Symbol string
			// GatewayAddr is the gatewayAddr argument value.
			GatewayAddr common.Address
		}
		// Logger holds details about calls to the Logger method.
		Logger []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// SetBurnerInfo holds details about calls to the SetBurnerInfo method.
		SetBurnerInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// BurnerAddr is the burnerAddr argument value.
			BurnerAddr common.Address
			// BurnerInfo is the burnerInfo argument value.
			BurnerInfo *types.BurnerInfo
		}
		// SetCommandData holds details about calls to the SetCommandData method.
		SetCommandData []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// CommandID is the commandID argument value.
			CommandID types.CommandID
			// CommandData is the commandData argument value.
			CommandData []byte
		}
		// SetDeposit holds details about calls to the SetDeposit method.
		SetDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Deposit is the deposit argument value.
			Deposit types.ERC20Deposit
			// State is the state argument value.
			State types.DepositState
		}
		// SetGatewayAddress holds details about calls to the SetGatewayAddress method.
		SetGatewayAddress []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Addr is the addr argument value.
			Addr common.Address
		}
		// SetParams holds details about calls to the SetParams method.
		SetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Params is the params argument value.
			Params []types.Params
		}
		// SetPendingChain holds details about calls to the SetPendingChain method.
		SetPendingChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// SetPendingDeposit holds details about calls to the SetPendingDeposit method.
		SetPendingDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Poll is the poll argument value.
			Poll exported.PollMeta
			// Deposit is the deposit argument value.
			Deposit *types.ERC20Deposit
		}
		// SetPendingTokenDeployment holds details about calls to the SetPendingTokenDeployment method.
		SetPendingTokenDeployment []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Poll is the poll argument value.
			Poll exported.PollMeta
			// TokenDeploy is the tokenDeploy argument value.
			TokenDeploy types.ERC20TokenDeployment
		}
		// SetTokenInfo holds details about calls to the SetTokenInfo method.
		SetTokenInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// Msg is the msg argument value.
			Msg *types.SignDeployTokenRequest
		}
		// SetUnsignedTx holds details about calls to the SetUnsignedTx method.
		SetUnsignedTx []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
			// TxID is the txID argument value.
			TxID string
			// Tx is the tx argument value.
			Tx *ethTypes.Transaction
		}
	}
	lockDeleteDeposit                 sync.RWMutex
	lockDeletePendingChain            sync.RWMutex
	lockDeletePendingDeposit          sync.RWMutex
	lockDeletePendingToken            sync.RWMutex
	lockGetBurnerAddressAndSalt       sync.RWMutex
	lockGetBurnerInfo                 sync.RWMutex
	lockGetChainIDByNetwork           sync.RWMutex
	lockGetConfirmedDeposits          sync.RWMutex
	lockGetDeposit                    sync.RWMutex
	lockGetGatewayAddress             sync.RWMutex
	lockGetGatewayByteCodes           sync.RWMutex
	lockGetHashToSign                 sync.RWMutex
	lockGetNetwork                    sync.RWMutex
	lockGetNetworkByID                sync.RWMutex
	lockGetParams                     sync.RWMutex
	lockGetPendingChain               sync.RWMutex
	lockGetPendingDeposit             sync.RWMutex
	lockGetPendingTokenDeployment     sync.RWMutex
	lockGetRequiredConfirmationHeight sync.RWMutex
	lockGetRevoteLockingPeriod        sync.RWMutex
	lockGetTokenAddress               sync.RWMutex
	lockLogger                        sync.RWMutex
	lockSetBurnerInfo                 sync.RWMutex
	lockSetCommandData                sync.RWMutex
	lockSetDeposit                    sync.RWMutex
	lockSetGatewayAddress             sync.RWMutex
	lockSetParams                     sync.RWMutex
	lockSetPendingChain               sync.RWMutex
	lockSetPendingDeposit             sync.RWMutex
	lockSetPendingTokenDeployment     sync.RWMutex
	lockSetTokenInfo                  sync.RWMutex
	lockSetUnsignedTx                 sync.RWMutex
}

// DeleteDeposit calls DeleteDepositFunc.
func (mock *EVMKeeperMock) DeleteDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, deposit types.ERC20Deposit) {
	if mock.DeleteDepositFunc == nil {
		panic("EVMKeeperMock.DeleteDepositFunc: method is nil but EVMKeeper.DeleteDeposit was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Deposit types.ERC20Deposit
	}{
		Ctx:     ctx,
		Chain:   chain,
		Deposit: deposit,
	}
	mock.lockDeleteDeposit.Lock()
	mock.calls.DeleteDeposit = append(mock.calls.DeleteDeposit, callInfo)
	mock.lockDeleteDeposit.Unlock()
	mock.DeleteDepositFunc(ctx, chain, deposit)
}

// DeleteDepositCalls gets all the calls that were made to DeleteDeposit.
// Check the length with:
//     len(mockedEVMKeeper.DeleteDepositCalls())
func (mock *EVMKeeperMock) DeleteDepositCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   string
	Deposit types.ERC20Deposit
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Deposit types.ERC20Deposit
	}
	mock.lockDeleteDeposit.RLock()
	calls = mock.calls.DeleteDeposit
	mock.lockDeleteDeposit.RUnlock()
	return calls
}

// DeletePendingChain calls DeletePendingChainFunc.
func (mock *EVMKeeperMock) DeletePendingChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) {
	if mock.DeletePendingChainFunc == nil {
		panic("EVMKeeperMock.DeletePendingChainFunc: method is nil but EVMKeeper.DeletePendingChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockDeletePendingChain.Lock()
	mock.calls.DeletePendingChain = append(mock.calls.DeletePendingChain, callInfo)
	mock.lockDeletePendingChain.Unlock()
	mock.DeletePendingChainFunc(ctx, chain)
}

// DeletePendingChainCalls gets all the calls that were made to DeletePendingChain.
// Check the length with:
//     len(mockedEVMKeeper.DeletePendingChainCalls())
func (mock *EVMKeeperMock) DeletePendingChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockDeletePendingChain.RLock()
	calls = mock.calls.DeletePendingChain
	mock.lockDeletePendingChain.RUnlock()
	return calls
}

// DeletePendingDeposit calls DeletePendingDepositFunc.
func (mock *EVMKeeperMock) DeletePendingDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) {
	if mock.DeletePendingDepositFunc == nil {
		panic("EVMKeeperMock.DeletePendingDepositFunc: method is nil but EVMKeeper.DeletePendingDeposit was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}{
		Ctx:   ctx,
		Chain: chain,
		Poll:  poll,
	}
	mock.lockDeletePendingDeposit.Lock()
	mock.calls.DeletePendingDeposit = append(mock.calls.DeletePendingDeposit, callInfo)
	mock.lockDeletePendingDeposit.Unlock()
	mock.DeletePendingDepositFunc(ctx, chain, poll)
}

// DeletePendingDepositCalls gets all the calls that were made to DeletePendingDeposit.
// Check the length with:
//     len(mockedEVMKeeper.DeletePendingDepositCalls())
func (mock *EVMKeeperMock) DeletePendingDepositCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	Poll  exported.PollMeta
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}
	mock.lockDeletePendingDeposit.RLock()
	calls = mock.calls.DeletePendingDeposit
	mock.lockDeletePendingDeposit.RUnlock()
	return calls
}

// DeletePendingToken calls DeletePendingTokenFunc.
func (mock *EVMKeeperMock) DeletePendingToken(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) {
	if mock.DeletePendingTokenFunc == nil {
		panic("EVMKeeperMock.DeletePendingTokenFunc: method is nil but EVMKeeper.DeletePendingToken was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}{
		Ctx:   ctx,
		Chain: chain,
		Poll:  poll,
	}
	mock.lockDeletePendingToken.Lock()
	mock.calls.DeletePendingToken = append(mock.calls.DeletePendingToken, callInfo)
	mock.lockDeletePendingToken.Unlock()
	mock.DeletePendingTokenFunc(ctx, chain, poll)
}

// DeletePendingTokenCalls gets all the calls that were made to DeletePendingToken.
// Check the length with:
//     len(mockedEVMKeeper.DeletePendingTokenCalls())
func (mock *EVMKeeperMock) DeletePendingTokenCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	Poll  exported.PollMeta
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}
	mock.lockDeletePendingToken.RLock()
	calls = mock.calls.DeletePendingToken
	mock.lockDeletePendingToken.RUnlock()
	return calls
}

// GetBurnerAddressAndSalt calls GetBurnerAddressAndSaltFunc.
func (mock *EVMKeeperMock) GetBurnerAddressAndSalt(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, tokenAddr common.Address, recipient string, gatewayAddr common.Address) (common.Address, common.Hash, error) {
	if mock.GetBurnerAddressAndSaltFunc == nil {
		panic("EVMKeeperMock.GetBurnerAddressAndSaltFunc: method is nil but EVMKeeper.GetBurnerAddressAndSalt was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		TokenAddr   common.Address
		Recipient   string
		GatewayAddr common.Address
	}{
		Ctx:         ctx,
		Chain:       chain,
		TokenAddr:   tokenAddr,
		Recipient:   recipient,
		GatewayAddr: gatewayAddr,
	}
	mock.lockGetBurnerAddressAndSalt.Lock()
	mock.calls.GetBurnerAddressAndSalt = append(mock.calls.GetBurnerAddressAndSalt, callInfo)
	mock.lockGetBurnerAddressAndSalt.Unlock()
	return mock.GetBurnerAddressAndSaltFunc(ctx, chain, tokenAddr, recipient, gatewayAddr)
}

// GetBurnerAddressAndSaltCalls gets all the calls that were made to GetBurnerAddressAndSalt.
// Check the length with:
//     len(mockedEVMKeeper.GetBurnerAddressAndSaltCalls())
func (mock *EVMKeeperMock) GetBurnerAddressAndSaltCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Chain       string
	TokenAddr   common.Address
	Recipient   string
	GatewayAddr common.Address
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		TokenAddr   common.Address
		Recipient   string
		GatewayAddr common.Address
	}
	mock.lockGetBurnerAddressAndSalt.RLock()
	calls = mock.calls.GetBurnerAddressAndSalt
	mock.lockGetBurnerAddressAndSalt.RUnlock()
	return calls
}

// GetBurnerInfo calls GetBurnerInfoFunc.
func (mock *EVMKeeperMock) GetBurnerInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, address common.Address) *types.BurnerInfo {
	if mock.GetBurnerInfoFunc == nil {
		panic("EVMKeeperMock.GetBurnerInfoFunc: method is nil but EVMKeeper.GetBurnerInfo was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Address common.Address
	}{
		Ctx:     ctx,
		Chain:   chain,
		Address: address,
	}
	mock.lockGetBurnerInfo.Lock()
	mock.calls.GetBurnerInfo = append(mock.calls.GetBurnerInfo, callInfo)
	mock.lockGetBurnerInfo.Unlock()
	return mock.GetBurnerInfoFunc(ctx, chain, address)
}

// GetBurnerInfoCalls gets all the calls that were made to GetBurnerInfo.
// Check the length with:
//     len(mockedEVMKeeper.GetBurnerInfoCalls())
func (mock *EVMKeeperMock) GetBurnerInfoCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   string
	Address common.Address
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Address common.Address
	}
	mock.lockGetBurnerInfo.RLock()
	calls = mock.calls.GetBurnerInfo
	mock.lockGetBurnerInfo.RUnlock()
	return calls
}

// GetChainIDByNetwork calls GetChainIDByNetworkFunc.
func (mock *EVMKeeperMock) GetChainIDByNetwork(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, network string) *big.Int {
	if mock.GetChainIDByNetworkFunc == nil {
		panic("EVMKeeperMock.GetChainIDByNetworkFunc: method is nil but EVMKeeper.GetChainIDByNetwork was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Network string
	}{
		Ctx:     ctx,
		Chain:   chain,
		Network: network,
	}
	mock.lockGetChainIDByNetwork.Lock()
	mock.calls.GetChainIDByNetwork = append(mock.calls.GetChainIDByNetwork, callInfo)
	mock.lockGetChainIDByNetwork.Unlock()
	return mock.GetChainIDByNetworkFunc(ctx, chain, network)
}

// GetChainIDByNetworkCalls gets all the calls that were made to GetChainIDByNetwork.
// Check the length with:
//     len(mockedEVMKeeper.GetChainIDByNetworkCalls())
func (mock *EVMKeeperMock) GetChainIDByNetworkCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   string
	Network string
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Network string
	}
	mock.lockGetChainIDByNetwork.RLock()
	calls = mock.calls.GetChainIDByNetwork
	mock.lockGetChainIDByNetwork.RUnlock()
	return calls
}

// GetConfirmedDeposits calls GetConfirmedDepositsFunc.
func (mock *EVMKeeperMock) GetConfirmedDeposits(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) []types.ERC20Deposit {
	if mock.GetConfirmedDepositsFunc == nil {
		panic("EVMKeeperMock.GetConfirmedDepositsFunc: method is nil but EVMKeeper.GetConfirmedDeposits was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetConfirmedDeposits.Lock()
	mock.calls.GetConfirmedDeposits = append(mock.calls.GetConfirmedDeposits, callInfo)
	mock.lockGetConfirmedDeposits.Unlock()
	return mock.GetConfirmedDepositsFunc(ctx, chain)
}

// GetConfirmedDepositsCalls gets all the calls that were made to GetConfirmedDeposits.
// Check the length with:
//     len(mockedEVMKeeper.GetConfirmedDepositsCalls())
func (mock *EVMKeeperMock) GetConfirmedDepositsCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetConfirmedDeposits.RLock()
	calls = mock.calls.GetConfirmedDeposits
	mock.lockGetConfirmedDeposits.RUnlock()
	return calls
}

// GetDeposit calls GetDepositFunc.
func (mock *EVMKeeperMock) GetDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID common.Hash, burnerAddr common.Address) (types.ERC20Deposit, types.DepositState, bool) {
	if mock.GetDepositFunc == nil {
		panic("EVMKeeperMock.GetDepositFunc: method is nil but EVMKeeper.GetDeposit was just called")
	}
	callInfo := struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		Chain      string
		TxID       common.Hash
		BurnerAddr common.Address
	}{
		Ctx:        ctx,
		Chain:      chain,
		TxID:       txID,
		BurnerAddr: burnerAddr,
	}
	mock.lockGetDeposit.Lock()
	mock.calls.GetDeposit = append(mock.calls.GetDeposit, callInfo)
	mock.lockGetDeposit.Unlock()
	return mock.GetDepositFunc(ctx, chain, txID, burnerAddr)
}

// GetDepositCalls gets all the calls that were made to GetDeposit.
// Check the length with:
//     len(mockedEVMKeeper.GetDepositCalls())
func (mock *EVMKeeperMock) GetDepositCalls() []struct {
	Ctx        github_com_cosmos_cosmos_sdk_types.Context
	Chain      string
	TxID       common.Hash
	BurnerAddr common.Address
} {
	var calls []struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		Chain      string
		TxID       common.Hash
		BurnerAddr common.Address
	}
	mock.lockGetDeposit.RLock()
	calls = mock.calls.GetDeposit
	mock.lockGetDeposit.RUnlock()
	return calls
}

// GetGatewayAddress calls GetGatewayAddressFunc.
func (mock *EVMKeeperMock) GetGatewayAddress(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (common.Address, bool) {
	if mock.GetGatewayAddressFunc == nil {
		panic("EVMKeeperMock.GetGatewayAddressFunc: method is nil but EVMKeeper.GetGatewayAddress was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetGatewayAddress.Lock()
	mock.calls.GetGatewayAddress = append(mock.calls.GetGatewayAddress, callInfo)
	mock.lockGetGatewayAddress.Unlock()
	return mock.GetGatewayAddressFunc(ctx, chain)
}

// GetGatewayAddressCalls gets all the calls that were made to GetGatewayAddress.
// Check the length with:
//     len(mockedEVMKeeper.GetGatewayAddressCalls())
func (mock *EVMKeeperMock) GetGatewayAddressCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetGatewayAddress.RLock()
	calls = mock.calls.GetGatewayAddress
	mock.lockGetGatewayAddress.RUnlock()
	return calls
}

// GetGatewayByteCodes calls GetGatewayByteCodesFunc.
func (mock *EVMKeeperMock) GetGatewayByteCodes(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) ([]byte, bool) {
	if mock.GetGatewayByteCodesFunc == nil {
		panic("EVMKeeperMock.GetGatewayByteCodesFunc: method is nil but EVMKeeper.GetGatewayByteCodes was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetGatewayByteCodes.Lock()
	mock.calls.GetGatewayByteCodes = append(mock.calls.GetGatewayByteCodes, callInfo)
	mock.lockGetGatewayByteCodes.Unlock()
	return mock.GetGatewayByteCodesFunc(ctx, chain)
}

// GetGatewayByteCodesCalls gets all the calls that were made to GetGatewayByteCodes.
// Check the length with:
//     len(mockedEVMKeeper.GetGatewayByteCodesCalls())
func (mock *EVMKeeperMock) GetGatewayByteCodesCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetGatewayByteCodes.RLock()
	calls = mock.calls.GetGatewayByteCodes
	mock.lockGetGatewayByteCodes.RUnlock()
	return calls
}

// GetHashToSign calls GetHashToSignFunc.
func (mock *EVMKeeperMock) GetHashToSign(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID string) (common.Hash, error) {
	if mock.GetHashToSignFunc == nil {
		panic("EVMKeeperMock.GetHashToSignFunc: method is nil but EVMKeeper.GetHashToSign was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		TxID  string
	}{
		Ctx:   ctx,
		Chain: chain,
		TxID:  txID,
	}
	mock.lockGetHashToSign.Lock()
	mock.calls.GetHashToSign = append(mock.calls.GetHashToSign, callInfo)
	mock.lockGetHashToSign.Unlock()
	return mock.GetHashToSignFunc(ctx, chain, txID)
}

// GetHashToSignCalls gets all the calls that were made to GetHashToSign.
// Check the length with:
//     len(mockedEVMKeeper.GetHashToSignCalls())
func (mock *EVMKeeperMock) GetHashToSignCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	TxID  string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		TxID  string
	}
	mock.lockGetHashToSign.RLock()
	calls = mock.calls.GetHashToSign
	mock.lockGetHashToSign.RUnlock()
	return calls
}

// GetNetwork calls GetNetworkFunc.
func (mock *EVMKeeperMock) GetNetwork(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (string, bool) {
	if mock.GetNetworkFunc == nil {
		panic("EVMKeeperMock.GetNetworkFunc: method is nil but EVMKeeper.GetNetwork was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetNetwork.Lock()
	mock.calls.GetNetwork = append(mock.calls.GetNetwork, callInfo)
	mock.lockGetNetwork.Unlock()
	return mock.GetNetworkFunc(ctx, chain)
}

// GetNetworkCalls gets all the calls that were made to GetNetwork.
// Check the length with:
//     len(mockedEVMKeeper.GetNetworkCalls())
func (mock *EVMKeeperMock) GetNetworkCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetNetwork.RLock()
	calls = mock.calls.GetNetwork
	mock.lockGetNetwork.RUnlock()
	return calls
}

// GetNetworkByID calls GetNetworkByIDFunc.
func (mock *EVMKeeperMock) GetNetworkByID(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, id *big.Int) (string, bool) {
	if mock.GetNetworkByIDFunc == nil {
		panic("EVMKeeperMock.GetNetworkByIDFunc: method is nil but EVMKeeper.GetNetworkByID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		ID    *big.Int
	}{
		Ctx:   ctx,
		Chain: chain,
		ID:    id,
	}
	mock.lockGetNetworkByID.Lock()
	mock.calls.GetNetworkByID = append(mock.calls.GetNetworkByID, callInfo)
	mock.lockGetNetworkByID.Unlock()
	return mock.GetNetworkByIDFunc(ctx, chain, id)
}

// GetNetworkByIDCalls gets all the calls that were made to GetNetworkByID.
// Check the length with:
//     len(mockedEVMKeeper.GetNetworkByIDCalls())
func (mock *EVMKeeperMock) GetNetworkByIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	ID    *big.Int
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		ID    *big.Int
	}
	mock.lockGetNetworkByID.RLock()
	calls = mock.calls.GetNetworkByID
	mock.lockGetNetworkByID.RUnlock()
	return calls
}

// GetParams calls GetParamsFunc.
func (mock *EVMKeeperMock) GetParams(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.Params {
	if mock.GetParamsFunc == nil {
		panic("EVMKeeperMock.GetParamsFunc: method is nil but EVMKeeper.GetParams was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetParams.Lock()
	mock.calls.GetParams = append(mock.calls.GetParams, callInfo)
	mock.lockGetParams.Unlock()
	return mock.GetParamsFunc(ctx)
}

// GetParamsCalls gets all the calls that were made to GetParams.
// Check the length with:
//     len(mockedEVMKeeper.GetParamsCalls())
func (mock *EVMKeeperMock) GetParamsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetParams.RLock()
	calls = mock.calls.GetParams
	mock.lockGetParams.RUnlock()
	return calls
}

// GetPendingChain calls GetPendingChainFunc.
func (mock *EVMKeeperMock) GetPendingChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
	if mock.GetPendingChainFunc == nil {
		panic("EVMKeeperMock.GetPendingChainFunc: method is nil but EVMKeeper.GetPendingChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetPendingChain.Lock()
	mock.calls.GetPendingChain = append(mock.calls.GetPendingChain, callInfo)
	mock.lockGetPendingChain.Unlock()
	return mock.GetPendingChainFunc(ctx, chain)
}

// GetPendingChainCalls gets all the calls that were made to GetPendingChain.
// Check the length with:
//     len(mockedEVMKeeper.GetPendingChainCalls())
func (mock *EVMKeeperMock) GetPendingChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetPendingChain.RLock()
	calls = mock.calls.GetPendingChain
	mock.lockGetPendingChain.RUnlock()
	return calls
}

// GetPendingDeposit calls GetPendingDepositFunc.
func (mock *EVMKeeperMock) GetPendingDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) (types.ERC20Deposit, bool) {
	if mock.GetPendingDepositFunc == nil {
		panic("EVMKeeperMock.GetPendingDepositFunc: method is nil but EVMKeeper.GetPendingDeposit was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}{
		Ctx:   ctx,
		Chain: chain,
		Poll:  poll,
	}
	mock.lockGetPendingDeposit.Lock()
	mock.calls.GetPendingDeposit = append(mock.calls.GetPendingDeposit, callInfo)
	mock.lockGetPendingDeposit.Unlock()
	return mock.GetPendingDepositFunc(ctx, chain, poll)
}

// GetPendingDepositCalls gets all the calls that were made to GetPendingDeposit.
// Check the length with:
//     len(mockedEVMKeeper.GetPendingDepositCalls())
func (mock *EVMKeeperMock) GetPendingDepositCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	Poll  exported.PollMeta
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}
	mock.lockGetPendingDeposit.RLock()
	calls = mock.calls.GetPendingDeposit
	mock.lockGetPendingDeposit.RUnlock()
	return calls
}

// GetPendingTokenDeployment calls GetPendingTokenDeploymentFunc.
func (mock *EVMKeeperMock) GetPendingTokenDeployment(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta) (types.ERC20TokenDeployment, bool) {
	if mock.GetPendingTokenDeploymentFunc == nil {
		panic("EVMKeeperMock.GetPendingTokenDeploymentFunc: method is nil but EVMKeeper.GetPendingTokenDeployment was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}{
		Ctx:   ctx,
		Chain: chain,
		Poll:  poll,
	}
	mock.lockGetPendingTokenDeployment.Lock()
	mock.calls.GetPendingTokenDeployment = append(mock.calls.GetPendingTokenDeployment, callInfo)
	mock.lockGetPendingTokenDeployment.Unlock()
	return mock.GetPendingTokenDeploymentFunc(ctx, chain, poll)
}

// GetPendingTokenDeploymentCalls gets all the calls that were made to GetPendingTokenDeployment.
// Check the length with:
//     len(mockedEVMKeeper.GetPendingTokenDeploymentCalls())
func (mock *EVMKeeperMock) GetPendingTokenDeploymentCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	Poll  exported.PollMeta
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Poll  exported.PollMeta
	}
	mock.lockGetPendingTokenDeployment.RLock()
	calls = mock.calls.GetPendingTokenDeployment
	mock.lockGetPendingTokenDeployment.RUnlock()
	return calls
}

// GetRequiredConfirmationHeight calls GetRequiredConfirmationHeightFunc.
func (mock *EVMKeeperMock) GetRequiredConfirmationHeight(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (uint64, bool) {
	if mock.GetRequiredConfirmationHeightFunc == nil {
		panic("EVMKeeperMock.GetRequiredConfirmationHeightFunc: method is nil but EVMKeeper.GetRequiredConfirmationHeight was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetRequiredConfirmationHeight.Lock()
	mock.calls.GetRequiredConfirmationHeight = append(mock.calls.GetRequiredConfirmationHeight, callInfo)
	mock.lockGetRequiredConfirmationHeight.Unlock()
	return mock.GetRequiredConfirmationHeightFunc(ctx, chain)
}

// GetRequiredConfirmationHeightCalls gets all the calls that were made to GetRequiredConfirmationHeight.
// Check the length with:
//     len(mockedEVMKeeper.GetRequiredConfirmationHeightCalls())
func (mock *EVMKeeperMock) GetRequiredConfirmationHeightCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetRequiredConfirmationHeight.RLock()
	calls = mock.calls.GetRequiredConfirmationHeight
	mock.lockGetRequiredConfirmationHeight.RUnlock()
	return calls
}

// GetRevoteLockingPeriod calls GetRevoteLockingPeriodFunc.
func (mock *EVMKeeperMock) GetRevoteLockingPeriod(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (int64, bool) {
	if mock.GetRevoteLockingPeriodFunc == nil {
		panic("EVMKeeperMock.GetRevoteLockingPeriodFunc: method is nil but EVMKeeper.GetRevoteLockingPeriod was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetRevoteLockingPeriod.Lock()
	mock.calls.GetRevoteLockingPeriod = append(mock.calls.GetRevoteLockingPeriod, callInfo)
	mock.lockGetRevoteLockingPeriod.Unlock()
	return mock.GetRevoteLockingPeriodFunc(ctx, chain)
}

// GetRevoteLockingPeriodCalls gets all the calls that were made to GetRevoteLockingPeriod.
// Check the length with:
//     len(mockedEVMKeeper.GetRevoteLockingPeriodCalls())
func (mock *EVMKeeperMock) GetRevoteLockingPeriodCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetRevoteLockingPeriod.RLock()
	calls = mock.calls.GetRevoteLockingPeriod
	mock.lockGetRevoteLockingPeriod.RUnlock()
	return calls
}

// GetTokenAddress calls GetTokenAddressFunc.
func (mock *EVMKeeperMock) GetTokenAddress(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, symbol string, gatewayAddr common.Address) (common.Address, error) {
	if mock.GetTokenAddressFunc == nil {
		panic("EVMKeeperMock.GetTokenAddressFunc: method is nil but EVMKeeper.GetTokenAddress was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		Symbol      string
		GatewayAddr common.Address
	}{
		Ctx:         ctx,
		Chain:       chain,
		Symbol:      symbol,
		GatewayAddr: gatewayAddr,
	}
	mock.lockGetTokenAddress.Lock()
	mock.calls.GetTokenAddress = append(mock.calls.GetTokenAddress, callInfo)
	mock.lockGetTokenAddress.Unlock()
	return mock.GetTokenAddressFunc(ctx, chain, symbol, gatewayAddr)
}

// GetTokenAddressCalls gets all the calls that were made to GetTokenAddress.
// Check the length with:
//     len(mockedEVMKeeper.GetTokenAddressCalls())
func (mock *EVMKeeperMock) GetTokenAddressCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Chain       string
	Symbol      string
	GatewayAddr common.Address
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		Symbol      string
		GatewayAddr common.Address
	}
	mock.lockGetTokenAddress.RLock()
	calls = mock.calls.GetTokenAddress
	mock.lockGetTokenAddress.RUnlock()
	return calls
}

// Logger calls LoggerFunc.
func (mock *EVMKeeperMock) Logger(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
	if mock.LoggerFunc == nil {
		panic("EVMKeeperMock.LoggerFunc: method is nil but EVMKeeper.Logger was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogger.Lock()
	mock.calls.Logger = append(mock.calls.Logger, callInfo)
	mock.lockLogger.Unlock()
	return mock.LoggerFunc(ctx)
}

// LoggerCalls gets all the calls that were made to Logger.
// Check the length with:
//     len(mockedEVMKeeper.LoggerCalls())
func (mock *EVMKeeperMock) LoggerCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockLogger.RLock()
	calls = mock.calls.Logger
	mock.lockLogger.RUnlock()
	return calls
}

// SetBurnerInfo calls SetBurnerInfoFunc.
func (mock *EVMKeeperMock) SetBurnerInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, burnerAddr common.Address, burnerInfo *types.BurnerInfo) {
	if mock.SetBurnerInfoFunc == nil {
		panic("EVMKeeperMock.SetBurnerInfoFunc: method is nil but EVMKeeper.SetBurnerInfo was just called")
	}
	callInfo := struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		Chain      string
		BurnerAddr common.Address
		BurnerInfo *types.BurnerInfo
	}{
		Ctx:        ctx,
		Chain:      chain,
		BurnerAddr: burnerAddr,
		BurnerInfo: burnerInfo,
	}
	mock.lockSetBurnerInfo.Lock()
	mock.calls.SetBurnerInfo = append(mock.calls.SetBurnerInfo, callInfo)
	mock.lockSetBurnerInfo.Unlock()
	mock.SetBurnerInfoFunc(ctx, chain, burnerAddr, burnerInfo)
}

// SetBurnerInfoCalls gets all the calls that were made to SetBurnerInfo.
// Check the length with:
//     len(mockedEVMKeeper.SetBurnerInfoCalls())
func (mock *EVMKeeperMock) SetBurnerInfoCalls() []struct {
	Ctx        github_com_cosmos_cosmos_sdk_types.Context
	Chain      string
	BurnerAddr common.Address
	BurnerInfo *types.BurnerInfo
} {
	var calls []struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		Chain      string
		BurnerAddr common.Address
		BurnerInfo *types.BurnerInfo
	}
	mock.lockSetBurnerInfo.RLock()
	calls = mock.calls.SetBurnerInfo
	mock.lockSetBurnerInfo.RUnlock()
	return calls
}

// SetCommandData calls SetCommandDataFunc.
func (mock *EVMKeeperMock) SetCommandData(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, commandID types.CommandID, commandData []byte) {
	if mock.SetCommandDataFunc == nil {
		panic("EVMKeeperMock.SetCommandDataFunc: method is nil but EVMKeeper.SetCommandData was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		CommandID   types.CommandID
		CommandData []byte
	}{
		Ctx:         ctx,
		Chain:       chain,
		CommandID:   commandID,
		CommandData: commandData,
	}
	mock.lockSetCommandData.Lock()
	mock.calls.SetCommandData = append(mock.calls.SetCommandData, callInfo)
	mock.lockSetCommandData.Unlock()
	mock.SetCommandDataFunc(ctx, chain, commandID, commandData)
}

// SetCommandDataCalls gets all the calls that were made to SetCommandData.
// Check the length with:
//     len(mockedEVMKeeper.SetCommandDataCalls())
func (mock *EVMKeeperMock) SetCommandDataCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Chain       string
	CommandID   types.CommandID
	CommandData []byte
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		CommandID   types.CommandID
		CommandData []byte
	}
	mock.lockSetCommandData.RLock()
	calls = mock.calls.SetCommandData
	mock.lockSetCommandData.RUnlock()
	return calls
}

// SetDeposit calls SetDepositFunc.
func (mock *EVMKeeperMock) SetDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, deposit types.ERC20Deposit, state types.DepositState) {
	if mock.SetDepositFunc == nil {
		panic("EVMKeeperMock.SetDepositFunc: method is nil but EVMKeeper.SetDeposit was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Deposit types.ERC20Deposit
		State   types.DepositState
	}{
		Ctx:     ctx,
		Chain:   chain,
		Deposit: deposit,
		State:   state,
	}
	mock.lockSetDeposit.Lock()
	mock.calls.SetDeposit = append(mock.calls.SetDeposit, callInfo)
	mock.lockSetDeposit.Unlock()
	mock.SetDepositFunc(ctx, chain, deposit, state)
}

// SetDepositCalls gets all the calls that were made to SetDeposit.
// Check the length with:
//     len(mockedEVMKeeper.SetDepositCalls())
func (mock *EVMKeeperMock) SetDepositCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   string
	Deposit types.ERC20Deposit
	State   types.DepositState
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Deposit types.ERC20Deposit
		State   types.DepositState
	}
	mock.lockSetDeposit.RLock()
	calls = mock.calls.SetDeposit
	mock.lockSetDeposit.RUnlock()
	return calls
}

// SetGatewayAddress calls SetGatewayAddressFunc.
func (mock *EVMKeeperMock) SetGatewayAddress(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, addr common.Address) {
	if mock.SetGatewayAddressFunc == nil {
		panic("EVMKeeperMock.SetGatewayAddressFunc: method is nil but EVMKeeper.SetGatewayAddress was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Addr  common.Address
	}{
		Ctx:   ctx,
		Chain: chain,
		Addr:  addr,
	}
	mock.lockSetGatewayAddress.Lock()
	mock.calls.SetGatewayAddress = append(mock.calls.SetGatewayAddress, callInfo)
	mock.lockSetGatewayAddress.Unlock()
	mock.SetGatewayAddressFunc(ctx, chain, addr)
}

// SetGatewayAddressCalls gets all the calls that were made to SetGatewayAddress.
// Check the length with:
//     len(mockedEVMKeeper.SetGatewayAddressCalls())
func (mock *EVMKeeperMock) SetGatewayAddressCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	Addr  common.Address
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Addr  common.Address
	}
	mock.lockSetGatewayAddress.RLock()
	calls = mock.calls.SetGatewayAddress
	mock.lockSetGatewayAddress.RUnlock()
	return calls
}

// SetParams calls SetParamsFunc.
func (mock *EVMKeeperMock) SetParams(ctx github_com_cosmos_cosmos_sdk_types.Context, params ...types.Params) {
	if mock.SetParamsFunc == nil {
		panic("EVMKeeperMock.SetParamsFunc: method is nil but EVMKeeper.SetParams was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Params []types.Params
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockSetParams.Lock()
	mock.calls.SetParams = append(mock.calls.SetParams, callInfo)
	mock.lockSetParams.Unlock()
	mock.SetParamsFunc(ctx, params...)
}

// SetParamsCalls gets all the calls that were made to SetParams.
// Check the length with:
//     len(mockedEVMKeeper.SetParamsCalls())
func (mock *EVMKeeperMock) SetParamsCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Params []types.Params
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Params []types.Params
	}
	mock.lockSetParams.RLock()
	calls = mock.calls.SetParams
	mock.lockSetParams.RUnlock()
	return calls
}

// SetPendingChain calls SetPendingChainFunc.
func (mock *EVMKeeperMock) SetPendingChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) {
	if mock.SetPendingChainFunc == nil {
		panic("EVMKeeperMock.SetPendingChainFunc: method is nil but EVMKeeper.SetPendingChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockSetPendingChain.Lock()
	mock.calls.SetPendingChain = append(mock.calls.SetPendingChain, callInfo)
	mock.lockSetPendingChain.Unlock()
	mock.SetPendingChainFunc(ctx, chain)
}

// SetPendingChainCalls gets all the calls that were made to SetPendingChain.
// Check the length with:
//     len(mockedEVMKeeper.SetPendingChainCalls())
func (mock *EVMKeeperMock) SetPendingChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockSetPendingChain.RLock()
	calls = mock.calls.SetPendingChain
	mock.lockSetPendingChain.RUnlock()
	return calls
}

// SetPendingDeposit calls SetPendingDepositFunc.
func (mock *EVMKeeperMock) SetPendingDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta, deposit *types.ERC20Deposit) {
	if mock.SetPendingDepositFunc == nil {
		panic("EVMKeeperMock.SetPendingDepositFunc: method is nil but EVMKeeper.SetPendingDeposit was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Poll    exported.PollMeta
		Deposit *types.ERC20Deposit
	}{
		Ctx:     ctx,
		Chain:   chain,
		Poll:    poll,
		Deposit: deposit,
	}
	mock.lockSetPendingDeposit.Lock()
	mock.calls.SetPendingDeposit = append(mock.calls.SetPendingDeposit, callInfo)
	mock.lockSetPendingDeposit.Unlock()
	mock.SetPendingDepositFunc(ctx, chain, poll, deposit)
}

// SetPendingDepositCalls gets all the calls that were made to SetPendingDeposit.
// Check the length with:
//     len(mockedEVMKeeper.SetPendingDepositCalls())
func (mock *EVMKeeperMock) SetPendingDepositCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   string
	Poll    exported.PollMeta
	Deposit *types.ERC20Deposit
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   string
		Poll    exported.PollMeta
		Deposit *types.ERC20Deposit
	}
	mock.lockSetPendingDeposit.RLock()
	calls = mock.calls.SetPendingDeposit
	mock.lockSetPendingDeposit.RUnlock()
	return calls
}

// SetPendingTokenDeployment calls SetPendingTokenDeploymentFunc.
func (mock *EVMKeeperMock) SetPendingTokenDeployment(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, poll exported.PollMeta, tokenDeploy types.ERC20TokenDeployment) {
	if mock.SetPendingTokenDeploymentFunc == nil {
		panic("EVMKeeperMock.SetPendingTokenDeploymentFunc: method is nil but EVMKeeper.SetPendingTokenDeployment was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		Poll        exported.PollMeta
		TokenDeploy types.ERC20TokenDeployment
	}{
		Ctx:         ctx,
		Chain:       chain,
		Poll:        poll,
		TokenDeploy: tokenDeploy,
	}
	mock.lockSetPendingTokenDeployment.Lock()
	mock.calls.SetPendingTokenDeployment = append(mock.calls.SetPendingTokenDeployment, callInfo)
	mock.lockSetPendingTokenDeployment.Unlock()
	mock.SetPendingTokenDeploymentFunc(ctx, chain, poll, tokenDeploy)
}

// SetPendingTokenDeploymentCalls gets all the calls that were made to SetPendingTokenDeployment.
// Check the length with:
//     len(mockedEVMKeeper.SetPendingTokenDeploymentCalls())
func (mock *EVMKeeperMock) SetPendingTokenDeploymentCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Chain       string
	Poll        exported.PollMeta
	TokenDeploy types.ERC20TokenDeployment
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Chain       string
		Poll        exported.PollMeta
		TokenDeploy types.ERC20TokenDeployment
	}
	mock.lockSetPendingTokenDeployment.RLock()
	calls = mock.calls.SetPendingTokenDeployment
	mock.lockSetPendingTokenDeployment.RUnlock()
	return calls
}

// SetTokenInfo calls SetTokenInfoFunc.
func (mock *EVMKeeperMock) SetTokenInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, msg *types.SignDeployTokenRequest) {
	if mock.SetTokenInfoFunc == nil {
		panic("EVMKeeperMock.SetTokenInfoFunc: method is nil but EVMKeeper.SetTokenInfo was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Msg   *types.SignDeployTokenRequest
	}{
		Ctx:   ctx,
		Chain: chain,
		Msg:   msg,
	}
	mock.lockSetTokenInfo.Lock()
	mock.calls.SetTokenInfo = append(mock.calls.SetTokenInfo, callInfo)
	mock.lockSetTokenInfo.Unlock()
	mock.SetTokenInfoFunc(ctx, chain, msg)
}

// SetTokenInfoCalls gets all the calls that were made to SetTokenInfo.
// Check the length with:
//     len(mockedEVMKeeper.SetTokenInfoCalls())
func (mock *EVMKeeperMock) SetTokenInfoCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	Msg   *types.SignDeployTokenRequest
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		Msg   *types.SignDeployTokenRequest
	}
	mock.lockSetTokenInfo.RLock()
	calls = mock.calls.SetTokenInfo
	mock.lockSetTokenInfo.RUnlock()
	return calls
}

// SetUnsignedTx calls SetUnsignedTxFunc.
func (mock *EVMKeeperMock) SetUnsignedTx(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string, txID string, tx *ethTypes.Transaction) {
	if mock.SetUnsignedTxFunc == nil {
		panic("EVMKeeperMock.SetUnsignedTxFunc: method is nil but EVMKeeper.SetUnsignedTx was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		TxID  string
		Tx    *ethTypes.Transaction
	}{
		Ctx:   ctx,
		Chain: chain,
		TxID:  txID,
		Tx:    tx,
	}
	mock.lockSetUnsignedTx.Lock()
	mock.calls.SetUnsignedTx = append(mock.calls.SetUnsignedTx, callInfo)
	mock.lockSetUnsignedTx.Unlock()
	mock.SetUnsignedTxFunc(ctx, chain, txID, tx)
}

// SetUnsignedTxCalls gets all the calls that were made to SetUnsignedTx.
// Check the length with:
//     len(mockedEVMKeeper.SetUnsignedTxCalls())
func (mock *EVMKeeperMock) SetUnsignedTxCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
	TxID  string
	Tx    *ethTypes.Transaction
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
		TxID  string
		Tx    *ethTypes.Transaction
	}
	mock.lockSetUnsignedTx.RLock()
	calls = mock.calls.SetUnsignedTx
	mock.lockSetUnsignedTx.RUnlock()
	return calls
}
