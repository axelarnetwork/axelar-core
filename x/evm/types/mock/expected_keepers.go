// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"crypto/ecdsa"
	utils "github.com/axelarnetwork/axelar-core/utils"
	"github.com/axelarnetwork/axelar-core/x/evm/types"
	nexus "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	snapshot "github.com/axelarnetwork/axelar-core/x/snapshot/exported"
	github_com_axelarnetwork_axelar_core_x_tss_exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	vote "github.com/axelarnetwork/axelar-core/x/vote/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	"github.com/ethereum/go-ethereum/common"
	evmTypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/tendermint/tendermint/libs/log"
	"math/big"
	"sync"
)

// Ensure, that TSSMock does implement types.TSS.
// If this is not the case, regenerate this file with moq.
var _ types.TSS = &TSSMock{}

// TSSMock is a mock implementation of types.TSS.
//
// 	func TestSomethingThatUsesTSS(t *testing.T) {
//
// 		// make and configure a mocked types.TSS
// 		mockedTSS := &TSSMock{
// 			GetKeyRequirementFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement, bool) {
// 				panic("mock out the GetKeyRequirement method")
// 			},
// 		}
//
// 		// use mockedTSS in code that requires types.TSS
// 		// and then make assertions.
//
// 	}
type TSSMock struct {
	// GetKeyRequirementFunc mocks the GetKeyRequirement method.
	GetKeyRequirementFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement, bool)

	// calls tracks calls to the methods.
	calls struct {
		// GetKeyRequirement holds details about calls to the GetKeyRequirement method.
		GetKeyRequirement []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
			// KeyType is the keyType argument value.
			KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
		}
	}
	lockGetKeyRequirement sync.RWMutex
}

// GetKeyRequirement calls GetKeyRequirementFunc.
func (mock *TSSMock) GetKeyRequirement(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement, bool) {
	if mock.GetKeyRequirementFunc == nil {
		panic("TSSMock.GetKeyRequirementFunc: method is nil but TSS.GetKeyRequirement was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
	}{
		Ctx:     ctx,
		KeyRole: keyRole,
		KeyType: keyType,
	}
	mock.lockGetKeyRequirement.Lock()
	mock.calls.GetKeyRequirement = append(mock.calls.GetKeyRequirement, callInfo)
	mock.lockGetKeyRequirement.Unlock()
	return mock.GetKeyRequirementFunc(ctx, keyRole, keyType)
}

// GetKeyRequirementCalls gets all the calls that were made to GetKeyRequirement.
// Check the length with:
//     len(mockedTSS.GetKeyRequirementCalls())
func (mock *TSSMock) GetKeyRequirementCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
	}
	mock.lockGetKeyRequirement.RLock()
	calls = mock.calls.GetKeyRequirement
	mock.lockGetKeyRequirement.RUnlock()
	return calls
}

// Ensure, that VoterMock does implement types.Voter.
// If this is not the case, regenerate this file with moq.
var _ types.Voter = &VoterMock{}

// VoterMock is a mock implementation of types.Voter.
//
// 	func TestSomethingThatUsesVoter(t *testing.T) {
//
// 		// make and configure a mocked types.Voter
// 		mockedVoter := &VoterMock{
// 			GetPollFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, pollKey vote.PollKey) vote.Poll {
// 				panic("mock out the GetPoll method")
// 			},
// 			InitializePollFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, voters []github_com_cosmos_cosmos_sdk_types.ValAddress, pollProperties ...vote.PollProperty) error {
// 				panic("mock out the InitializePoll method")
// 			},
// 			InitializePollWithSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error {
// 				panic("mock out the InitializePollWithSnapshot method")
// 			},
// 		}
//
// 		// use mockedVoter in code that requires types.Voter
// 		// and then make assertions.
//
// 	}
type VoterMock struct {
	// GetPollFunc mocks the GetPoll method.
	GetPollFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, pollKey vote.PollKey) vote.Poll

	// InitializePollFunc mocks the InitializePoll method.
	InitializePollFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, voters []github_com_cosmos_cosmos_sdk_types.ValAddress, pollProperties ...vote.PollProperty) error

	// InitializePollWithSnapshotFunc mocks the InitializePollWithSnapshot method.
	InitializePollWithSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error

	// calls tracks calls to the methods.
	calls struct {
		// GetPoll holds details about calls to the GetPoll method.
		GetPoll []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// PollKey is the pollKey argument value.
			PollKey vote.PollKey
		}
		// InitializePoll holds details about calls to the InitializePoll method.
		InitializePoll []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
			// Voters is the voters argument value.
			Voters []github_com_cosmos_cosmos_sdk_types.ValAddress
			// PollProperties is the pollProperties argument value.
			PollProperties []vote.PollProperty
		}
		// InitializePollWithSnapshot holds details about calls to the InitializePollWithSnapshot method.
		InitializePollWithSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
			// SnapshotSeqNo is the snapshotSeqNo argument value.
			SnapshotSeqNo int64
			// PollProperties is the pollProperties argument value.
			PollProperties []vote.PollProperty
		}
	}
	lockGetPoll                    sync.RWMutex
	lockInitializePoll             sync.RWMutex
	lockInitializePollWithSnapshot sync.RWMutex
}

// GetPoll calls GetPollFunc.
func (mock *VoterMock) GetPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, pollKey vote.PollKey) vote.Poll {
	if mock.GetPollFunc == nil {
		panic("VoterMock.GetPollFunc: method is nil but Voter.GetPoll was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		PollKey vote.PollKey
	}{
		Ctx:     ctx,
		PollKey: pollKey,
	}
	mock.lockGetPoll.Lock()
	mock.calls.GetPoll = append(mock.calls.GetPoll, callInfo)
	mock.lockGetPoll.Unlock()
	return mock.GetPollFunc(ctx, pollKey)
}

// GetPollCalls gets all the calls that were made to GetPoll.
// Check the length with:
//     len(mockedVoter.GetPollCalls())
func (mock *VoterMock) GetPollCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	PollKey vote.PollKey
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		PollKey vote.PollKey
	}
	mock.lockGetPoll.RLock()
	calls = mock.calls.GetPoll
	mock.lockGetPoll.RUnlock()
	return calls
}

// InitializePoll calls InitializePollFunc.
func (mock *VoterMock) InitializePoll(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, voters []github_com_cosmos_cosmos_sdk_types.ValAddress, pollProperties ...vote.PollProperty) error {
	if mock.InitializePollFunc == nil {
		panic("VoterMock.InitializePollFunc: method is nil but Voter.InitializePoll was just called")
	}
	callInfo := struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		Key            vote.PollKey
		Voters         []github_com_cosmos_cosmos_sdk_types.ValAddress
		PollProperties []vote.PollProperty
	}{
		Ctx:            ctx,
		Key:            key,
		Voters:         voters,
		PollProperties: pollProperties,
	}
	mock.lockInitializePoll.Lock()
	mock.calls.InitializePoll = append(mock.calls.InitializePoll, callInfo)
	mock.lockInitializePoll.Unlock()
	return mock.InitializePollFunc(ctx, key, voters, pollProperties...)
}

// InitializePollCalls gets all the calls that were made to InitializePoll.
// Check the length with:
//     len(mockedVoter.InitializePollCalls())
func (mock *VoterMock) InitializePollCalls() []struct {
	Ctx            github_com_cosmos_cosmos_sdk_types.Context
	Key            vote.PollKey
	Voters         []github_com_cosmos_cosmos_sdk_types.ValAddress
	PollProperties []vote.PollProperty
} {
	var calls []struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		Key            vote.PollKey
		Voters         []github_com_cosmos_cosmos_sdk_types.ValAddress
		PollProperties []vote.PollProperty
	}
	mock.lockInitializePoll.RLock()
	calls = mock.calls.InitializePoll
	mock.lockInitializePoll.RUnlock()
	return calls
}

// InitializePollWithSnapshot calls InitializePollWithSnapshotFunc.
func (mock *VoterMock) InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error {
	if mock.InitializePollWithSnapshotFunc == nil {
		panic("VoterMock.InitializePollWithSnapshotFunc: method is nil but Voter.InitializePollWithSnapshot was just called")
	}
	callInfo := struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		Key            vote.PollKey
		SnapshotSeqNo  int64
		PollProperties []vote.PollProperty
	}{
		Ctx:            ctx,
		Key:            key,
		SnapshotSeqNo:  snapshotSeqNo,
		PollProperties: pollProperties,
	}
	mock.lockInitializePollWithSnapshot.Lock()
	mock.calls.InitializePollWithSnapshot = append(mock.calls.InitializePollWithSnapshot, callInfo)
	mock.lockInitializePollWithSnapshot.Unlock()
	return mock.InitializePollWithSnapshotFunc(ctx, key, snapshotSeqNo, pollProperties...)
}

// InitializePollWithSnapshotCalls gets all the calls that were made to InitializePollWithSnapshot.
// Check the length with:
//     len(mockedVoter.InitializePollWithSnapshotCalls())
func (mock *VoterMock) InitializePollWithSnapshotCalls() []struct {
	Ctx            github_com_cosmos_cosmos_sdk_types.Context
	Key            vote.PollKey
	SnapshotSeqNo  int64
	PollProperties []vote.PollProperty
} {
	var calls []struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		Key            vote.PollKey
		SnapshotSeqNo  int64
		PollProperties []vote.PollProperty
	}
	mock.lockInitializePollWithSnapshot.RLock()
	calls = mock.calls.InitializePollWithSnapshot
	mock.lockInitializePollWithSnapshot.RUnlock()
	return calls
}

// Ensure, that SignerMock does implement types.Signer.
// If this is not the case, regenerate this file with moq.
var _ types.Signer = &SignerMock{}

// SignerMock is a mock implementation of types.Signer.
//
// 	func TestSomethingThatUsesSigner(t *testing.T) {
//
// 		// make and configure a mocked types.Signer
// 		mockedSigner := &SignerMock{
// 			AssertMatchesRequirementsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter snapshot.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
// 				panic("mock out the AssertMatchesRequirements method")
// 			},
// 			AssignNextKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error {
// 				panic("mock out the AssignNextKey method")
// 			},
// 			GetCurrentKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetCurrentKey method")
// 			},
// 			GetCurrentKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
// 				panic("mock out the GetCurrentKeyID method")
// 			},
// 			GetExternalKeyIDsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
// 				panic("mock out the GetExternalKeyIDs method")
// 			},
// 			GetExternalMultisigThresholdFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) utils.Threshold {
// 				panic("mock out the GetExternalMultisigThreshold method")
// 			},
// 			GetKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetKey method")
// 			},
// 			GetKeyForSigIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetKeyForSigID method")
// 			},
// 			GetNextKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetNextKey method")
// 			},
// 			GetSigFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
// 				panic("mock out the GetSig method")
// 			},
// 			GetSnapshotCounterForKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
// 				panic("mock out the GetSnapshotCounterForKeyID method")
// 			},
// 			RotateKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
// 				panic("mock out the RotateKey method")
// 			},
// 			StartSignFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter snapshot.Snapshotter, voter interface{InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error}) error {
// 				panic("mock out the StartSign method")
// 			},
// 		}
//
// 		// use mockedSigner in code that requires types.Signer
// 		// and then make assertions.
//
// 	}
type SignerMock struct {
	// AssertMatchesRequirementsFunc mocks the AssertMatchesRequirements method.
	AssertMatchesRequirementsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter snapshot.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error

	// AssignNextKeyFunc mocks the AssignNextKey method.
	AssignNextKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error

	// GetCurrentKeyFunc mocks the GetCurrentKey method.
	GetCurrentKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetCurrentKeyIDFunc mocks the GetCurrentKeyID method.
	GetCurrentKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool)

	// GetExternalKeyIDsFunc mocks the GetExternalKeyIDs method.
	GetExternalKeyIDsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool)

	// GetExternalMultisigThresholdFunc mocks the GetExternalMultisigThreshold method.
	GetExternalMultisigThresholdFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) utils.Threshold

	// GetKeyFunc mocks the GetKey method.
	GetKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetKeyForSigIDFunc mocks the GetKeyForSigID method.
	GetKeyForSigIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetNextKeyFunc mocks the GetNextKey method.
	GetNextKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetSigFunc mocks the GetSig method.
	GetSigFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus)

	// GetSnapshotCounterForKeyIDFunc mocks the GetSnapshotCounterForKeyID method.
	GetSnapshotCounterForKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool)

	// RotateKeyFunc mocks the RotateKey method.
	RotateKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error

	// StartSignFunc mocks the StartSign method.
	StartSignFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter snapshot.Snapshotter, voter interface {
		InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error
	}) error

	// calls tracks calls to the methods.
	calls struct {
		// AssertMatchesRequirements holds details about calls to the AssertMatchesRequirements method.
		AssertMatchesRequirements []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Snapshotter is the snapshotter argument value.
			Snapshotter snapshot.Snapshotter
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// AssignNextKey holds details about calls to the AssignNextKey method.
		AssignNextKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetCurrentKey holds details about calls to the GetCurrentKey method.
		GetCurrentKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetCurrentKeyID holds details about calls to the GetCurrentKeyID method.
		GetCurrentKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetExternalKeyIDs holds details about calls to the GetExternalKeyIDs method.
		GetExternalKeyIDs []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// GetExternalMultisigThreshold holds details about calls to the GetExternalMultisigThreshold method.
		GetExternalMultisigThreshold []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetKey holds details about calls to the GetKey method.
		GetKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetKeyForSigID holds details about calls to the GetKeyForSigID method.
		GetKeyForSigID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetNextKey holds details about calls to the GetNextKey method.
		GetNextKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetSig holds details about calls to the GetSig method.
		GetSig []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetSnapshotCounterForKeyID holds details about calls to the GetSnapshotCounterForKeyID method.
		GetSnapshotCounterForKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// RotateKey holds details about calls to the RotateKey method.
		RotateKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// StartSign holds details about calls to the StartSign method.
		StartSign []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Info is the info argument value.
			Info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
			// Snapshotter is the snapshotter argument value.
			Snapshotter snapshot.Snapshotter
			// Voter is the voter argument value.
			Voter interface {
				InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error
			}
		}
	}
	lockAssertMatchesRequirements    sync.RWMutex
	lockAssignNextKey                sync.RWMutex
	lockGetCurrentKey                sync.RWMutex
	lockGetCurrentKeyID              sync.RWMutex
	lockGetExternalKeyIDs            sync.RWMutex
	lockGetExternalMultisigThreshold sync.RWMutex
	lockGetKey                       sync.RWMutex
	lockGetKeyForSigID               sync.RWMutex
	lockGetNextKey                   sync.RWMutex
	lockGetSig                       sync.RWMutex
	lockGetSnapshotCounterForKeyID   sync.RWMutex
	lockRotateKey                    sync.RWMutex
	lockStartSign                    sync.RWMutex
}

// AssertMatchesRequirements calls AssertMatchesRequirementsFunc.
func (mock *SignerMock) AssertMatchesRequirements(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter snapshot.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
	if mock.AssertMatchesRequirementsFunc == nil {
		panic("SignerMock.AssertMatchesRequirementsFunc: method is nil but Signer.AssertMatchesRequirements was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Snapshotter snapshot.Snapshotter
		Chain       nexus.Chain
		KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:         ctx,
		Snapshotter: snapshotter,
		Chain:       chain,
		KeyID:       keyID,
		KeyRole:     keyRole,
	}
	mock.lockAssertMatchesRequirements.Lock()
	mock.calls.AssertMatchesRequirements = append(mock.calls.AssertMatchesRequirements, callInfo)
	mock.lockAssertMatchesRequirements.Unlock()
	return mock.AssertMatchesRequirementsFunc(ctx, snapshotter, chain, keyID, keyRole)
}

// AssertMatchesRequirementsCalls gets all the calls that were made to AssertMatchesRequirements.
// Check the length with:
//     len(mockedSigner.AssertMatchesRequirementsCalls())
func (mock *SignerMock) AssertMatchesRequirementsCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Snapshotter snapshot.Snapshotter
	Chain       nexus.Chain
	KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Snapshotter snapshot.Snapshotter
		Chain       nexus.Chain
		KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockAssertMatchesRequirements.RLock()
	calls = mock.calls.AssertMatchesRequirements
	mock.lockAssertMatchesRequirements.RUnlock()
	return calls
}

// AssignNextKey calls AssignNextKeyFunc.
func (mock *SignerMock) AssignNextKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error {
	if mock.AssignNextKeyFunc == nil {
		panic("SignerMock.AssignNextKeyFunc: method is nil but Signer.AssignNextKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
		KeyID:   keyID,
	}
	mock.lockAssignNextKey.Lock()
	mock.calls.AssignNextKey = append(mock.calls.AssignNextKey, callInfo)
	mock.lockAssignNextKey.Unlock()
	return mock.AssignNextKeyFunc(ctx, chain, keyRole, keyID)
}

// AssignNextKeyCalls gets all the calls that were made to AssignNextKey.
// Check the length with:
//     len(mockedSigner.AssignNextKeyCalls())
func (mock *SignerMock) AssignNextKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockAssignNextKey.RLock()
	calls = mock.calls.AssignNextKey
	mock.lockAssignNextKey.RUnlock()
	return calls
}

// GetCurrentKey calls GetCurrentKeyFunc.
func (mock *SignerMock) GetCurrentKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetCurrentKeyFunc == nil {
		panic("SignerMock.GetCurrentKeyFunc: method is nil but Signer.GetCurrentKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKey.Lock()
	mock.calls.GetCurrentKey = append(mock.calls.GetCurrentKey, callInfo)
	mock.lockGetCurrentKey.Unlock()
	return mock.GetCurrentKeyFunc(ctx, chain, keyRole)
}

// GetCurrentKeyCalls gets all the calls that were made to GetCurrentKey.
// Check the length with:
//     len(mockedSigner.GetCurrentKeyCalls())
func (mock *SignerMock) GetCurrentKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetCurrentKey.RLock()
	calls = mock.calls.GetCurrentKey
	mock.lockGetCurrentKey.RUnlock()
	return calls
}

// GetCurrentKeyID calls GetCurrentKeyIDFunc.
func (mock *SignerMock) GetCurrentKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
	if mock.GetCurrentKeyIDFunc == nil {
		panic("SignerMock.GetCurrentKeyIDFunc: method is nil but Signer.GetCurrentKeyID was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKeyID.Lock()
	mock.calls.GetCurrentKeyID = append(mock.calls.GetCurrentKeyID, callInfo)
	mock.lockGetCurrentKeyID.Unlock()
	return mock.GetCurrentKeyIDFunc(ctx, chain, keyRole)
}

// GetCurrentKeyIDCalls gets all the calls that were made to GetCurrentKeyID.
// Check the length with:
//     len(mockedSigner.GetCurrentKeyIDCalls())
func (mock *SignerMock) GetCurrentKeyIDCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetCurrentKeyID.RLock()
	calls = mock.calls.GetCurrentKeyID
	mock.lockGetCurrentKeyID.RUnlock()
	return calls
}

// GetExternalKeyIDs calls GetExternalKeyIDsFunc.
func (mock *SignerMock) GetExternalKeyIDs(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
	if mock.GetExternalKeyIDsFunc == nil {
		panic("SignerMock.GetExternalKeyIDsFunc: method is nil but Signer.GetExternalKeyIDs was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetExternalKeyIDs.Lock()
	mock.calls.GetExternalKeyIDs = append(mock.calls.GetExternalKeyIDs, callInfo)
	mock.lockGetExternalKeyIDs.Unlock()
	return mock.GetExternalKeyIDsFunc(ctx, chain)
}

// GetExternalKeyIDsCalls gets all the calls that were made to GetExternalKeyIDs.
// Check the length with:
//     len(mockedSigner.GetExternalKeyIDsCalls())
func (mock *SignerMock) GetExternalKeyIDsCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockGetExternalKeyIDs.RLock()
	calls = mock.calls.GetExternalKeyIDs
	mock.lockGetExternalKeyIDs.RUnlock()
	return calls
}

// GetExternalMultisigThreshold calls GetExternalMultisigThresholdFunc.
func (mock *SignerMock) GetExternalMultisigThreshold(ctx github_com_cosmos_cosmos_sdk_types.Context) utils.Threshold {
	if mock.GetExternalMultisigThresholdFunc == nil {
		panic("SignerMock.GetExternalMultisigThresholdFunc: method is nil but Signer.GetExternalMultisigThreshold was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetExternalMultisigThreshold.Lock()
	mock.calls.GetExternalMultisigThreshold = append(mock.calls.GetExternalMultisigThreshold, callInfo)
	mock.lockGetExternalMultisigThreshold.Unlock()
	return mock.GetExternalMultisigThresholdFunc(ctx)
}

// GetExternalMultisigThresholdCalls gets all the calls that were made to GetExternalMultisigThreshold.
// Check the length with:
//     len(mockedSigner.GetExternalMultisigThresholdCalls())
func (mock *SignerMock) GetExternalMultisigThresholdCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetExternalMultisigThreshold.RLock()
	calls = mock.calls.GetExternalMultisigThreshold
	mock.lockGetExternalMultisigThreshold.RUnlock()
	return calls
}

// GetKey calls GetKeyFunc.
func (mock *SignerMock) GetKey(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetKeyFunc == nil {
		panic("SignerMock.GetKeyFunc: method is nil but Signer.GetKey was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetKey.Lock()
	mock.calls.GetKey = append(mock.calls.GetKey, callInfo)
	mock.lockGetKey.Unlock()
	return mock.GetKeyFunc(ctx, keyID)
}

// GetKeyCalls gets all the calls that were made to GetKey.
// Check the length with:
//     len(mockedSigner.GetKeyCalls())
func (mock *SignerMock) GetKeyCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetKey.RLock()
	calls = mock.calls.GetKey
	mock.lockGetKey.RUnlock()
	return calls
}

// GetKeyForSigID calls GetKeyForSigIDFunc.
func (mock *SignerMock) GetKeyForSigID(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetKeyForSigIDFunc == nil {
		panic("SignerMock.GetKeyForSigIDFunc: method is nil but Signer.GetKeyForSigID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetKeyForSigID.Lock()
	mock.calls.GetKeyForSigID = append(mock.calls.GetKeyForSigID, callInfo)
	mock.lockGetKeyForSigID.Unlock()
	return mock.GetKeyForSigIDFunc(ctx, sigID)
}

// GetKeyForSigIDCalls gets all the calls that were made to GetKeyForSigID.
// Check the length with:
//     len(mockedSigner.GetKeyForSigIDCalls())
func (mock *SignerMock) GetKeyForSigIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetKeyForSigID.RLock()
	calls = mock.calls.GetKeyForSigID
	mock.lockGetKeyForSigID.RUnlock()
	return calls
}

// GetNextKey calls GetNextKeyFunc.
func (mock *SignerMock) GetNextKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetNextKeyFunc == nil {
		panic("SignerMock.GetNextKeyFunc: method is nil but Signer.GetNextKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetNextKey.Lock()
	mock.calls.GetNextKey = append(mock.calls.GetNextKey, callInfo)
	mock.lockGetNextKey.Unlock()
	return mock.GetNextKeyFunc(ctx, chain, keyRole)
}

// GetNextKeyCalls gets all the calls that were made to GetNextKey.
// Check the length with:
//     len(mockedSigner.GetNextKeyCalls())
func (mock *SignerMock) GetNextKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetNextKey.RLock()
	calls = mock.calls.GetNextKey
	mock.lockGetNextKey.RUnlock()
	return calls
}

// GetSig calls GetSigFunc.
func (mock *SignerMock) GetSig(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
	if mock.GetSigFunc == nil {
		panic("SignerMock.GetSigFunc: method is nil but Signer.GetSig was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetSig.Lock()
	mock.calls.GetSig = append(mock.calls.GetSig, callInfo)
	mock.lockGetSig.Unlock()
	return mock.GetSigFunc(ctx, sigID)
}

// GetSigCalls gets all the calls that were made to GetSig.
// Check the length with:
//     len(mockedSigner.GetSigCalls())
func (mock *SignerMock) GetSigCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetSig.RLock()
	calls = mock.calls.GetSig
	mock.lockGetSig.RUnlock()
	return calls
}

// GetSnapshotCounterForKeyID calls GetSnapshotCounterForKeyIDFunc.
func (mock *SignerMock) GetSnapshotCounterForKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
	if mock.GetSnapshotCounterForKeyIDFunc == nil {
		panic("SignerMock.GetSnapshotCounterForKeyIDFunc: method is nil but Signer.GetSnapshotCounterForKeyID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetSnapshotCounterForKeyID.Lock()
	mock.calls.GetSnapshotCounterForKeyID = append(mock.calls.GetSnapshotCounterForKeyID, callInfo)
	mock.lockGetSnapshotCounterForKeyID.Unlock()
	return mock.GetSnapshotCounterForKeyIDFunc(ctx, keyID)
}

// GetSnapshotCounterForKeyIDCalls gets all the calls that were made to GetSnapshotCounterForKeyID.
// Check the length with:
//     len(mockedSigner.GetSnapshotCounterForKeyIDCalls())
func (mock *SignerMock) GetSnapshotCounterForKeyIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetSnapshotCounterForKeyID.RLock()
	calls = mock.calls.GetSnapshotCounterForKeyID
	mock.lockGetSnapshotCounterForKeyID.RUnlock()
	return calls
}

// RotateKey calls RotateKeyFunc.
func (mock *SignerMock) RotateKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
	if mock.RotateKeyFunc == nil {
		panic("SignerMock.RotateKeyFunc: method is nil but Signer.RotateKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockRotateKey.Lock()
	mock.calls.RotateKey = append(mock.calls.RotateKey, callInfo)
	mock.lockRotateKey.Unlock()
	return mock.RotateKeyFunc(ctx, chain, keyRole)
}

// RotateKeyCalls gets all the calls that were made to RotateKey.
// Check the length with:
//     len(mockedSigner.RotateKeyCalls())
func (mock *SignerMock) RotateKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockRotateKey.RLock()
	calls = mock.calls.RotateKey
	mock.lockRotateKey.RUnlock()
	return calls
}

// StartSign calls StartSignFunc.
func (mock *SignerMock) StartSign(ctx github_com_cosmos_cosmos_sdk_types.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter snapshot.Snapshotter, voter interface {
	InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error
}) error {
	if mock.StartSignFunc == nil {
		panic("SignerMock.StartSignFunc: method is nil but Signer.StartSign was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snapshotter snapshot.Snapshotter
		Voter       interface {
			InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error
		}
	}{
		Ctx:         ctx,
		Info:        info,
		Snapshotter: snapshotter,
		Voter:       voter,
	}
	mock.lockStartSign.Lock()
	mock.calls.StartSign = append(mock.calls.StartSign, callInfo)
	mock.lockStartSign.Unlock()
	return mock.StartSignFunc(ctx, info, snapshotter, voter)
}

// StartSignCalls gets all the calls that were made to StartSign.
// Check the length with:
//     len(mockedSigner.StartSignCalls())
func (mock *SignerMock) StartSignCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	Snapshotter snapshot.Snapshotter
	Voter       interface {
		InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error
	}
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snapshotter snapshot.Snapshotter
		Voter       interface {
			InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, snapshotSeqNo int64, pollProperties ...vote.PollProperty) error
		}
	}
	mock.lockStartSign.RLock()
	calls = mock.calls.StartSign
	mock.lockStartSign.RUnlock()
	return calls
}

// Ensure, that NexusMock does implement types.Nexus.
// If this is not the case, regenerate this file with moq.
var _ types.Nexus = &NexusMock{}

// NexusMock is a mock implementation of types.Nexus.
//
// 	func TestSomethingThatUsesNexus(t *testing.T) {
//
// 		// make and configure a mocked types.Nexus
// 		mockedNexus := &NexusMock{
// 			ArchivePendingTransferFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, transfer nexus.CrossChainTransfer)  {
// 				panic("mock out the ArchivePendingTransfer method")
// 			},
// 			EnqueueForTransferFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, amount github_com_cosmos_cosmos_sdk_types.Coin) error {
// 				panic("mock out the EnqueueForTransfer method")
// 			},
// 			GetChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
// 				panic("mock out the GetChain method")
// 			},
// 			GetChainMaintainersFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) []github_com_cosmos_cosmos_sdk_types.ValAddress {
// 				panic("mock out the GetChainMaintainers method")
// 			},
// 			GetChainsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) []nexus.Chain {
// 				panic("mock out the GetChains method")
// 			},
// 			GetRecipientFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool) {
// 				panic("mock out the GetRecipient method")
// 			},
// 			GetTransfersForChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer {
// 				panic("mock out the GetTransfersForChain method")
// 			},
// 			IsAssetRegisteredFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) bool {
// 				panic("mock out the IsAssetRegistered method")
// 			},
// 			IsChainActivatedFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) bool {
// 				panic("mock out the IsChainActivated method")
// 			},
// 			LinkAddressesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress)  {
// 				panic("mock out the LinkAddresses method")
// 			},
// 			RegisterAssetFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string)  {
// 				panic("mock out the RegisterAsset method")
// 			},
// 			SetChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)  {
// 				panic("mock out the SetChain method")
// 			},
// 		}
//
// 		// use mockedNexus in code that requires types.Nexus
// 		// and then make assertions.
//
// 	}
type NexusMock struct {
	// ArchivePendingTransferFunc mocks the ArchivePendingTransfer method.
	ArchivePendingTransferFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, transfer nexus.CrossChainTransfer)

	// EnqueueForTransferFunc mocks the EnqueueForTransfer method.
	EnqueueForTransferFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, amount github_com_cosmos_cosmos_sdk_types.Coin) error

	// GetChainFunc mocks the GetChain method.
	GetChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool)

	// GetChainMaintainersFunc mocks the GetChainMaintainers method.
	GetChainMaintainersFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) []github_com_cosmos_cosmos_sdk_types.ValAddress

	// GetChainsFunc mocks the GetChains method.
	GetChainsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) []nexus.Chain

	// GetRecipientFunc mocks the GetRecipient method.
	GetRecipientFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool)

	// GetTransfersForChainFunc mocks the GetTransfersForChain method.
	GetTransfersForChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer

	// IsAssetRegisteredFunc mocks the IsAssetRegistered method.
	IsAssetRegisteredFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) bool

	// IsChainActivatedFunc mocks the IsChainActivated method.
	IsChainActivatedFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) bool

	// LinkAddressesFunc mocks the LinkAddresses method.
	LinkAddressesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress)

	// RegisterAssetFunc mocks the RegisterAsset method.
	RegisterAssetFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string)

	// SetChainFunc mocks the SetChain method.
	SetChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)

	// calls tracks calls to the methods.
	calls struct {
		// ArchivePendingTransfer holds details about calls to the ArchivePendingTransfer method.
		ArchivePendingTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Transfer is the transfer argument value.
			Transfer nexus.CrossChainTransfer
		}
		// EnqueueForTransfer holds details about calls to the EnqueueForTransfer method.
		EnqueueForTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
			// Amount is the amount argument value.
			Amount github_com_cosmos_cosmos_sdk_types.Coin
		}
		// GetChain holds details about calls to the GetChain method.
		GetChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetChainMaintainers holds details about calls to the GetChainMaintainers method.
		GetChainMaintainers []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// GetChains holds details about calls to the GetChains method.
		GetChains []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetRecipient holds details about calls to the GetRecipient method.
		GetRecipient []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
		}
		// GetTransfersForChain holds details about calls to the GetTransfersForChain method.
		GetTransfersForChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// State is the state argument value.
			State nexus.TransferState
		}
		// IsAssetRegistered holds details about calls to the IsAssetRegistered method.
		IsAssetRegistered []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// ChainName is the chainName argument value.
			ChainName string
			// Denom is the denom argument value.
			Denom string
		}
		// IsChainActivated holds details about calls to the IsChainActivated method.
		IsChainActivated []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// LinkAddresses holds details about calls to the LinkAddresses method.
		LinkAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender nexus.CrossChainAddress
			// Recipient is the recipient argument value.
			Recipient nexus.CrossChainAddress
		}
		// RegisterAsset holds details about calls to the RegisterAsset method.
		RegisterAsset []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// ChainName is the chainName argument value.
			ChainName string
			// Denom is the denom argument value.
			Denom string
		}
		// SetChain holds details about calls to the SetChain method.
		SetChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
	}
	lockArchivePendingTransfer sync.RWMutex
	lockEnqueueForTransfer     sync.RWMutex
	lockGetChain               sync.RWMutex
	lockGetChainMaintainers    sync.RWMutex
	lockGetChains              sync.RWMutex
	lockGetRecipient           sync.RWMutex
	lockGetTransfersForChain   sync.RWMutex
	lockIsAssetRegistered      sync.RWMutex
	lockIsChainActivated       sync.RWMutex
	lockLinkAddresses          sync.RWMutex
	lockRegisterAsset          sync.RWMutex
	lockSetChain               sync.RWMutex
}

// ArchivePendingTransfer calls ArchivePendingTransferFunc.
func (mock *NexusMock) ArchivePendingTransfer(ctx github_com_cosmos_cosmos_sdk_types.Context, transfer nexus.CrossChainTransfer) {
	if mock.ArchivePendingTransferFunc == nil {
		panic("NexusMock.ArchivePendingTransferFunc: method is nil but Nexus.ArchivePendingTransfer was just called")
	}
	callInfo := struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Transfer nexus.CrossChainTransfer
	}{
		Ctx:      ctx,
		Transfer: transfer,
	}
	mock.lockArchivePendingTransfer.Lock()
	mock.calls.ArchivePendingTransfer = append(mock.calls.ArchivePendingTransfer, callInfo)
	mock.lockArchivePendingTransfer.Unlock()
	mock.ArchivePendingTransferFunc(ctx, transfer)
}

// ArchivePendingTransferCalls gets all the calls that were made to ArchivePendingTransfer.
// Check the length with:
//     len(mockedNexus.ArchivePendingTransferCalls())
func (mock *NexusMock) ArchivePendingTransferCalls() []struct {
	Ctx      github_com_cosmos_cosmos_sdk_types.Context
	Transfer nexus.CrossChainTransfer
} {
	var calls []struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Transfer nexus.CrossChainTransfer
	}
	mock.lockArchivePendingTransfer.RLock()
	calls = mock.calls.ArchivePendingTransfer
	mock.lockArchivePendingTransfer.RUnlock()
	return calls
}

// EnqueueForTransfer calls EnqueueForTransferFunc.
func (mock *NexusMock) EnqueueForTransfer(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, amount github_com_cosmos_cosmos_sdk_types.Coin) error {
	if mock.EnqueueForTransferFunc == nil {
		panic("NexusMock.EnqueueForTransferFunc: method is nil but Nexus.EnqueueForTransfer was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
		Amount github_com_cosmos_cosmos_sdk_types.Coin
	}{
		Ctx:    ctx,
		Sender: sender,
		Amount: amount,
	}
	mock.lockEnqueueForTransfer.Lock()
	mock.calls.EnqueueForTransfer = append(mock.calls.EnqueueForTransfer, callInfo)
	mock.lockEnqueueForTransfer.Unlock()
	return mock.EnqueueForTransferFunc(ctx, sender, amount)
}

// EnqueueForTransferCalls gets all the calls that were made to EnqueueForTransfer.
// Check the length with:
//     len(mockedNexus.EnqueueForTransferCalls())
func (mock *NexusMock) EnqueueForTransferCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Sender nexus.CrossChainAddress
	Amount github_com_cosmos_cosmos_sdk_types.Coin
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
		Amount github_com_cosmos_cosmos_sdk_types.Coin
	}
	mock.lockEnqueueForTransfer.RLock()
	calls = mock.calls.EnqueueForTransfer
	mock.lockEnqueueForTransfer.RUnlock()
	return calls
}

// GetChain calls GetChainFunc.
func (mock *NexusMock) GetChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
	if mock.GetChainFunc == nil {
		panic("NexusMock.GetChainFunc: method is nil but Nexus.GetChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChain.Lock()
	mock.calls.GetChain = append(mock.calls.GetChain, callInfo)
	mock.lockGetChain.Unlock()
	return mock.GetChainFunc(ctx, chain)
}

// GetChainCalls gets all the calls that were made to GetChain.
// Check the length with:
//     len(mockedNexus.GetChainCalls())
func (mock *NexusMock) GetChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetChain.RLock()
	calls = mock.calls.GetChain
	mock.lockGetChain.RUnlock()
	return calls
}

// GetChainMaintainers calls GetChainMaintainersFunc.
func (mock *NexusMock) GetChainMaintainers(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if mock.GetChainMaintainersFunc == nil {
		panic("NexusMock.GetChainMaintainersFunc: method is nil but Nexus.GetChainMaintainers was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChainMaintainers.Lock()
	mock.calls.GetChainMaintainers = append(mock.calls.GetChainMaintainers, callInfo)
	mock.lockGetChainMaintainers.Unlock()
	return mock.GetChainMaintainersFunc(ctx, chain)
}

// GetChainMaintainersCalls gets all the calls that were made to GetChainMaintainers.
// Check the length with:
//     len(mockedNexus.GetChainMaintainersCalls())
func (mock *NexusMock) GetChainMaintainersCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockGetChainMaintainers.RLock()
	calls = mock.calls.GetChainMaintainers
	mock.lockGetChainMaintainers.RUnlock()
	return calls
}

// GetChains calls GetChainsFunc.
func (mock *NexusMock) GetChains(ctx github_com_cosmos_cosmos_sdk_types.Context) []nexus.Chain {
	if mock.GetChainsFunc == nil {
		panic("NexusMock.GetChainsFunc: method is nil but Nexus.GetChains was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetChains.Lock()
	mock.calls.GetChains = append(mock.calls.GetChains, callInfo)
	mock.lockGetChains.Unlock()
	return mock.GetChainsFunc(ctx)
}

// GetChainsCalls gets all the calls that were made to GetChains.
// Check the length with:
//     len(mockedNexus.GetChainsCalls())
func (mock *NexusMock) GetChainsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetChains.RLock()
	calls = mock.calls.GetChains
	mock.lockGetChains.RUnlock()
	return calls
}

// GetRecipient calls GetRecipientFunc.
func (mock *NexusMock) GetRecipient(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress) (nexus.CrossChainAddress, bool) {
	if mock.GetRecipientFunc == nil {
		panic("NexusMock.GetRecipientFunc: method is nil but Nexus.GetRecipient was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
	}{
		Ctx:    ctx,
		Sender: sender,
	}
	mock.lockGetRecipient.Lock()
	mock.calls.GetRecipient = append(mock.calls.GetRecipient, callInfo)
	mock.lockGetRecipient.Unlock()
	return mock.GetRecipientFunc(ctx, sender)
}

// GetRecipientCalls gets all the calls that were made to GetRecipient.
// Check the length with:
//     len(mockedNexus.GetRecipientCalls())
func (mock *NexusMock) GetRecipientCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Sender nexus.CrossChainAddress
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender nexus.CrossChainAddress
	}
	mock.lockGetRecipient.RLock()
	calls = mock.calls.GetRecipient
	mock.lockGetRecipient.RUnlock()
	return calls
}

// GetTransfersForChain calls GetTransfersForChainFunc.
func (mock *NexusMock) GetTransfersForChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, state nexus.TransferState) []nexus.CrossChainTransfer {
	if mock.GetTransfersForChainFunc == nil {
		panic("NexusMock.GetTransfersForChainFunc: method is nil but Nexus.GetTransfersForChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
		State nexus.TransferState
	}{
		Ctx:   ctx,
		Chain: chain,
		State: state,
	}
	mock.lockGetTransfersForChain.Lock()
	mock.calls.GetTransfersForChain = append(mock.calls.GetTransfersForChain, callInfo)
	mock.lockGetTransfersForChain.Unlock()
	return mock.GetTransfersForChainFunc(ctx, chain, state)
}

// GetTransfersForChainCalls gets all the calls that were made to GetTransfersForChain.
// Check the length with:
//     len(mockedNexus.GetTransfersForChainCalls())
func (mock *NexusMock) GetTransfersForChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
	State nexus.TransferState
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
		State nexus.TransferState
	}
	mock.lockGetTransfersForChain.RLock()
	calls = mock.calls.GetTransfersForChain
	mock.lockGetTransfersForChain.RUnlock()
	return calls
}

// IsAssetRegistered calls IsAssetRegisteredFunc.
func (mock *NexusMock) IsAssetRegistered(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) bool {
	if mock.IsAssetRegisteredFunc == nil {
		panic("NexusMock.IsAssetRegisteredFunc: method is nil but Nexus.IsAssetRegistered was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}{
		Ctx:       ctx,
		ChainName: chainName,
		Denom:     denom,
	}
	mock.lockIsAssetRegistered.Lock()
	mock.calls.IsAssetRegistered = append(mock.calls.IsAssetRegistered, callInfo)
	mock.lockIsAssetRegistered.Unlock()
	return mock.IsAssetRegisteredFunc(ctx, chainName, denom)
}

// IsAssetRegisteredCalls gets all the calls that were made to IsAssetRegistered.
// Check the length with:
//     len(mockedNexus.IsAssetRegisteredCalls())
func (mock *NexusMock) IsAssetRegisteredCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	ChainName string
	Denom     string
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}
	mock.lockIsAssetRegistered.RLock()
	calls = mock.calls.IsAssetRegistered
	mock.lockIsAssetRegistered.RUnlock()
	return calls
}

// IsChainActivated calls IsChainActivatedFunc.
func (mock *NexusMock) IsChainActivated(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) bool {
	if mock.IsChainActivatedFunc == nil {
		panic("NexusMock.IsChainActivatedFunc: method is nil but Nexus.IsChainActivated was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockIsChainActivated.Lock()
	mock.calls.IsChainActivated = append(mock.calls.IsChainActivated, callInfo)
	mock.lockIsChainActivated.Unlock()
	return mock.IsChainActivatedFunc(ctx, chain)
}

// IsChainActivatedCalls gets all the calls that were made to IsChainActivated.
// Check the length with:
//     len(mockedNexus.IsChainActivatedCalls())
func (mock *NexusMock) IsChainActivatedCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockIsChainActivated.RLock()
	calls = mock.calls.IsChainActivated
	mock.lockIsChainActivated.RUnlock()
	return calls
}

// LinkAddresses calls LinkAddressesFunc.
func (mock *NexusMock) LinkAddresses(ctx github_com_cosmos_cosmos_sdk_types.Context, sender nexus.CrossChainAddress, recipient nexus.CrossChainAddress) {
	if mock.LinkAddressesFunc == nil {
		panic("NexusMock.LinkAddressesFunc: method is nil but Nexus.LinkAddresses was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Sender    nexus.CrossChainAddress
		Recipient nexus.CrossChainAddress
	}{
		Ctx:       ctx,
		Sender:    sender,
		Recipient: recipient,
	}
	mock.lockLinkAddresses.Lock()
	mock.calls.LinkAddresses = append(mock.calls.LinkAddresses, callInfo)
	mock.lockLinkAddresses.Unlock()
	mock.LinkAddressesFunc(ctx, sender, recipient)
}

// LinkAddressesCalls gets all the calls that were made to LinkAddresses.
// Check the length with:
//     len(mockedNexus.LinkAddressesCalls())
func (mock *NexusMock) LinkAddressesCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Sender    nexus.CrossChainAddress
	Recipient nexus.CrossChainAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Sender    nexus.CrossChainAddress
		Recipient nexus.CrossChainAddress
	}
	mock.lockLinkAddresses.RLock()
	calls = mock.calls.LinkAddresses
	mock.lockLinkAddresses.RUnlock()
	return calls
}

// RegisterAsset calls RegisterAssetFunc.
func (mock *NexusMock) RegisterAsset(ctx github_com_cosmos_cosmos_sdk_types.Context, chainName string, denom string) {
	if mock.RegisterAssetFunc == nil {
		panic("NexusMock.RegisterAssetFunc: method is nil but Nexus.RegisterAsset was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}{
		Ctx:       ctx,
		ChainName: chainName,
		Denom:     denom,
	}
	mock.lockRegisterAsset.Lock()
	mock.calls.RegisterAsset = append(mock.calls.RegisterAsset, callInfo)
	mock.lockRegisterAsset.Unlock()
	mock.RegisterAssetFunc(ctx, chainName, denom)
}

// RegisterAssetCalls gets all the calls that were made to RegisterAsset.
// Check the length with:
//     len(mockedNexus.RegisterAssetCalls())
func (mock *NexusMock) RegisterAssetCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	ChainName string
	Denom     string
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		ChainName string
		Denom     string
	}
	mock.lockRegisterAsset.RLock()
	calls = mock.calls.RegisterAsset
	mock.lockRegisterAsset.RUnlock()
	return calls
}

// SetChain calls SetChainFunc.
func (mock *NexusMock) SetChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) {
	if mock.SetChainFunc == nil {
		panic("NexusMock.SetChainFunc: method is nil but Nexus.SetChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockSetChain.Lock()
	mock.calls.SetChain = append(mock.calls.SetChain, callInfo)
	mock.lockSetChain.Unlock()
	mock.SetChainFunc(ctx, chain)
}

// SetChainCalls gets all the calls that were made to SetChain.
// Check the length with:
//     len(mockedNexus.SetChainCalls())
func (mock *NexusMock) SetChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockSetChain.RLock()
	calls = mock.calls.SetChain
	mock.lockSetChain.RUnlock()
	return calls
}

// Ensure, that SnapshotterMock does implement types.Snapshotter.
// If this is not the case, regenerate this file with moq.
var _ types.Snapshotter = &SnapshotterMock{}

// SnapshotterMock is a mock implementation of types.Snapshotter.
//
// 	func TestSomethingThatUsesSnapshotter(t *testing.T) {
//
// 		// make and configure a mocked types.Snapshotter
// 		mockedSnapshotter := &SnapshotterMock{
// 			GetLatestCounterFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
// 				panic("mock out the GetLatestCounter method")
// 			},
// 			GetLatestSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (snapshot.Snapshot, bool) {
// 				panic("mock out the GetLatestSnapshot method")
// 			},
// 			GetOperatorFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress {
// 				panic("mock out the GetOperator method")
// 			},
// 			GetProxyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, principal github_com_cosmos_cosmos_sdk_types.ValAddress) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool) {
// 				panic("mock out the GetProxy method")
// 			},
// 			GetSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, seqNo int64) (snapshot.Snapshot, bool) {
// 				panic("mock out the GetSnapshot method")
// 			},
// 			GetValidatorIllegibilityFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator snapshot.SDKValidator) (snapshot.ValidatorIllegibility, error) {
// 				panic("mock out the GetValidatorIllegibility method")
// 			},
// 			TakeSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (snapshot.Snapshot, error) {
// 				panic("mock out the TakeSnapshot method")
// 			},
// 		}
//
// 		// use mockedSnapshotter in code that requires types.Snapshotter
// 		// and then make assertions.
//
// 	}
type SnapshotterMock struct {
	// GetLatestCounterFunc mocks the GetLatestCounter method.
	GetLatestCounterFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64

	// GetLatestSnapshotFunc mocks the GetLatestSnapshot method.
	GetLatestSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (snapshot.Snapshot, bool)

	// GetOperatorFunc mocks the GetOperator method.
	GetOperatorFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress

	// GetProxyFunc mocks the GetProxy method.
	GetProxyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, principal github_com_cosmos_cosmos_sdk_types.ValAddress) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool)

	// GetSnapshotFunc mocks the GetSnapshot method.
	GetSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, seqNo int64) (snapshot.Snapshot, bool)

	// GetValidatorIllegibilityFunc mocks the GetValidatorIllegibility method.
	GetValidatorIllegibilityFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator snapshot.SDKValidator) (snapshot.ValidatorIllegibility, error)

	// TakeSnapshotFunc mocks the TakeSnapshot method.
	TakeSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (snapshot.Snapshot, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLatestCounter holds details about calls to the GetLatestCounter method.
		GetLatestCounter []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetLatestSnapshot holds details about calls to the GetLatestSnapshot method.
		GetLatestSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetOperator holds details about calls to the GetOperator method.
		GetOperator []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Proxy is the proxy argument value.
			Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
		}
		// GetProxy holds details about calls to the GetProxy method.
		GetProxy []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Principal is the principal argument value.
			Principal github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// GetSnapshot holds details about calls to the GetSnapshot method.
		GetSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SeqNo is the seqNo argument value.
			SeqNo int64
		}
		// GetValidatorIllegibility holds details about calls to the GetValidatorIllegibility method.
		GetValidatorIllegibility []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Validator is the validator argument value.
			Validator snapshot.SDKValidator
		}
		// TakeSnapshot holds details about calls to the TakeSnapshot method.
		TakeSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyRequirement is the keyRequirement argument value.
			KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
		}
	}
	lockGetLatestCounter         sync.RWMutex
	lockGetLatestSnapshot        sync.RWMutex
	lockGetOperator              sync.RWMutex
	lockGetProxy                 sync.RWMutex
	lockGetSnapshot              sync.RWMutex
	lockGetValidatorIllegibility sync.RWMutex
	lockTakeSnapshot             sync.RWMutex
}

// GetLatestCounter calls GetLatestCounterFunc.
func (mock *SnapshotterMock) GetLatestCounter(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
	if mock.GetLatestCounterFunc == nil {
		panic("SnapshotterMock.GetLatestCounterFunc: method is nil but Snapshotter.GetLatestCounter was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestCounter.Lock()
	mock.calls.GetLatestCounter = append(mock.calls.GetLatestCounter, callInfo)
	mock.lockGetLatestCounter.Unlock()
	return mock.GetLatestCounterFunc(ctx)
}

// GetLatestCounterCalls gets all the calls that were made to GetLatestCounter.
// Check the length with:
//     len(mockedSnapshotter.GetLatestCounterCalls())
func (mock *SnapshotterMock) GetLatestCounterCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetLatestCounter.RLock()
	calls = mock.calls.GetLatestCounter
	mock.lockGetLatestCounter.RUnlock()
	return calls
}

// GetLatestSnapshot calls GetLatestSnapshotFunc.
func (mock *SnapshotterMock) GetLatestSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context) (snapshot.Snapshot, bool) {
	if mock.GetLatestSnapshotFunc == nil {
		panic("SnapshotterMock.GetLatestSnapshotFunc: method is nil but Snapshotter.GetLatestSnapshot was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestSnapshot.Lock()
	mock.calls.GetLatestSnapshot = append(mock.calls.GetLatestSnapshot, callInfo)
	mock.lockGetLatestSnapshot.Unlock()
	return mock.GetLatestSnapshotFunc(ctx)
}

// GetLatestSnapshotCalls gets all the calls that were made to GetLatestSnapshot.
// Check the length with:
//     len(mockedSnapshotter.GetLatestSnapshotCalls())
func (mock *SnapshotterMock) GetLatestSnapshotCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetLatestSnapshot.RLock()
	calls = mock.calls.GetLatestSnapshot
	mock.lockGetLatestSnapshot.RUnlock()
	return calls
}

// GetOperator calls GetOperatorFunc.
func (mock *SnapshotterMock) GetOperator(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress {
	if mock.GetOperatorFunc == nil {
		panic("SnapshotterMock.GetOperatorFunc: method is nil but Snapshotter.GetOperator was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
	}{
		Ctx:   ctx,
		Proxy: proxy,
	}
	mock.lockGetOperator.Lock()
	mock.calls.GetOperator = append(mock.calls.GetOperator, callInfo)
	mock.lockGetOperator.Unlock()
	return mock.GetOperatorFunc(ctx, proxy)
}

// GetOperatorCalls gets all the calls that were made to GetOperator.
// Check the length with:
//     len(mockedSnapshotter.GetOperatorCalls())
func (mock *SnapshotterMock) GetOperatorCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
	}
	mock.lockGetOperator.RLock()
	calls = mock.calls.GetOperator
	mock.lockGetOperator.RUnlock()
	return calls
}

// GetProxy calls GetProxyFunc.
func (mock *SnapshotterMock) GetProxy(ctx github_com_cosmos_cosmos_sdk_types.Context, principal github_com_cosmos_cosmos_sdk_types.ValAddress) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool) {
	if mock.GetProxyFunc == nil {
		panic("SnapshotterMock.GetProxyFunc: method is nil but Snapshotter.GetProxy was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Principal github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		Principal: principal,
	}
	mock.lockGetProxy.Lock()
	mock.calls.GetProxy = append(mock.calls.GetProxy, callInfo)
	mock.lockGetProxy.Unlock()
	return mock.GetProxyFunc(ctx, principal)
}

// GetProxyCalls gets all the calls that were made to GetProxy.
// Check the length with:
//     len(mockedSnapshotter.GetProxyCalls())
func (mock *SnapshotterMock) GetProxyCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Principal github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Principal github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockGetProxy.RLock()
	calls = mock.calls.GetProxy
	mock.lockGetProxy.RUnlock()
	return calls
}

// GetSnapshot calls GetSnapshotFunc.
func (mock *SnapshotterMock) GetSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, seqNo int64) (snapshot.Snapshot, bool) {
	if mock.GetSnapshotFunc == nil {
		panic("SnapshotterMock.GetSnapshotFunc: method is nil but Snapshotter.GetSnapshot was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SeqNo int64
	}{
		Ctx:   ctx,
		SeqNo: seqNo,
	}
	mock.lockGetSnapshot.Lock()
	mock.calls.GetSnapshot = append(mock.calls.GetSnapshot, callInfo)
	mock.lockGetSnapshot.Unlock()
	return mock.GetSnapshotFunc(ctx, seqNo)
}

// GetSnapshotCalls gets all the calls that were made to GetSnapshot.
// Check the length with:
//     len(mockedSnapshotter.GetSnapshotCalls())
func (mock *SnapshotterMock) GetSnapshotCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SeqNo int64
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SeqNo int64
	}
	mock.lockGetSnapshot.RLock()
	calls = mock.calls.GetSnapshot
	mock.lockGetSnapshot.RUnlock()
	return calls
}

// GetValidatorIllegibility calls GetValidatorIllegibilityFunc.
func (mock *SnapshotterMock) GetValidatorIllegibility(ctx github_com_cosmos_cosmos_sdk_types.Context, validator snapshot.SDKValidator) (snapshot.ValidatorIllegibility, error) {
	if mock.GetValidatorIllegibilityFunc == nil {
		panic("SnapshotterMock.GetValidatorIllegibilityFunc: method is nil but Snapshotter.GetValidatorIllegibility was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator snapshot.SDKValidator
	}{
		Ctx:       ctx,
		Validator: validator,
	}
	mock.lockGetValidatorIllegibility.Lock()
	mock.calls.GetValidatorIllegibility = append(mock.calls.GetValidatorIllegibility, callInfo)
	mock.lockGetValidatorIllegibility.Unlock()
	return mock.GetValidatorIllegibilityFunc(ctx, validator)
}

// GetValidatorIllegibilityCalls gets all the calls that were made to GetValidatorIllegibility.
// Check the length with:
//     len(mockedSnapshotter.GetValidatorIllegibilityCalls())
func (mock *SnapshotterMock) GetValidatorIllegibilityCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Validator snapshot.SDKValidator
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator snapshot.SDKValidator
	}
	mock.lockGetValidatorIllegibility.RLock()
	calls = mock.calls.GetValidatorIllegibility
	mock.lockGetValidatorIllegibility.RUnlock()
	return calls
}

// TakeSnapshot calls TakeSnapshotFunc.
func (mock *SnapshotterMock) TakeSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (snapshot.Snapshot, error) {
	if mock.TakeSnapshotFunc == nil {
		panic("SnapshotterMock.TakeSnapshotFunc: method is nil but Snapshotter.TakeSnapshot was just called")
	}
	callInfo := struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
	}{
		Ctx:            ctx,
		KeyRequirement: keyRequirement,
	}
	mock.lockTakeSnapshot.Lock()
	mock.calls.TakeSnapshot = append(mock.calls.TakeSnapshot, callInfo)
	mock.lockTakeSnapshot.Unlock()
	return mock.TakeSnapshotFunc(ctx, keyRequirement)
}

// TakeSnapshotCalls gets all the calls that were made to TakeSnapshot.
// Check the length with:
//     len(mockedSnapshotter.TakeSnapshotCalls())
func (mock *SnapshotterMock) TakeSnapshotCalls() []struct {
	Ctx            github_com_cosmos_cosmos_sdk_types.Context
	KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
} {
	var calls []struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
	}
	mock.lockTakeSnapshot.RLock()
	calls = mock.calls.TakeSnapshot
	mock.lockTakeSnapshot.RUnlock()
	return calls
}

// Ensure, that BaseKeeperMock does implement types.BaseKeeper.
// If this is not the case, regenerate this file with moq.
var _ types.BaseKeeper = &BaseKeeperMock{}

// BaseKeeperMock is a mock implementation of types.BaseKeeper.
//
// 	func TestSomethingThatUsesBaseKeeper(t *testing.T) {
//
// 		// make and configure a mocked types.BaseKeeper
// 		mockedBaseKeeper := &BaseKeeperMock{
// 			DeletePendingChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string)  {
// 				panic("mock out the DeletePendingChain method")
// 			},
// 			ForChainFunc: func(chain string) types.ChainKeeper {
// 				panic("mock out the ForChain method")
// 			},
// 			GetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.Params {
// 				panic("mock out the GetParams method")
// 			},
// 			GetPendingChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
// 				panic("mock out the GetPendingChain method")
// 			},
// 			LoggerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
// 				panic("mock out the Logger method")
// 			},
// 			SetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, params ...types.Params)  {
// 				panic("mock out the SetParams method")
// 			},
// 			SetPendingChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)  {
// 				panic("mock out the SetPendingChain method")
// 			},
// 		}
//
// 		// use mockedBaseKeeper in code that requires types.BaseKeeper
// 		// and then make assertions.
//
// 	}
type BaseKeeperMock struct {
	// DeletePendingChainFunc mocks the DeletePendingChain method.
	DeletePendingChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string)

	// ForChainFunc mocks the ForChain method.
	ForChainFunc func(chain string) types.ChainKeeper

	// GetParamsFunc mocks the GetParams method.
	GetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.Params

	// GetPendingChainFunc mocks the GetPendingChain method.
	GetPendingChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool)

	// LoggerFunc mocks the Logger method.
	LoggerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger

	// SetParamsFunc mocks the SetParams method.
	SetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, params ...types.Params)

	// SetPendingChainFunc mocks the SetPendingChain method.
	SetPendingChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain)

	// calls tracks calls to the methods.
	calls struct {
		// DeletePendingChain holds details about calls to the DeletePendingChain method.
		DeletePendingChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// ForChain holds details about calls to the ForChain method.
		ForChain []struct {
			// Chain is the chain argument value.
			Chain string
		}
		// GetParams holds details about calls to the GetParams method.
		GetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetPendingChain holds details about calls to the GetPendingChain method.
		GetPendingChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// Logger holds details about calls to the Logger method.
		Logger []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// SetParams holds details about calls to the SetParams method.
		SetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Params is the params argument value.
			Params []types.Params
		}
		// SetPendingChain holds details about calls to the SetPendingChain method.
		SetPendingChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
	}
	lockDeletePendingChain sync.RWMutex
	lockForChain           sync.RWMutex
	lockGetParams          sync.RWMutex
	lockGetPendingChain    sync.RWMutex
	lockLogger             sync.RWMutex
	lockSetParams          sync.RWMutex
	lockSetPendingChain    sync.RWMutex
}

// DeletePendingChain calls DeletePendingChainFunc.
func (mock *BaseKeeperMock) DeletePendingChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) {
	if mock.DeletePendingChainFunc == nil {
		panic("BaseKeeperMock.DeletePendingChainFunc: method is nil but BaseKeeper.DeletePendingChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockDeletePendingChain.Lock()
	mock.calls.DeletePendingChain = append(mock.calls.DeletePendingChain, callInfo)
	mock.lockDeletePendingChain.Unlock()
	mock.DeletePendingChainFunc(ctx, chain)
}

// DeletePendingChainCalls gets all the calls that were made to DeletePendingChain.
// Check the length with:
//     len(mockedBaseKeeper.DeletePendingChainCalls())
func (mock *BaseKeeperMock) DeletePendingChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockDeletePendingChain.RLock()
	calls = mock.calls.DeletePendingChain
	mock.lockDeletePendingChain.RUnlock()
	return calls
}

// ForChain calls ForChainFunc.
func (mock *BaseKeeperMock) ForChain(chain string) types.ChainKeeper {
	if mock.ForChainFunc == nil {
		panic("BaseKeeperMock.ForChainFunc: method is nil but BaseKeeper.ForChain was just called")
	}
	callInfo := struct {
		Chain string
	}{
		Chain: chain,
	}
	mock.lockForChain.Lock()
	mock.calls.ForChain = append(mock.calls.ForChain, callInfo)
	mock.lockForChain.Unlock()
	return mock.ForChainFunc(chain)
}

// ForChainCalls gets all the calls that were made to ForChain.
// Check the length with:
//     len(mockedBaseKeeper.ForChainCalls())
func (mock *BaseKeeperMock) ForChainCalls() []struct {
	Chain string
} {
	var calls []struct {
		Chain string
	}
	mock.lockForChain.RLock()
	calls = mock.calls.ForChain
	mock.lockForChain.RUnlock()
	return calls
}

// GetParams calls GetParamsFunc.
func (mock *BaseKeeperMock) GetParams(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.Params {
	if mock.GetParamsFunc == nil {
		panic("BaseKeeperMock.GetParamsFunc: method is nil but BaseKeeper.GetParams was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetParams.Lock()
	mock.calls.GetParams = append(mock.calls.GetParams, callInfo)
	mock.lockGetParams.Unlock()
	return mock.GetParamsFunc(ctx)
}

// GetParamsCalls gets all the calls that were made to GetParams.
// Check the length with:
//     len(mockedBaseKeeper.GetParamsCalls())
func (mock *BaseKeeperMock) GetParamsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetParams.RLock()
	calls = mock.calls.GetParams
	mock.lockGetParams.RUnlock()
	return calls
}

// GetPendingChain calls GetPendingChainFunc.
func (mock *BaseKeeperMock) GetPendingChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
	if mock.GetPendingChainFunc == nil {
		panic("BaseKeeperMock.GetPendingChainFunc: method is nil but BaseKeeper.GetPendingChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetPendingChain.Lock()
	mock.calls.GetPendingChain = append(mock.calls.GetPendingChain, callInfo)
	mock.lockGetPendingChain.Unlock()
	return mock.GetPendingChainFunc(ctx, chain)
}

// GetPendingChainCalls gets all the calls that were made to GetPendingChain.
// Check the length with:
//     len(mockedBaseKeeper.GetPendingChainCalls())
func (mock *BaseKeeperMock) GetPendingChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetPendingChain.RLock()
	calls = mock.calls.GetPendingChain
	mock.lockGetPendingChain.RUnlock()
	return calls
}

// Logger calls LoggerFunc.
func (mock *BaseKeeperMock) Logger(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
	if mock.LoggerFunc == nil {
		panic("BaseKeeperMock.LoggerFunc: method is nil but BaseKeeper.Logger was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogger.Lock()
	mock.calls.Logger = append(mock.calls.Logger, callInfo)
	mock.lockLogger.Unlock()
	return mock.LoggerFunc(ctx)
}

// LoggerCalls gets all the calls that were made to Logger.
// Check the length with:
//     len(mockedBaseKeeper.LoggerCalls())
func (mock *BaseKeeperMock) LoggerCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockLogger.RLock()
	calls = mock.calls.Logger
	mock.lockLogger.RUnlock()
	return calls
}

// SetParams calls SetParamsFunc.
func (mock *BaseKeeperMock) SetParams(ctx github_com_cosmos_cosmos_sdk_types.Context, params ...types.Params) {
	if mock.SetParamsFunc == nil {
		panic("BaseKeeperMock.SetParamsFunc: method is nil but BaseKeeper.SetParams was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Params []types.Params
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockSetParams.Lock()
	mock.calls.SetParams = append(mock.calls.SetParams, callInfo)
	mock.lockSetParams.Unlock()
	mock.SetParamsFunc(ctx, params...)
}

// SetParamsCalls gets all the calls that were made to SetParams.
// Check the length with:
//     len(mockedBaseKeeper.SetParamsCalls())
func (mock *BaseKeeperMock) SetParamsCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Params []types.Params
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Params []types.Params
	}
	mock.lockSetParams.RLock()
	calls = mock.calls.SetParams
	mock.lockSetParams.RUnlock()
	return calls
}

// SetPendingChain calls SetPendingChainFunc.
func (mock *BaseKeeperMock) SetPendingChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) {
	if mock.SetPendingChainFunc == nil {
		panic("BaseKeeperMock.SetPendingChainFunc: method is nil but BaseKeeper.SetPendingChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockSetPendingChain.Lock()
	mock.calls.SetPendingChain = append(mock.calls.SetPendingChain, callInfo)
	mock.lockSetPendingChain.Unlock()
	mock.SetPendingChainFunc(ctx, chain)
}

// SetPendingChainCalls gets all the calls that were made to SetPendingChain.
// Check the length with:
//     len(mockedBaseKeeper.SetPendingChainCalls())
func (mock *BaseKeeperMock) SetPendingChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockSetPendingChain.RLock()
	calls = mock.calls.SetPendingChain
	mock.lockSetPendingChain.RUnlock()
	return calls
}

// Ensure, that ChainKeeperMock does implement types.ChainKeeper.
// If this is not the case, regenerate this file with moq.
var _ types.ChainKeeper = &ChainKeeperMock{}

// ChainKeeperMock is a mock implementation of types.ChainKeeper.
//
// 	func TestSomethingThatUsesChainKeeper(t *testing.T) {
//
// 		// make and configure a mocked types.ChainKeeper
// 		mockedChainKeeper := &ChainKeeperMock{
// 			ArchiveTransferKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey)  {
// 				panic("mock out the ArchiveTransferKey method")
// 			},
// 			AssembleTxFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, txID string, sig github_com_axelarnetwork_axelar_core_x_tss_exported.Signature) (*evmTypes.Transaction, error) {
// 				panic("mock out the AssembleTx method")
// 			},
// 			CreateERC20TokenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, asset string, details types.TokenDetails) (types.ERC20Token, error) {
// 				panic("mock out the CreateERC20Token method")
// 			},
// 			CreateNewBatchToSignFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, error) {
// 				panic("mock out the CreateNewBatchToSign method")
// 			},
// 			DeleteDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, deposit types.ERC20Deposit)  {
// 				panic("mock out the DeleteDeposit method")
// 			},
// 			DeletePendingDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey)  {
// 				panic("mock out the DeletePendingDeposit method")
// 			},
// 			DeletePendingTransferKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey)  {
// 				panic("mock out the DeletePendingTransferKey method")
// 			},
// 			EnqueueCommandFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, cmd types.Command) error {
// 				panic("mock out the EnqueueCommand method")
// 			},
// 			GetArchivedTransferKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.TransferKey, bool) {
// 				panic("mock out the GetArchivedTransferKey method")
// 			},
// 			GetBatchByIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, id []byte) types.CommandBatch {
// 				panic("mock out the GetBatchByID method")
// 			},
// 			GetBurnerAddressAndSaltFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, tokenAddr types.Address, recipient string, gatewayAddr common.Address) (common.Address, common.Hash, error) {
// 				panic("mock out the GetBurnerAddressAndSalt method")
// 			},
// 			GetBurnerByteCodesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool) {
// 				panic("mock out the GetBurnerByteCodes method")
// 			},
// 			GetBurnerInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, address common.Address) *types.BurnerInfo {
// 				panic("mock out the GetBurnerInfo method")
// 			},
// 			GetChainIDByNetworkFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, network string) *big.Int {
// 				panic("mock out the GetChainIDByNetwork method")
// 			},
// 			GetConfirmedDepositsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.ERC20Deposit {
// 				panic("mock out the GetConfirmedDeposits method")
// 			},
// 			GetDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, txID common.Hash, burnerAddr common.Address) (types.ERC20Deposit, types.DepositState, bool) {
// 				panic("mock out the GetDeposit method")
// 			},
// 			GetERC20TokenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, asset string) types.ERC20Token {
// 				panic("mock out the GetERC20Token method")
// 			},
// 			GetGatewayAddressFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (common.Address, bool) {
// 				panic("mock out the GetGatewayAddress method")
// 			},
// 			GetGatewayByteCodesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool) {
// 				panic("mock out the GetGatewayByteCodes method")
// 			},
// 			GetHashToSignFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, rawTx *evmTypes.Transaction) common.Hash {
// 				panic("mock out the GetHashToSign method")
// 			},
// 			GetLatestCommandBatchFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) types.CommandBatch {
// 				panic("mock out the GetLatestCommandBatch method")
// 			},
// 			GetMinVoterCountFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (int64, bool) {
// 				panic("mock out the GetMinVoterCount method")
// 			},
// 			GetNameFunc: func() string {
// 				panic("mock out the GetName method")
// 			},
// 			GetNetworkFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (string, bool) {
// 				panic("mock out the GetNetwork method")
// 			},
// 			GetNetworkByIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, id *big.Int) (string, bool) {
// 				panic("mock out the GetNetworkByID method")
// 			},
// 			GetPendingDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.ERC20Deposit, bool) {
// 				panic("mock out the GetPendingDeposit method")
// 			},
// 			GetPendingTransferKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.TransferKey, bool) {
// 				panic("mock out the GetPendingTransferKey method")
// 			},
// 			GetRequiredConfirmationHeightFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (uint64, bool) {
// 				panic("mock out the GetRequiredConfirmationHeight method")
// 			},
// 			GetRevoteLockingPeriodFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (int64, bool) {
// 				panic("mock out the GetRevoteLockingPeriod method")
// 			},
// 			GetTokenByteCodesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool) {
// 				panic("mock out the GetTokenByteCodes method")
// 			},
// 			GetVotingThresholdFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (utils.Threshold, bool) {
// 				panic("mock out the GetVotingThreshold method")
// 			},
// 			LoggerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
// 				panic("mock out the Logger method")
// 			},
// 			SetBurnerInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, burnerAddr common.Address, burnerInfo *types.BurnerInfo)  {
// 				panic("mock out the SetBurnerInfo method")
// 			},
// 			SetDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, deposit types.ERC20Deposit, state types.DepositState)  {
// 				panic("mock out the SetDeposit method")
// 			},
// 			SetGatewayAddressFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, addr common.Address)  {
// 				panic("mock out the SetGatewayAddress method")
// 			},
// 			SetPendingDepositFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, deposit *types.ERC20Deposit)  {
// 				panic("mock out the SetPendingDeposit method")
// 			},
// 			SetPendingTransferKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, transferOwnership *types.TransferKey)  {
// 				panic("mock out the SetPendingTransferKey method")
// 			},
// 			SetUnsignedTxFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, txID string, tx *evmTypes.Transaction, pk ecdsa.PublicKey) error {
// 				panic("mock out the SetUnsignedTx method")
// 			},
// 		}
//
// 		// use mockedChainKeeper in code that requires types.ChainKeeper
// 		// and then make assertions.
//
// 	}
type ChainKeeperMock struct {
	// ArchiveTransferKeyFunc mocks the ArchiveTransferKey method.
	ArchiveTransferKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey)

	// AssembleTxFunc mocks the AssembleTx method.
	AssembleTxFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, txID string, sig github_com_axelarnetwork_axelar_core_x_tss_exported.Signature) (*evmTypes.Transaction, error)

	// CreateERC20TokenFunc mocks the CreateERC20Token method.
	CreateERC20TokenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, asset string, details types.TokenDetails) (types.ERC20Token, error)

	// CreateNewBatchToSignFunc mocks the CreateNewBatchToSign method.
	CreateNewBatchToSignFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, error)

	// DeleteDepositFunc mocks the DeleteDeposit method.
	DeleteDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, deposit types.ERC20Deposit)

	// DeletePendingDepositFunc mocks the DeletePendingDeposit method.
	DeletePendingDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey)

	// DeletePendingTransferKeyFunc mocks the DeletePendingTransferKey method.
	DeletePendingTransferKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey)

	// EnqueueCommandFunc mocks the EnqueueCommand method.
	EnqueueCommandFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, cmd types.Command) error

	// GetArchivedTransferKeyFunc mocks the GetArchivedTransferKey method.
	GetArchivedTransferKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.TransferKey, bool)

	// GetBatchByIDFunc mocks the GetBatchByID method.
	GetBatchByIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, id []byte) types.CommandBatch

	// GetBurnerAddressAndSaltFunc mocks the GetBurnerAddressAndSalt method.
	GetBurnerAddressAndSaltFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, tokenAddr types.Address, recipient string, gatewayAddr common.Address) (common.Address, common.Hash, error)

	// GetBurnerByteCodesFunc mocks the GetBurnerByteCodes method.
	GetBurnerByteCodesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool)

	// GetBurnerInfoFunc mocks the GetBurnerInfo method.
	GetBurnerInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, address common.Address) *types.BurnerInfo

	// GetChainIDByNetworkFunc mocks the GetChainIDByNetwork method.
	GetChainIDByNetworkFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, network string) *big.Int

	// GetConfirmedDepositsFunc mocks the GetConfirmedDeposits method.
	GetConfirmedDepositsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.ERC20Deposit

	// GetDepositFunc mocks the GetDeposit method.
	GetDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, txID common.Hash, burnerAddr common.Address) (types.ERC20Deposit, types.DepositState, bool)

	// GetERC20TokenFunc mocks the GetERC20Token method.
	GetERC20TokenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, asset string) types.ERC20Token

	// GetGatewayAddressFunc mocks the GetGatewayAddress method.
	GetGatewayAddressFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (common.Address, bool)

	// GetGatewayByteCodesFunc mocks the GetGatewayByteCodes method.
	GetGatewayByteCodesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool)

	// GetHashToSignFunc mocks the GetHashToSign method.
	GetHashToSignFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, rawTx *evmTypes.Transaction) common.Hash

	// GetLatestCommandBatchFunc mocks the GetLatestCommandBatch method.
	GetLatestCommandBatchFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) types.CommandBatch

	// GetMinVoterCountFunc mocks the GetMinVoterCount method.
	GetMinVoterCountFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (int64, bool)

	// GetNameFunc mocks the GetName method.
	GetNameFunc func() string

	// GetNetworkFunc mocks the GetNetwork method.
	GetNetworkFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (string, bool)

	// GetNetworkByIDFunc mocks the GetNetworkByID method.
	GetNetworkByIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, id *big.Int) (string, bool)

	// GetPendingDepositFunc mocks the GetPendingDeposit method.
	GetPendingDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.ERC20Deposit, bool)

	// GetPendingTransferKeyFunc mocks the GetPendingTransferKey method.
	GetPendingTransferKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.TransferKey, bool)

	// GetRequiredConfirmationHeightFunc mocks the GetRequiredConfirmationHeight method.
	GetRequiredConfirmationHeightFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (uint64, bool)

	// GetRevoteLockingPeriodFunc mocks the GetRevoteLockingPeriod method.
	GetRevoteLockingPeriodFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (int64, bool)

	// GetTokenByteCodesFunc mocks the GetTokenByteCodes method.
	GetTokenByteCodesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool)

	// GetVotingThresholdFunc mocks the GetVotingThreshold method.
	GetVotingThresholdFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (utils.Threshold, bool)

	// LoggerFunc mocks the Logger method.
	LoggerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger

	// SetBurnerInfoFunc mocks the SetBurnerInfo method.
	SetBurnerInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, burnerAddr common.Address, burnerInfo *types.BurnerInfo)

	// SetDepositFunc mocks the SetDeposit method.
	SetDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, deposit types.ERC20Deposit, state types.DepositState)

	// SetGatewayAddressFunc mocks the SetGatewayAddress method.
	SetGatewayAddressFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, addr common.Address)

	// SetPendingDepositFunc mocks the SetPendingDeposit method.
	SetPendingDepositFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, deposit *types.ERC20Deposit)

	// SetPendingTransferKeyFunc mocks the SetPendingTransferKey method.
	SetPendingTransferKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, transferOwnership *types.TransferKey)

	// SetUnsignedTxFunc mocks the SetUnsignedTx method.
	SetUnsignedTxFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, txID string, tx *evmTypes.Transaction, pk ecdsa.PublicKey) error

	// calls tracks calls to the methods.
	calls struct {
		// ArchiveTransferKey holds details about calls to the ArchiveTransferKey method.
		ArchiveTransferKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
		}
		// AssembleTx holds details about calls to the AssembleTx method.
		AssembleTx []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// TxID is the txID argument value.
			TxID string
			// Sig is the sig argument value.
			Sig github_com_axelarnetwork_axelar_core_x_tss_exported.Signature
		}
		// CreateERC20Token holds details about calls to the CreateERC20Token method.
		CreateERC20Token []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Asset is the asset argument value.
			Asset string
			// Details is the details argument value.
			Details types.TokenDetails
		}
		// CreateNewBatchToSign holds details about calls to the CreateNewBatchToSign method.
		CreateNewBatchToSign []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// DeleteDeposit holds details about calls to the DeleteDeposit method.
		DeleteDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Deposit is the deposit argument value.
			Deposit types.ERC20Deposit
		}
		// DeletePendingDeposit holds details about calls to the DeletePendingDeposit method.
		DeletePendingDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
		}
		// DeletePendingTransferKey holds details about calls to the DeletePendingTransferKey method.
		DeletePendingTransferKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
		}
		// EnqueueCommand holds details about calls to the EnqueueCommand method.
		EnqueueCommand []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Cmd is the cmd argument value.
			Cmd types.Command
		}
		// GetArchivedTransferKey holds details about calls to the GetArchivedTransferKey method.
		GetArchivedTransferKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
		}
		// GetBatchByID holds details about calls to the GetBatchByID method.
		GetBatchByID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// ID is the id argument value.
			ID []byte
		}
		// GetBurnerAddressAndSalt holds details about calls to the GetBurnerAddressAndSalt method.
		GetBurnerAddressAndSalt []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// TokenAddr is the tokenAddr argument value.
			TokenAddr types.Address
			// Recipient is the recipient argument value.
			Recipient string
			// GatewayAddr is the gatewayAddr argument value.
			GatewayAddr common.Address
		}
		// GetBurnerByteCodes holds details about calls to the GetBurnerByteCodes method.
		GetBurnerByteCodes []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetBurnerInfo holds details about calls to the GetBurnerInfo method.
		GetBurnerInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Address is the address argument value.
			Address common.Address
		}
		// GetChainIDByNetwork holds details about calls to the GetChainIDByNetwork method.
		GetChainIDByNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Network is the network argument value.
			Network string
		}
		// GetConfirmedDeposits holds details about calls to the GetConfirmedDeposits method.
		GetConfirmedDeposits []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetDeposit holds details about calls to the GetDeposit method.
		GetDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// TxID is the txID argument value.
			TxID common.Hash
			// BurnerAddr is the burnerAddr argument value.
			BurnerAddr common.Address
		}
		// GetERC20Token holds details about calls to the GetERC20Token method.
		GetERC20Token []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Asset is the asset argument value.
			Asset string
		}
		// GetGatewayAddress holds details about calls to the GetGatewayAddress method.
		GetGatewayAddress []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetGatewayByteCodes holds details about calls to the GetGatewayByteCodes method.
		GetGatewayByteCodes []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetHashToSign holds details about calls to the GetHashToSign method.
		GetHashToSign []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// RawTx is the rawTx argument value.
			RawTx *evmTypes.Transaction
		}
		// GetLatestCommandBatch holds details about calls to the GetLatestCommandBatch method.
		GetLatestCommandBatch []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetMinVoterCount holds details about calls to the GetMinVoterCount method.
		GetMinVoterCount []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetName holds details about calls to the GetName method.
		GetName []struct {
		}
		// GetNetwork holds details about calls to the GetNetwork method.
		GetNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetNetworkByID holds details about calls to the GetNetworkByID method.
		GetNetworkByID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// ID is the id argument value.
			ID *big.Int
		}
		// GetPendingDeposit holds details about calls to the GetPendingDeposit method.
		GetPendingDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
		}
		// GetPendingTransferKey holds details about calls to the GetPendingTransferKey method.
		GetPendingTransferKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
		}
		// GetRequiredConfirmationHeight holds details about calls to the GetRequiredConfirmationHeight method.
		GetRequiredConfirmationHeight []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetRevoteLockingPeriod holds details about calls to the GetRevoteLockingPeriod method.
		GetRevoteLockingPeriod []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetTokenByteCodes holds details about calls to the GetTokenByteCodes method.
		GetTokenByteCodes []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetVotingThreshold holds details about calls to the GetVotingThreshold method.
		GetVotingThreshold []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// Logger holds details about calls to the Logger method.
		Logger []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// SetBurnerInfo holds details about calls to the SetBurnerInfo method.
		SetBurnerInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// BurnerAddr is the burnerAddr argument value.
			BurnerAddr common.Address
			// BurnerInfo is the burnerInfo argument value.
			BurnerInfo *types.BurnerInfo
		}
		// SetDeposit holds details about calls to the SetDeposit method.
		SetDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Deposit is the deposit argument value.
			Deposit types.ERC20Deposit
			// State is the state argument value.
			State types.DepositState
		}
		// SetGatewayAddress holds details about calls to the SetGatewayAddress method.
		SetGatewayAddress []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Addr is the addr argument value.
			Addr common.Address
		}
		// SetPendingDeposit holds details about calls to the SetPendingDeposit method.
		SetPendingDeposit []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
			// Deposit is the deposit argument value.
			Deposit *types.ERC20Deposit
		}
		// SetPendingTransferKey holds details about calls to the SetPendingTransferKey method.
		SetPendingTransferKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key vote.PollKey
			// TransferOwnership is the transferOwnership argument value.
			TransferOwnership *types.TransferKey
		}
		// SetUnsignedTx holds details about calls to the SetUnsignedTx method.
		SetUnsignedTx []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// TxID is the txID argument value.
			TxID string
			// Tx is the tx argument value.
			Tx *evmTypes.Transaction
			// Pk is the pk argument value.
			Pk ecdsa.PublicKey
		}
	}
	lockArchiveTransferKey            sync.RWMutex
	lockAssembleTx                    sync.RWMutex
	lockCreateERC20Token              sync.RWMutex
	lockCreateNewBatchToSign          sync.RWMutex
	lockDeleteDeposit                 sync.RWMutex
	lockDeletePendingDeposit          sync.RWMutex
	lockDeletePendingTransferKey      sync.RWMutex
	lockEnqueueCommand                sync.RWMutex
	lockGetArchivedTransferKey        sync.RWMutex
	lockGetBatchByID                  sync.RWMutex
	lockGetBurnerAddressAndSalt       sync.RWMutex
	lockGetBurnerByteCodes            sync.RWMutex
	lockGetBurnerInfo                 sync.RWMutex
	lockGetChainIDByNetwork           sync.RWMutex
	lockGetConfirmedDeposits          sync.RWMutex
	lockGetDeposit                    sync.RWMutex
	lockGetERC20Token                 sync.RWMutex
	lockGetGatewayAddress             sync.RWMutex
	lockGetGatewayByteCodes           sync.RWMutex
	lockGetHashToSign                 sync.RWMutex
	lockGetLatestCommandBatch         sync.RWMutex
	lockGetMinVoterCount              sync.RWMutex
	lockGetName                       sync.RWMutex
	lockGetNetwork                    sync.RWMutex
	lockGetNetworkByID                sync.RWMutex
	lockGetPendingDeposit             sync.RWMutex
	lockGetPendingTransferKey         sync.RWMutex
	lockGetRequiredConfirmationHeight sync.RWMutex
	lockGetRevoteLockingPeriod        sync.RWMutex
	lockGetTokenByteCodes             sync.RWMutex
	lockGetVotingThreshold            sync.RWMutex
	lockLogger                        sync.RWMutex
	lockSetBurnerInfo                 sync.RWMutex
	lockSetDeposit                    sync.RWMutex
	lockSetGatewayAddress             sync.RWMutex
	lockSetPendingDeposit             sync.RWMutex
	lockSetPendingTransferKey         sync.RWMutex
	lockSetUnsignedTx                 sync.RWMutex
}

// ArchiveTransferKey calls ArchiveTransferKeyFunc.
func (mock *ChainKeeperMock) ArchiveTransferKey(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) {
	if mock.ArchiveTransferKeyFunc == nil {
		panic("ChainKeeperMock.ArchiveTransferKeyFunc: method is nil but ChainKeeper.ArchiveTransferKey was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockArchiveTransferKey.Lock()
	mock.calls.ArchiveTransferKey = append(mock.calls.ArchiveTransferKey, callInfo)
	mock.lockArchiveTransferKey.Unlock()
	mock.ArchiveTransferKeyFunc(ctx, key)
}

// ArchiveTransferKeyCalls gets all the calls that were made to ArchiveTransferKey.
// Check the length with:
//     len(mockedChainKeeper.ArchiveTransferKeyCalls())
func (mock *ChainKeeperMock) ArchiveTransferKeyCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Key vote.PollKey
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}
	mock.lockArchiveTransferKey.RLock()
	calls = mock.calls.ArchiveTransferKey
	mock.lockArchiveTransferKey.RUnlock()
	return calls
}

// AssembleTx calls AssembleTxFunc.
func (mock *ChainKeeperMock) AssembleTx(ctx github_com_cosmos_cosmos_sdk_types.Context, txID string, sig github_com_axelarnetwork_axelar_core_x_tss_exported.Signature) (*evmTypes.Transaction, error) {
	if mock.AssembleTxFunc == nil {
		panic("ChainKeeperMock.AssembleTxFunc: method is nil but ChainKeeper.AssembleTx was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		TxID string
		Sig  github_com_axelarnetwork_axelar_core_x_tss_exported.Signature
	}{
		Ctx:  ctx,
		TxID: txID,
		Sig:  sig,
	}
	mock.lockAssembleTx.Lock()
	mock.calls.AssembleTx = append(mock.calls.AssembleTx, callInfo)
	mock.lockAssembleTx.Unlock()
	return mock.AssembleTxFunc(ctx, txID, sig)
}

// AssembleTxCalls gets all the calls that were made to AssembleTx.
// Check the length with:
//     len(mockedChainKeeper.AssembleTxCalls())
func (mock *ChainKeeperMock) AssembleTxCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	TxID string
	Sig  github_com_axelarnetwork_axelar_core_x_tss_exported.Signature
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		TxID string
		Sig  github_com_axelarnetwork_axelar_core_x_tss_exported.Signature
	}
	mock.lockAssembleTx.RLock()
	calls = mock.calls.AssembleTx
	mock.lockAssembleTx.RUnlock()
	return calls
}

// CreateERC20Token calls CreateERC20TokenFunc.
func (mock *ChainKeeperMock) CreateERC20Token(ctx github_com_cosmos_cosmos_sdk_types.Context, asset string, details types.TokenDetails) (types.ERC20Token, error) {
	if mock.CreateERC20TokenFunc == nil {
		panic("ChainKeeperMock.CreateERC20TokenFunc: method is nil but ChainKeeper.CreateERC20Token was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Asset   string
		Details types.TokenDetails
	}{
		Ctx:     ctx,
		Asset:   asset,
		Details: details,
	}
	mock.lockCreateERC20Token.Lock()
	mock.calls.CreateERC20Token = append(mock.calls.CreateERC20Token, callInfo)
	mock.lockCreateERC20Token.Unlock()
	return mock.CreateERC20TokenFunc(ctx, asset, details)
}

// CreateERC20TokenCalls gets all the calls that were made to CreateERC20Token.
// Check the length with:
//     len(mockedChainKeeper.CreateERC20TokenCalls())
func (mock *ChainKeeperMock) CreateERC20TokenCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Asset   string
	Details types.TokenDetails
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Asset   string
		Details types.TokenDetails
	}
	mock.lockCreateERC20Token.RLock()
	calls = mock.calls.CreateERC20Token
	mock.lockCreateERC20Token.RUnlock()
	return calls
}

// CreateNewBatchToSign calls CreateNewBatchToSignFunc.
func (mock *ChainKeeperMock) CreateNewBatchToSign(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, error) {
	if mock.CreateNewBatchToSignFunc == nil {
		panic("ChainKeeperMock.CreateNewBatchToSignFunc: method is nil but ChainKeeper.CreateNewBatchToSign was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateNewBatchToSign.Lock()
	mock.calls.CreateNewBatchToSign = append(mock.calls.CreateNewBatchToSign, callInfo)
	mock.lockCreateNewBatchToSign.Unlock()
	return mock.CreateNewBatchToSignFunc(ctx)
}

// CreateNewBatchToSignCalls gets all the calls that were made to CreateNewBatchToSign.
// Check the length with:
//     len(mockedChainKeeper.CreateNewBatchToSignCalls())
func (mock *ChainKeeperMock) CreateNewBatchToSignCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockCreateNewBatchToSign.RLock()
	calls = mock.calls.CreateNewBatchToSign
	mock.lockCreateNewBatchToSign.RUnlock()
	return calls
}

// DeleteDeposit calls DeleteDepositFunc.
func (mock *ChainKeeperMock) DeleteDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, deposit types.ERC20Deposit) {
	if mock.DeleteDepositFunc == nil {
		panic("ChainKeeperMock.DeleteDepositFunc: method is nil but ChainKeeper.DeleteDeposit was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Deposit types.ERC20Deposit
	}{
		Ctx:     ctx,
		Deposit: deposit,
	}
	mock.lockDeleteDeposit.Lock()
	mock.calls.DeleteDeposit = append(mock.calls.DeleteDeposit, callInfo)
	mock.lockDeleteDeposit.Unlock()
	mock.DeleteDepositFunc(ctx, deposit)
}

// DeleteDepositCalls gets all the calls that were made to DeleteDeposit.
// Check the length with:
//     len(mockedChainKeeper.DeleteDepositCalls())
func (mock *ChainKeeperMock) DeleteDepositCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Deposit types.ERC20Deposit
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Deposit types.ERC20Deposit
	}
	mock.lockDeleteDeposit.RLock()
	calls = mock.calls.DeleteDeposit
	mock.lockDeleteDeposit.RUnlock()
	return calls
}

// DeletePendingDeposit calls DeletePendingDepositFunc.
func (mock *ChainKeeperMock) DeletePendingDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) {
	if mock.DeletePendingDepositFunc == nil {
		panic("ChainKeeperMock.DeletePendingDepositFunc: method is nil but ChainKeeper.DeletePendingDeposit was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePendingDeposit.Lock()
	mock.calls.DeletePendingDeposit = append(mock.calls.DeletePendingDeposit, callInfo)
	mock.lockDeletePendingDeposit.Unlock()
	mock.DeletePendingDepositFunc(ctx, key)
}

// DeletePendingDepositCalls gets all the calls that were made to DeletePendingDeposit.
// Check the length with:
//     len(mockedChainKeeper.DeletePendingDepositCalls())
func (mock *ChainKeeperMock) DeletePendingDepositCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Key vote.PollKey
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}
	mock.lockDeletePendingDeposit.RLock()
	calls = mock.calls.DeletePendingDeposit
	mock.lockDeletePendingDeposit.RUnlock()
	return calls
}

// DeletePendingTransferKey calls DeletePendingTransferKeyFunc.
func (mock *ChainKeeperMock) DeletePendingTransferKey(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) {
	if mock.DeletePendingTransferKeyFunc == nil {
		panic("ChainKeeperMock.DeletePendingTransferKeyFunc: method is nil but ChainKeeper.DeletePendingTransferKey was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePendingTransferKey.Lock()
	mock.calls.DeletePendingTransferKey = append(mock.calls.DeletePendingTransferKey, callInfo)
	mock.lockDeletePendingTransferKey.Unlock()
	mock.DeletePendingTransferKeyFunc(ctx, key)
}

// DeletePendingTransferKeyCalls gets all the calls that were made to DeletePendingTransferKey.
// Check the length with:
//     len(mockedChainKeeper.DeletePendingTransferKeyCalls())
func (mock *ChainKeeperMock) DeletePendingTransferKeyCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Key vote.PollKey
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}
	mock.lockDeletePendingTransferKey.RLock()
	calls = mock.calls.DeletePendingTransferKey
	mock.lockDeletePendingTransferKey.RUnlock()
	return calls
}

// EnqueueCommand calls EnqueueCommandFunc.
func (mock *ChainKeeperMock) EnqueueCommand(ctx github_com_cosmos_cosmos_sdk_types.Context, cmd types.Command) error {
	if mock.EnqueueCommandFunc == nil {
		panic("ChainKeeperMock.EnqueueCommandFunc: method is nil but ChainKeeper.EnqueueCommand was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Cmd types.Command
	}{
		Ctx: ctx,
		Cmd: cmd,
	}
	mock.lockEnqueueCommand.Lock()
	mock.calls.EnqueueCommand = append(mock.calls.EnqueueCommand, callInfo)
	mock.lockEnqueueCommand.Unlock()
	return mock.EnqueueCommandFunc(ctx, cmd)
}

// EnqueueCommandCalls gets all the calls that were made to EnqueueCommand.
// Check the length with:
//     len(mockedChainKeeper.EnqueueCommandCalls())
func (mock *ChainKeeperMock) EnqueueCommandCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Cmd types.Command
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Cmd types.Command
	}
	mock.lockEnqueueCommand.RLock()
	calls = mock.calls.EnqueueCommand
	mock.lockEnqueueCommand.RUnlock()
	return calls
}

// GetArchivedTransferKey calls GetArchivedTransferKeyFunc.
func (mock *ChainKeeperMock) GetArchivedTransferKey(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.TransferKey, bool) {
	if mock.GetArchivedTransferKeyFunc == nil {
		panic("ChainKeeperMock.GetArchivedTransferKeyFunc: method is nil but ChainKeeper.GetArchivedTransferKey was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetArchivedTransferKey.Lock()
	mock.calls.GetArchivedTransferKey = append(mock.calls.GetArchivedTransferKey, callInfo)
	mock.lockGetArchivedTransferKey.Unlock()
	return mock.GetArchivedTransferKeyFunc(ctx, key)
}

// GetArchivedTransferKeyCalls gets all the calls that were made to GetArchivedTransferKey.
// Check the length with:
//     len(mockedChainKeeper.GetArchivedTransferKeyCalls())
func (mock *ChainKeeperMock) GetArchivedTransferKeyCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Key vote.PollKey
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}
	mock.lockGetArchivedTransferKey.RLock()
	calls = mock.calls.GetArchivedTransferKey
	mock.lockGetArchivedTransferKey.RUnlock()
	return calls
}

// GetBatchByID calls GetBatchByIDFunc.
func (mock *ChainKeeperMock) GetBatchByID(ctx github_com_cosmos_cosmos_sdk_types.Context, id []byte) types.CommandBatch {
	if mock.GetBatchByIDFunc == nil {
		panic("ChainKeeperMock.GetBatchByIDFunc: method is nil but ChainKeeper.GetBatchByID was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		ID  []byte
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetBatchByID.Lock()
	mock.calls.GetBatchByID = append(mock.calls.GetBatchByID, callInfo)
	mock.lockGetBatchByID.Unlock()
	return mock.GetBatchByIDFunc(ctx, id)
}

// GetBatchByIDCalls gets all the calls that were made to GetBatchByID.
// Check the length with:
//     len(mockedChainKeeper.GetBatchByIDCalls())
func (mock *ChainKeeperMock) GetBatchByIDCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	ID  []byte
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		ID  []byte
	}
	mock.lockGetBatchByID.RLock()
	calls = mock.calls.GetBatchByID
	mock.lockGetBatchByID.RUnlock()
	return calls
}

// GetBurnerAddressAndSalt calls GetBurnerAddressAndSaltFunc.
func (mock *ChainKeeperMock) GetBurnerAddressAndSalt(ctx github_com_cosmos_cosmos_sdk_types.Context, tokenAddr types.Address, recipient string, gatewayAddr common.Address) (common.Address, common.Hash, error) {
	if mock.GetBurnerAddressAndSaltFunc == nil {
		panic("ChainKeeperMock.GetBurnerAddressAndSaltFunc: method is nil but ChainKeeper.GetBurnerAddressAndSalt was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		TokenAddr   types.Address
		Recipient   string
		GatewayAddr common.Address
	}{
		Ctx:         ctx,
		TokenAddr:   tokenAddr,
		Recipient:   recipient,
		GatewayAddr: gatewayAddr,
	}
	mock.lockGetBurnerAddressAndSalt.Lock()
	mock.calls.GetBurnerAddressAndSalt = append(mock.calls.GetBurnerAddressAndSalt, callInfo)
	mock.lockGetBurnerAddressAndSalt.Unlock()
	return mock.GetBurnerAddressAndSaltFunc(ctx, tokenAddr, recipient, gatewayAddr)
}

// GetBurnerAddressAndSaltCalls gets all the calls that were made to GetBurnerAddressAndSalt.
// Check the length with:
//     len(mockedChainKeeper.GetBurnerAddressAndSaltCalls())
func (mock *ChainKeeperMock) GetBurnerAddressAndSaltCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	TokenAddr   types.Address
	Recipient   string
	GatewayAddr common.Address
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		TokenAddr   types.Address
		Recipient   string
		GatewayAddr common.Address
	}
	mock.lockGetBurnerAddressAndSalt.RLock()
	calls = mock.calls.GetBurnerAddressAndSalt
	mock.lockGetBurnerAddressAndSalt.RUnlock()
	return calls
}

// GetBurnerByteCodes calls GetBurnerByteCodesFunc.
func (mock *ChainKeeperMock) GetBurnerByteCodes(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool) {
	if mock.GetBurnerByteCodesFunc == nil {
		panic("ChainKeeperMock.GetBurnerByteCodesFunc: method is nil but ChainKeeper.GetBurnerByteCodes was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetBurnerByteCodes.Lock()
	mock.calls.GetBurnerByteCodes = append(mock.calls.GetBurnerByteCodes, callInfo)
	mock.lockGetBurnerByteCodes.Unlock()
	return mock.GetBurnerByteCodesFunc(ctx)
}

// GetBurnerByteCodesCalls gets all the calls that were made to GetBurnerByteCodes.
// Check the length with:
//     len(mockedChainKeeper.GetBurnerByteCodesCalls())
func (mock *ChainKeeperMock) GetBurnerByteCodesCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetBurnerByteCodes.RLock()
	calls = mock.calls.GetBurnerByteCodes
	mock.lockGetBurnerByteCodes.RUnlock()
	return calls
}

// GetBurnerInfo calls GetBurnerInfoFunc.
func (mock *ChainKeeperMock) GetBurnerInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, address common.Address) *types.BurnerInfo {
	if mock.GetBurnerInfoFunc == nil {
		panic("ChainKeeperMock.GetBurnerInfoFunc: method is nil but ChainKeeper.GetBurnerInfo was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Address common.Address
	}{
		Ctx:     ctx,
		Address: address,
	}
	mock.lockGetBurnerInfo.Lock()
	mock.calls.GetBurnerInfo = append(mock.calls.GetBurnerInfo, callInfo)
	mock.lockGetBurnerInfo.Unlock()
	return mock.GetBurnerInfoFunc(ctx, address)
}

// GetBurnerInfoCalls gets all the calls that were made to GetBurnerInfo.
// Check the length with:
//     len(mockedChainKeeper.GetBurnerInfoCalls())
func (mock *ChainKeeperMock) GetBurnerInfoCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Address common.Address
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Address common.Address
	}
	mock.lockGetBurnerInfo.RLock()
	calls = mock.calls.GetBurnerInfo
	mock.lockGetBurnerInfo.RUnlock()
	return calls
}

// GetChainIDByNetwork calls GetChainIDByNetworkFunc.
func (mock *ChainKeeperMock) GetChainIDByNetwork(ctx github_com_cosmos_cosmos_sdk_types.Context, network string) *big.Int {
	if mock.GetChainIDByNetworkFunc == nil {
		panic("ChainKeeperMock.GetChainIDByNetworkFunc: method is nil but ChainKeeper.GetChainIDByNetwork was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Network string
	}{
		Ctx:     ctx,
		Network: network,
	}
	mock.lockGetChainIDByNetwork.Lock()
	mock.calls.GetChainIDByNetwork = append(mock.calls.GetChainIDByNetwork, callInfo)
	mock.lockGetChainIDByNetwork.Unlock()
	return mock.GetChainIDByNetworkFunc(ctx, network)
}

// GetChainIDByNetworkCalls gets all the calls that were made to GetChainIDByNetwork.
// Check the length with:
//     len(mockedChainKeeper.GetChainIDByNetworkCalls())
func (mock *ChainKeeperMock) GetChainIDByNetworkCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Network string
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Network string
	}
	mock.lockGetChainIDByNetwork.RLock()
	calls = mock.calls.GetChainIDByNetwork
	mock.lockGetChainIDByNetwork.RUnlock()
	return calls
}

// GetConfirmedDeposits calls GetConfirmedDepositsFunc.
func (mock *ChainKeeperMock) GetConfirmedDeposits(ctx github_com_cosmos_cosmos_sdk_types.Context) []types.ERC20Deposit {
	if mock.GetConfirmedDepositsFunc == nil {
		panic("ChainKeeperMock.GetConfirmedDepositsFunc: method is nil but ChainKeeper.GetConfirmedDeposits was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetConfirmedDeposits.Lock()
	mock.calls.GetConfirmedDeposits = append(mock.calls.GetConfirmedDeposits, callInfo)
	mock.lockGetConfirmedDeposits.Unlock()
	return mock.GetConfirmedDepositsFunc(ctx)
}

// GetConfirmedDepositsCalls gets all the calls that were made to GetConfirmedDeposits.
// Check the length with:
//     len(mockedChainKeeper.GetConfirmedDepositsCalls())
func (mock *ChainKeeperMock) GetConfirmedDepositsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetConfirmedDeposits.RLock()
	calls = mock.calls.GetConfirmedDeposits
	mock.lockGetConfirmedDeposits.RUnlock()
	return calls
}

// GetDeposit calls GetDepositFunc.
func (mock *ChainKeeperMock) GetDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, txID common.Hash, burnerAddr common.Address) (types.ERC20Deposit, types.DepositState, bool) {
	if mock.GetDepositFunc == nil {
		panic("ChainKeeperMock.GetDepositFunc: method is nil but ChainKeeper.GetDeposit was just called")
	}
	callInfo := struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		TxID       common.Hash
		BurnerAddr common.Address
	}{
		Ctx:        ctx,
		TxID:       txID,
		BurnerAddr: burnerAddr,
	}
	mock.lockGetDeposit.Lock()
	mock.calls.GetDeposit = append(mock.calls.GetDeposit, callInfo)
	mock.lockGetDeposit.Unlock()
	return mock.GetDepositFunc(ctx, txID, burnerAddr)
}

// GetDepositCalls gets all the calls that were made to GetDeposit.
// Check the length with:
//     len(mockedChainKeeper.GetDepositCalls())
func (mock *ChainKeeperMock) GetDepositCalls() []struct {
	Ctx        github_com_cosmos_cosmos_sdk_types.Context
	TxID       common.Hash
	BurnerAddr common.Address
} {
	var calls []struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		TxID       common.Hash
		BurnerAddr common.Address
	}
	mock.lockGetDeposit.RLock()
	calls = mock.calls.GetDeposit
	mock.lockGetDeposit.RUnlock()
	return calls
}

// GetERC20Token calls GetERC20TokenFunc.
func (mock *ChainKeeperMock) GetERC20Token(ctx github_com_cosmos_cosmos_sdk_types.Context, asset string) types.ERC20Token {
	if mock.GetERC20TokenFunc == nil {
		panic("ChainKeeperMock.GetERC20TokenFunc: method is nil but ChainKeeper.GetERC20Token was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Asset string
	}{
		Ctx:   ctx,
		Asset: asset,
	}
	mock.lockGetERC20Token.Lock()
	mock.calls.GetERC20Token = append(mock.calls.GetERC20Token, callInfo)
	mock.lockGetERC20Token.Unlock()
	return mock.GetERC20TokenFunc(ctx, asset)
}

// GetERC20TokenCalls gets all the calls that were made to GetERC20Token.
// Check the length with:
//     len(mockedChainKeeper.GetERC20TokenCalls())
func (mock *ChainKeeperMock) GetERC20TokenCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Asset string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Asset string
	}
	mock.lockGetERC20Token.RLock()
	calls = mock.calls.GetERC20Token
	mock.lockGetERC20Token.RUnlock()
	return calls
}

// GetGatewayAddress calls GetGatewayAddressFunc.
func (mock *ChainKeeperMock) GetGatewayAddress(ctx github_com_cosmos_cosmos_sdk_types.Context) (common.Address, bool) {
	if mock.GetGatewayAddressFunc == nil {
		panic("ChainKeeperMock.GetGatewayAddressFunc: method is nil but ChainKeeper.GetGatewayAddress was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetGatewayAddress.Lock()
	mock.calls.GetGatewayAddress = append(mock.calls.GetGatewayAddress, callInfo)
	mock.lockGetGatewayAddress.Unlock()
	return mock.GetGatewayAddressFunc(ctx)
}

// GetGatewayAddressCalls gets all the calls that were made to GetGatewayAddress.
// Check the length with:
//     len(mockedChainKeeper.GetGatewayAddressCalls())
func (mock *ChainKeeperMock) GetGatewayAddressCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetGatewayAddress.RLock()
	calls = mock.calls.GetGatewayAddress
	mock.lockGetGatewayAddress.RUnlock()
	return calls
}

// GetGatewayByteCodes calls GetGatewayByteCodesFunc.
func (mock *ChainKeeperMock) GetGatewayByteCodes(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool) {
	if mock.GetGatewayByteCodesFunc == nil {
		panic("ChainKeeperMock.GetGatewayByteCodesFunc: method is nil but ChainKeeper.GetGatewayByteCodes was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetGatewayByteCodes.Lock()
	mock.calls.GetGatewayByteCodes = append(mock.calls.GetGatewayByteCodes, callInfo)
	mock.lockGetGatewayByteCodes.Unlock()
	return mock.GetGatewayByteCodesFunc(ctx)
}

// GetGatewayByteCodesCalls gets all the calls that were made to GetGatewayByteCodes.
// Check the length with:
//     len(mockedChainKeeper.GetGatewayByteCodesCalls())
func (mock *ChainKeeperMock) GetGatewayByteCodesCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetGatewayByteCodes.RLock()
	calls = mock.calls.GetGatewayByteCodes
	mock.lockGetGatewayByteCodes.RUnlock()
	return calls
}

// GetHashToSign calls GetHashToSignFunc.
func (mock *ChainKeeperMock) GetHashToSign(ctx github_com_cosmos_cosmos_sdk_types.Context, rawTx *evmTypes.Transaction) common.Hash {
	if mock.GetHashToSignFunc == nil {
		panic("ChainKeeperMock.GetHashToSignFunc: method is nil but ChainKeeper.GetHashToSign was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		RawTx *evmTypes.Transaction
	}{
		Ctx:   ctx,
		RawTx: rawTx,
	}
	mock.lockGetHashToSign.Lock()
	mock.calls.GetHashToSign = append(mock.calls.GetHashToSign, callInfo)
	mock.lockGetHashToSign.Unlock()
	return mock.GetHashToSignFunc(ctx, rawTx)
}

// GetHashToSignCalls gets all the calls that were made to GetHashToSign.
// Check the length with:
//     len(mockedChainKeeper.GetHashToSignCalls())
func (mock *ChainKeeperMock) GetHashToSignCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	RawTx *evmTypes.Transaction
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		RawTx *evmTypes.Transaction
	}
	mock.lockGetHashToSign.RLock()
	calls = mock.calls.GetHashToSign
	mock.lockGetHashToSign.RUnlock()
	return calls
}

// GetLatestCommandBatch calls GetLatestCommandBatchFunc.
func (mock *ChainKeeperMock) GetLatestCommandBatch(ctx github_com_cosmos_cosmos_sdk_types.Context) types.CommandBatch {
	if mock.GetLatestCommandBatchFunc == nil {
		panic("ChainKeeperMock.GetLatestCommandBatchFunc: method is nil but ChainKeeper.GetLatestCommandBatch was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestCommandBatch.Lock()
	mock.calls.GetLatestCommandBatch = append(mock.calls.GetLatestCommandBatch, callInfo)
	mock.lockGetLatestCommandBatch.Unlock()
	return mock.GetLatestCommandBatchFunc(ctx)
}

// GetLatestCommandBatchCalls gets all the calls that were made to GetLatestCommandBatch.
// Check the length with:
//     len(mockedChainKeeper.GetLatestCommandBatchCalls())
func (mock *ChainKeeperMock) GetLatestCommandBatchCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetLatestCommandBatch.RLock()
	calls = mock.calls.GetLatestCommandBatch
	mock.lockGetLatestCommandBatch.RUnlock()
	return calls
}

// GetMinVoterCount calls GetMinVoterCountFunc.
func (mock *ChainKeeperMock) GetMinVoterCount(ctx github_com_cosmos_cosmos_sdk_types.Context) (int64, bool) {
	if mock.GetMinVoterCountFunc == nil {
		panic("ChainKeeperMock.GetMinVoterCountFunc: method is nil but ChainKeeper.GetMinVoterCount was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMinVoterCount.Lock()
	mock.calls.GetMinVoterCount = append(mock.calls.GetMinVoterCount, callInfo)
	mock.lockGetMinVoterCount.Unlock()
	return mock.GetMinVoterCountFunc(ctx)
}

// GetMinVoterCountCalls gets all the calls that were made to GetMinVoterCount.
// Check the length with:
//     len(mockedChainKeeper.GetMinVoterCountCalls())
func (mock *ChainKeeperMock) GetMinVoterCountCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetMinVoterCount.RLock()
	calls = mock.calls.GetMinVoterCount
	mock.lockGetMinVoterCount.RUnlock()
	return calls
}

// GetName calls GetNameFunc.
func (mock *ChainKeeperMock) GetName() string {
	if mock.GetNameFunc == nil {
		panic("ChainKeeperMock.GetNameFunc: method is nil but ChainKeeper.GetName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetName.Lock()
	mock.calls.GetName = append(mock.calls.GetName, callInfo)
	mock.lockGetName.Unlock()
	return mock.GetNameFunc()
}

// GetNameCalls gets all the calls that were made to GetName.
// Check the length with:
//     len(mockedChainKeeper.GetNameCalls())
func (mock *ChainKeeperMock) GetNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetName.RLock()
	calls = mock.calls.GetName
	mock.lockGetName.RUnlock()
	return calls
}

// GetNetwork calls GetNetworkFunc.
func (mock *ChainKeeperMock) GetNetwork(ctx github_com_cosmos_cosmos_sdk_types.Context) (string, bool) {
	if mock.GetNetworkFunc == nil {
		panic("ChainKeeperMock.GetNetworkFunc: method is nil but ChainKeeper.GetNetwork was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetNetwork.Lock()
	mock.calls.GetNetwork = append(mock.calls.GetNetwork, callInfo)
	mock.lockGetNetwork.Unlock()
	return mock.GetNetworkFunc(ctx)
}

// GetNetworkCalls gets all the calls that were made to GetNetwork.
// Check the length with:
//     len(mockedChainKeeper.GetNetworkCalls())
func (mock *ChainKeeperMock) GetNetworkCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetNetwork.RLock()
	calls = mock.calls.GetNetwork
	mock.lockGetNetwork.RUnlock()
	return calls
}

// GetNetworkByID calls GetNetworkByIDFunc.
func (mock *ChainKeeperMock) GetNetworkByID(ctx github_com_cosmos_cosmos_sdk_types.Context, id *big.Int) (string, bool) {
	if mock.GetNetworkByIDFunc == nil {
		panic("ChainKeeperMock.GetNetworkByIDFunc: method is nil but ChainKeeper.GetNetworkByID was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		ID  *big.Int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetNetworkByID.Lock()
	mock.calls.GetNetworkByID = append(mock.calls.GetNetworkByID, callInfo)
	mock.lockGetNetworkByID.Unlock()
	return mock.GetNetworkByIDFunc(ctx, id)
}

// GetNetworkByIDCalls gets all the calls that were made to GetNetworkByID.
// Check the length with:
//     len(mockedChainKeeper.GetNetworkByIDCalls())
func (mock *ChainKeeperMock) GetNetworkByIDCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	ID  *big.Int
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		ID  *big.Int
	}
	mock.lockGetNetworkByID.RLock()
	calls = mock.calls.GetNetworkByID
	mock.lockGetNetworkByID.RUnlock()
	return calls
}

// GetPendingDeposit calls GetPendingDepositFunc.
func (mock *ChainKeeperMock) GetPendingDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.ERC20Deposit, bool) {
	if mock.GetPendingDepositFunc == nil {
		panic("ChainKeeperMock.GetPendingDepositFunc: method is nil but ChainKeeper.GetPendingDeposit was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetPendingDeposit.Lock()
	mock.calls.GetPendingDeposit = append(mock.calls.GetPendingDeposit, callInfo)
	mock.lockGetPendingDeposit.Unlock()
	return mock.GetPendingDepositFunc(ctx, key)
}

// GetPendingDepositCalls gets all the calls that were made to GetPendingDeposit.
// Check the length with:
//     len(mockedChainKeeper.GetPendingDepositCalls())
func (mock *ChainKeeperMock) GetPendingDepositCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Key vote.PollKey
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}
	mock.lockGetPendingDeposit.RLock()
	calls = mock.calls.GetPendingDeposit
	mock.lockGetPendingDeposit.RUnlock()
	return calls
}

// GetPendingTransferKey calls GetPendingTransferKeyFunc.
func (mock *ChainKeeperMock) GetPendingTransferKey(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey) (types.TransferKey, bool) {
	if mock.GetPendingTransferKeyFunc == nil {
		panic("ChainKeeperMock.GetPendingTransferKeyFunc: method is nil but ChainKeeper.GetPendingTransferKey was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetPendingTransferKey.Lock()
	mock.calls.GetPendingTransferKey = append(mock.calls.GetPendingTransferKey, callInfo)
	mock.lockGetPendingTransferKey.Unlock()
	return mock.GetPendingTransferKeyFunc(ctx, key)
}

// GetPendingTransferKeyCalls gets all the calls that were made to GetPendingTransferKey.
// Check the length with:
//     len(mockedChainKeeper.GetPendingTransferKeyCalls())
func (mock *ChainKeeperMock) GetPendingTransferKeyCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Key vote.PollKey
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Key vote.PollKey
	}
	mock.lockGetPendingTransferKey.RLock()
	calls = mock.calls.GetPendingTransferKey
	mock.lockGetPendingTransferKey.RUnlock()
	return calls
}

// GetRequiredConfirmationHeight calls GetRequiredConfirmationHeightFunc.
func (mock *ChainKeeperMock) GetRequiredConfirmationHeight(ctx github_com_cosmos_cosmos_sdk_types.Context) (uint64, bool) {
	if mock.GetRequiredConfirmationHeightFunc == nil {
		panic("ChainKeeperMock.GetRequiredConfirmationHeightFunc: method is nil but ChainKeeper.GetRequiredConfirmationHeight was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRequiredConfirmationHeight.Lock()
	mock.calls.GetRequiredConfirmationHeight = append(mock.calls.GetRequiredConfirmationHeight, callInfo)
	mock.lockGetRequiredConfirmationHeight.Unlock()
	return mock.GetRequiredConfirmationHeightFunc(ctx)
}

// GetRequiredConfirmationHeightCalls gets all the calls that were made to GetRequiredConfirmationHeight.
// Check the length with:
//     len(mockedChainKeeper.GetRequiredConfirmationHeightCalls())
func (mock *ChainKeeperMock) GetRequiredConfirmationHeightCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetRequiredConfirmationHeight.RLock()
	calls = mock.calls.GetRequiredConfirmationHeight
	mock.lockGetRequiredConfirmationHeight.RUnlock()
	return calls
}

// GetRevoteLockingPeriod calls GetRevoteLockingPeriodFunc.
func (mock *ChainKeeperMock) GetRevoteLockingPeriod(ctx github_com_cosmos_cosmos_sdk_types.Context) (int64, bool) {
	if mock.GetRevoteLockingPeriodFunc == nil {
		panic("ChainKeeperMock.GetRevoteLockingPeriodFunc: method is nil but ChainKeeper.GetRevoteLockingPeriod was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRevoteLockingPeriod.Lock()
	mock.calls.GetRevoteLockingPeriod = append(mock.calls.GetRevoteLockingPeriod, callInfo)
	mock.lockGetRevoteLockingPeriod.Unlock()
	return mock.GetRevoteLockingPeriodFunc(ctx)
}

// GetRevoteLockingPeriodCalls gets all the calls that were made to GetRevoteLockingPeriod.
// Check the length with:
//     len(mockedChainKeeper.GetRevoteLockingPeriodCalls())
func (mock *ChainKeeperMock) GetRevoteLockingPeriodCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetRevoteLockingPeriod.RLock()
	calls = mock.calls.GetRevoteLockingPeriod
	mock.lockGetRevoteLockingPeriod.RUnlock()
	return calls
}

// GetTokenByteCodes calls GetTokenByteCodesFunc.
func (mock *ChainKeeperMock) GetTokenByteCodes(ctx github_com_cosmos_cosmos_sdk_types.Context) ([]byte, bool) {
	if mock.GetTokenByteCodesFunc == nil {
		panic("ChainKeeperMock.GetTokenByteCodesFunc: method is nil but ChainKeeper.GetTokenByteCodes was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTokenByteCodes.Lock()
	mock.calls.GetTokenByteCodes = append(mock.calls.GetTokenByteCodes, callInfo)
	mock.lockGetTokenByteCodes.Unlock()
	return mock.GetTokenByteCodesFunc(ctx)
}

// GetTokenByteCodesCalls gets all the calls that were made to GetTokenByteCodes.
// Check the length with:
//     len(mockedChainKeeper.GetTokenByteCodesCalls())
func (mock *ChainKeeperMock) GetTokenByteCodesCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetTokenByteCodes.RLock()
	calls = mock.calls.GetTokenByteCodes
	mock.lockGetTokenByteCodes.RUnlock()
	return calls
}

// GetVotingThreshold calls GetVotingThresholdFunc.
func (mock *ChainKeeperMock) GetVotingThreshold(ctx github_com_cosmos_cosmos_sdk_types.Context) (utils.Threshold, bool) {
	if mock.GetVotingThresholdFunc == nil {
		panic("ChainKeeperMock.GetVotingThresholdFunc: method is nil but ChainKeeper.GetVotingThreshold was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetVotingThreshold.Lock()
	mock.calls.GetVotingThreshold = append(mock.calls.GetVotingThreshold, callInfo)
	mock.lockGetVotingThreshold.Unlock()
	return mock.GetVotingThresholdFunc(ctx)
}

// GetVotingThresholdCalls gets all the calls that were made to GetVotingThreshold.
// Check the length with:
//     len(mockedChainKeeper.GetVotingThresholdCalls())
func (mock *ChainKeeperMock) GetVotingThresholdCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetVotingThreshold.RLock()
	calls = mock.calls.GetVotingThreshold
	mock.lockGetVotingThreshold.RUnlock()
	return calls
}

// Logger calls LoggerFunc.
func (mock *ChainKeeperMock) Logger(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
	if mock.LoggerFunc == nil {
		panic("ChainKeeperMock.LoggerFunc: method is nil but ChainKeeper.Logger was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogger.Lock()
	mock.calls.Logger = append(mock.calls.Logger, callInfo)
	mock.lockLogger.Unlock()
	return mock.LoggerFunc(ctx)
}

// LoggerCalls gets all the calls that were made to Logger.
// Check the length with:
//     len(mockedChainKeeper.LoggerCalls())
func (mock *ChainKeeperMock) LoggerCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockLogger.RLock()
	calls = mock.calls.Logger
	mock.lockLogger.RUnlock()
	return calls
}

// SetBurnerInfo calls SetBurnerInfoFunc.
func (mock *ChainKeeperMock) SetBurnerInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, burnerAddr common.Address, burnerInfo *types.BurnerInfo) {
	if mock.SetBurnerInfoFunc == nil {
		panic("ChainKeeperMock.SetBurnerInfoFunc: method is nil but ChainKeeper.SetBurnerInfo was just called")
	}
	callInfo := struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		BurnerAddr common.Address
		BurnerInfo *types.BurnerInfo
	}{
		Ctx:        ctx,
		BurnerAddr: burnerAddr,
		BurnerInfo: burnerInfo,
	}
	mock.lockSetBurnerInfo.Lock()
	mock.calls.SetBurnerInfo = append(mock.calls.SetBurnerInfo, callInfo)
	mock.lockSetBurnerInfo.Unlock()
	mock.SetBurnerInfoFunc(ctx, burnerAddr, burnerInfo)
}

// SetBurnerInfoCalls gets all the calls that were made to SetBurnerInfo.
// Check the length with:
//     len(mockedChainKeeper.SetBurnerInfoCalls())
func (mock *ChainKeeperMock) SetBurnerInfoCalls() []struct {
	Ctx        github_com_cosmos_cosmos_sdk_types.Context
	BurnerAddr common.Address
	BurnerInfo *types.BurnerInfo
} {
	var calls []struct {
		Ctx        github_com_cosmos_cosmos_sdk_types.Context
		BurnerAddr common.Address
		BurnerInfo *types.BurnerInfo
	}
	mock.lockSetBurnerInfo.RLock()
	calls = mock.calls.SetBurnerInfo
	mock.lockSetBurnerInfo.RUnlock()
	return calls
}

// SetDeposit calls SetDepositFunc.
func (mock *ChainKeeperMock) SetDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, deposit types.ERC20Deposit, state types.DepositState) {
	if mock.SetDepositFunc == nil {
		panic("ChainKeeperMock.SetDepositFunc: method is nil but ChainKeeper.SetDeposit was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Deposit types.ERC20Deposit
		State   types.DepositState
	}{
		Ctx:     ctx,
		Deposit: deposit,
		State:   state,
	}
	mock.lockSetDeposit.Lock()
	mock.calls.SetDeposit = append(mock.calls.SetDeposit, callInfo)
	mock.lockSetDeposit.Unlock()
	mock.SetDepositFunc(ctx, deposit, state)
}

// SetDepositCalls gets all the calls that were made to SetDeposit.
// Check the length with:
//     len(mockedChainKeeper.SetDepositCalls())
func (mock *ChainKeeperMock) SetDepositCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Deposit types.ERC20Deposit
	State   types.DepositState
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Deposit types.ERC20Deposit
		State   types.DepositState
	}
	mock.lockSetDeposit.RLock()
	calls = mock.calls.SetDeposit
	mock.lockSetDeposit.RUnlock()
	return calls
}

// SetGatewayAddress calls SetGatewayAddressFunc.
func (mock *ChainKeeperMock) SetGatewayAddress(ctx github_com_cosmos_cosmos_sdk_types.Context, addr common.Address) {
	if mock.SetGatewayAddressFunc == nil {
		panic("ChainKeeperMock.SetGatewayAddressFunc: method is nil but ChainKeeper.SetGatewayAddress was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Addr common.Address
	}{
		Ctx:  ctx,
		Addr: addr,
	}
	mock.lockSetGatewayAddress.Lock()
	mock.calls.SetGatewayAddress = append(mock.calls.SetGatewayAddress, callInfo)
	mock.lockSetGatewayAddress.Unlock()
	mock.SetGatewayAddressFunc(ctx, addr)
}

// SetGatewayAddressCalls gets all the calls that were made to SetGatewayAddress.
// Check the length with:
//     len(mockedChainKeeper.SetGatewayAddressCalls())
func (mock *ChainKeeperMock) SetGatewayAddressCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	Addr common.Address
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Addr common.Address
	}
	mock.lockSetGatewayAddress.RLock()
	calls = mock.calls.SetGatewayAddress
	mock.lockSetGatewayAddress.RUnlock()
	return calls
}

// SetPendingDeposit calls SetPendingDepositFunc.
func (mock *ChainKeeperMock) SetPendingDeposit(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, deposit *types.ERC20Deposit) {
	if mock.SetPendingDepositFunc == nil {
		panic("ChainKeeperMock.SetPendingDepositFunc: method is nil but ChainKeeper.SetPendingDeposit was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Key     vote.PollKey
		Deposit *types.ERC20Deposit
	}{
		Ctx:     ctx,
		Key:     key,
		Deposit: deposit,
	}
	mock.lockSetPendingDeposit.Lock()
	mock.calls.SetPendingDeposit = append(mock.calls.SetPendingDeposit, callInfo)
	mock.lockSetPendingDeposit.Unlock()
	mock.SetPendingDepositFunc(ctx, key, deposit)
}

// SetPendingDepositCalls gets all the calls that were made to SetPendingDeposit.
// Check the length with:
//     len(mockedChainKeeper.SetPendingDepositCalls())
func (mock *ChainKeeperMock) SetPendingDepositCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Key     vote.PollKey
	Deposit *types.ERC20Deposit
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Key     vote.PollKey
		Deposit *types.ERC20Deposit
	}
	mock.lockSetPendingDeposit.RLock()
	calls = mock.calls.SetPendingDeposit
	mock.lockSetPendingDeposit.RUnlock()
	return calls
}

// SetPendingTransferKey calls SetPendingTransferKeyFunc.
func (mock *ChainKeeperMock) SetPendingTransferKey(ctx github_com_cosmos_cosmos_sdk_types.Context, key vote.PollKey, transferOwnership *types.TransferKey) {
	if mock.SetPendingTransferKeyFunc == nil {
		panic("ChainKeeperMock.SetPendingTransferKeyFunc: method is nil but ChainKeeper.SetPendingTransferKey was just called")
	}
	callInfo := struct {
		Ctx               github_com_cosmos_cosmos_sdk_types.Context
		Key               vote.PollKey
		TransferOwnership *types.TransferKey
	}{
		Ctx:               ctx,
		Key:               key,
		TransferOwnership: transferOwnership,
	}
	mock.lockSetPendingTransferKey.Lock()
	mock.calls.SetPendingTransferKey = append(mock.calls.SetPendingTransferKey, callInfo)
	mock.lockSetPendingTransferKey.Unlock()
	mock.SetPendingTransferKeyFunc(ctx, key, transferOwnership)
}

// SetPendingTransferKeyCalls gets all the calls that were made to SetPendingTransferKey.
// Check the length with:
//     len(mockedChainKeeper.SetPendingTransferKeyCalls())
func (mock *ChainKeeperMock) SetPendingTransferKeyCalls() []struct {
	Ctx               github_com_cosmos_cosmos_sdk_types.Context
	Key               vote.PollKey
	TransferOwnership *types.TransferKey
} {
	var calls []struct {
		Ctx               github_com_cosmos_cosmos_sdk_types.Context
		Key               vote.PollKey
		TransferOwnership *types.TransferKey
	}
	mock.lockSetPendingTransferKey.RLock()
	calls = mock.calls.SetPendingTransferKey
	mock.lockSetPendingTransferKey.RUnlock()
	return calls
}

// SetUnsignedTx calls SetUnsignedTxFunc.
func (mock *ChainKeeperMock) SetUnsignedTx(ctx github_com_cosmos_cosmos_sdk_types.Context, txID string, tx *evmTypes.Transaction, pk ecdsa.PublicKey) error {
	if mock.SetUnsignedTxFunc == nil {
		panic("ChainKeeperMock.SetUnsignedTxFunc: method is nil but ChainKeeper.SetUnsignedTx was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		TxID string
		Tx   *evmTypes.Transaction
		Pk   ecdsa.PublicKey
	}{
		Ctx:  ctx,
		TxID: txID,
		Tx:   tx,
		Pk:   pk,
	}
	mock.lockSetUnsignedTx.Lock()
	mock.calls.SetUnsignedTx = append(mock.calls.SetUnsignedTx, callInfo)
	mock.lockSetUnsignedTx.Unlock()
	return mock.SetUnsignedTxFunc(ctx, txID, tx, pk)
}

// SetUnsignedTxCalls gets all the calls that were made to SetUnsignedTx.
// Check the length with:
//     len(mockedChainKeeper.SetUnsignedTxCalls())
func (mock *ChainKeeperMock) SetUnsignedTxCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	TxID string
	Tx   *evmTypes.Transaction
	Pk   ecdsa.PublicKey
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		TxID string
		Tx   *evmTypes.Transaction
		Pk   ecdsa.PublicKey
	}
	mock.lockSetUnsignedTx.RLock()
	calls = mock.calls.SetUnsignedTx
	mock.lockSetUnsignedTx.RUnlock()
	return calls
}
