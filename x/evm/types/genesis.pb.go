// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evm/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState represents the genesis state
type GenesisState struct {
	Chains []GenesisState_Chain `protobuf:"bytes,3,rep,name=chains,proto3" json:"chains"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e6f17f1815805e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

type GenesisState_Chain struct {
	Params                  Params                 `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	BurnerInfos             []BurnerInfo           `protobuf:"bytes,2,rep,name=burner_infos,json=burnerInfos,proto3" json:"burner_infos"`
	CommandQueue            map[string]Command     `protobuf:"bytes,3,rep,name=command_queue,json=commandQueue,proto3" json:"command_queue" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfirmedDeposits       []ERC20Deposit         `protobuf:"bytes,4,rep,name=confirmed_deposits,json=confirmedDeposits,proto3" json:"confirmed_deposits"`
	BurnedDeposits          []ERC20Deposit         `protobuf:"bytes,5,rep,name=burned_deposits,json=burnedDeposits,proto3" json:"burned_deposits"`
	CommandBatches          []CommandBatchMetadata `protobuf:"bytes,8,rep,name=command_batches,json=commandBatches,proto3" json:"command_batches"`
	Gateway                 Gateway                `protobuf:"bytes,9,opt,name=gateway,proto3" json:"gateway"`
	Tokens                  []ERC20TokenMetadata   `protobuf:"bytes,10,rep,name=tokens,proto3" json:"tokens"`
	LatestBatchedCommandsID []byte                 `protobuf:"bytes,11,opt,name=latest_batched_commands_id,json=latestBatchedCommandsId,proto3" json:"latest_batched_commands_id,omitempty"`
}

func (m *GenesisState_Chain) Reset()         { *m = GenesisState_Chain{} }
func (m *GenesisState_Chain) String() string { return proto.CompactTextString(m) }
func (*GenesisState_Chain) ProtoMessage()    {}
func (*GenesisState_Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e6f17f1815805e, []int{0, 0}
}
func (m *GenesisState_Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState_Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState_Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState_Chain.Merge(m, src)
}
func (m *GenesisState_Chain) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState_Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState_Chain proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "evm.v1beta1.GenesisState")
	proto.RegisterType((*GenesisState_Chain)(nil), "evm.v1beta1.GenesisState.Chain")
	proto.RegisterMapType((map[string]Command)(nil), "evm.v1beta1.GenesisState.Chain.CommandQueueEntry")
}

func init() { proto.RegisterFile("evm/v1beta1/genesis.proto", fileDescriptor_b9e6f17f1815805e) }

var fileDescriptor_b9e6f17f1815805e = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x6f, 0x12, 0x4f,
	0x14, 0x67, 0xf9, 0xf5, 0xfd, 0x76, 0x40, 0x6b, 0xc7, 0x26, 0x6c, 0xd7, 0x64, 0x41, 0x4f, 0xc4,
	0xc4, 0xdd, 0x82, 0x1e, 0x4c, 0x13, 0x13, 0x03, 0x6d, 0xb4, 0x89, 0x36, 0x15, 0x35, 0x31, 0xc6,
	0x84, 0xcc, 0xee, 0x3e, 0x60, 0x03, 0x3b, 0x83, 0x3b, 0x03, 0x2d, 0xff, 0x85, 0x47, 0xaf, 0xfe,
	0x2b, 0x9e, 0x38, 0xf6, 0xe8, 0xa9, 0x51, 0xb8, 0xfa, 0x47, 0x98, 0x9d, 0x19, 0xc8, 0xa2, 0x24,
	0x7a, 0x9b, 0x7d, 0x9f, 0x1f, 0xef, 0x7d, 0x76, 0xe6, 0xa1, 0x03, 0x98, 0x46, 0xee, 0xb4, 0xe1,
	0x81, 0x20, 0x0d, 0xb7, 0x0f, 0x14, 0x78, 0xc8, 0x9d, 0x71, 0xcc, 0x04, 0xc3, 0x25, 0x98, 0x46,
	0x8e, 0x86, 0xac, 0xfd, 0x3e, 0xeb, 0x33, 0x59, 0x77, 0x93, 0x93, 0xa2, 0x58, 0x66, 0x5a, 0x3d,
	0x26, 0x31, 0x89, 0xb4, 0xd8, 0xaa, 0xa4, 0x11, 0x31, 0x1b, 0x83, 0x06, 0xee, 0x7d, 0x2d, 0xa2,
	0xf2, 0x33, 0xd5, 0xe7, 0xb5, 0x20, 0x02, 0xf0, 0x13, 0x54, 0xf4, 0x07, 0x24, 0xa4, 0xdc, 0xcc,
	0xd5, 0x72, 0xf5, 0x52, 0xb3, 0xea, 0xa4, 0xfa, 0x3a, 0x69, 0xaa, 0xd3, 0x4e, 0x78, 0xad, 0xfc,
	0xfc, 0xba, 0x9a, 0xe9, 0x68, 0x91, 0xf5, 0xb3, 0x80, 0x0a, 0xb2, 0x8e, 0x1b, 0xa8, 0xa8, 0x46,
	0x30, 0x8d, 0x9a, 0x51, 0x2f, 0x35, 0x6f, 0x6f, 0x18, 0x9d, 0x4b, 0x68, 0x25, 0x56, 0x44, 0xfc,
	0x14, 0x95, 0xbd, 0x49, 0x4c, 0x21, 0xee, 0x86, 0xb4, 0xc7, 0xb8, 0x99, 0x95, 0x13, 0x54, 0x36,
	0x84, 0x2d, 0x49, 0x38, 0xa5, 0x3d, 0xa6, 0xc5, 0x25, 0x6f, 0x5d, 0xe1, 0xf8, 0x03, 0xba, 0xe1,
	0xb3, 0x28, 0x22, 0x34, 0xe8, 0x7e, 0x9c, 0xc0, 0x04, 0x74, 0x88, 0xc6, 0x5f, 0x42, 0x38, 0x6d,
	0x25, 0x7a, 0x95, 0x68, 0x4e, 0xa8, 0x88, 0x67, 0xda, 0xbc, 0xec, 0xa7, 0x00, 0x7c, 0x86, 0xb0,
	0xcf, 0x68, 0x2f, 0x8c, 0x23, 0x08, 0xba, 0x01, 0x8c, 0x19, 0x0f, 0x05, 0x37, 0xf3, 0xb2, 0xc5,
	0xc1, 0x46, 0x8b, 0x93, 0x4e, 0xbb, 0x79, 0x78, 0xac, 0x18, 0xda, 0x6a, 0x6f, 0x2d, 0xd5, 0x75,
	0x8e, 0x9f, 0xa3, 0x5d, 0x39, 0x7c, 0xca, 0xac, 0xf0, 0x6f, 0x66, 0x37, 0x95, 0x6e, 0xed, 0x74,
	0x8e, 0x76, 0x57, 0xb9, 0x3d, 0x22, 0xfc, 0x01, 0x70, 0xf3, 0x7f, 0xe9, 0x74, 0x77, 0xc3, 0x49,
	0xc7, 0x6c, 0x25, 0x94, 0x97, 0x20, 0x48, 0x40, 0x04, 0x59, 0x39, 0xfa, 0x29, 0x0c, 0x38, 0x7e,
	0x84, 0xfe, 0xeb, 0x13, 0x01, 0x17, 0x64, 0x66, 0xee, 0xc8, 0xfb, 0xdb, 0xdf, 0xfc, 0x87, 0x0a,
	0xd3, 0xe2, 0x15, 0x35, 0x79, 0x3d, 0x82, 0x0d, 0x81, 0x72, 0x13, 0x6d, 0x79, 0x3d, 0x32, 0xc8,
	0x9b, 0x04, 0xff, 0xad, 0xb9, 0x16, 0xe1, 0x77, 0xc8, 0x1a, 0x11, 0x01, 0x5c, 0xe8, 0x14, 0x41,
	0x57, 0x4f, 0xc5, 0xbb, 0x61, 0x60, 0x96, 0x6a, 0x46, 0xbd, 0xdc, 0xba, 0xb3, 0xb8, 0xae, 0x56,
	0x5e, 0x48, 0x96, 0x9a, 0x35, 0xd0, 0xa9, 0xf8, 0xe9, 0x71, 0xa7, 0x32, 0xda, 0x0a, 0x04, 0xd6,
	0x5b, 0xb4, 0xf7, 0xc7, 0x1d, 0xe3, 0x5b, 0x28, 0x37, 0x84, 0x99, 0x7c, 0x9f, 0x3b, 0x9d, 0xe4,
	0x88, 0xef, 0xa3, 0xc2, 0x94, 0x8c, 0x26, 0x60, 0x66, 0xb7, 0x64, 0xd6, 0x06, 0x1d, 0x45, 0x39,
	0xca, 0x3e, 0x36, 0x8e, 0xf2, 0x9f, 0xbf, 0x54, 0x8d, 0xd6, 0xd9, 0xfc, 0x87, 0x9d, 0x99, 0x2f,
	0x6c, 0xe3, 0x6a, 0x61, 0x1b, 0xdf, 0x17, 0xb6, 0xf1, 0x69, 0x69, 0x67, 0xae, 0x96, 0x76, 0xe6,
	0xdb, 0xd2, 0xce, 0xbc, 0x3f, 0xec, 0x87, 0x62, 0x30, 0xf1, 0x1c, 0x9f, 0x45, 0x2e, 0xb9, 0x84,
	0x11, 0x89, 0x29, 0x88, 0x0b, 0x16, 0x0f, 0xf5, 0xd7, 0x03, 0x9f, 0xc5, 0xe0, 0x5e, 0xba, 0xc9,
	0x8a, 0xca, 0xd5, 0xf4, 0x8a, 0x72, 0x37, 0x1f, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x08, 0x43,
	0xca, 0x47, 0x0e, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState_Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState_Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState_Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestBatchedCommandsID) > 0 {
		i -= len(m.LatestBatchedCommandsID)
		copy(dAtA[i:], m.LatestBatchedCommandsID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.LatestBatchedCommandsID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.Gateway.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.CommandBatches) > 0 {
		for iNdEx := len(m.CommandBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommandBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.BurnedDeposits) > 0 {
		for iNdEx := len(m.BurnedDeposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnedDeposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ConfirmedDeposits) > 0 {
		for iNdEx := len(m.ConfirmedDeposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConfirmedDeposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CommandQueue) > 0 {
		for k := range m.CommandQueue {
			v := m.CommandQueue[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BurnerInfos) > 0 {
		for iNdEx := len(m.BurnerInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnerInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState_Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.BurnerInfos) > 0 {
		for _, e := range m.BurnerInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CommandQueue) > 0 {
		for k, v := range m.CommandQueue {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.ConfirmedDeposits) > 0 {
		for _, e := range m.ConfirmedDeposits {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BurnedDeposits) > 0 {
		for _, e := range m.BurnedDeposits {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CommandBatches) > 0 {
		for _, e := range m.CommandBatches {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Gateway.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.LatestBatchedCommandsID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, GenesisState_Chain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState_Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnerInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnerInfos = append(m.BurnerInfos, BurnerInfo{})
			if err := m.BurnerInfos[len(m.BurnerInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommandQueue == nil {
				m.CommandQueue = make(map[string]Command)
			}
			var mapkey string
			mapvalue := &Command{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Command{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CommandQueue[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedDeposits = append(m.ConfirmedDeposits, ERC20Deposit{})
			if err := m.ConfirmedDeposits[len(m.ConfirmedDeposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnedDeposits = append(m.BurnedDeposits, ERC20Deposit{})
			if err := m.BurnedDeposits[len(m.BurnedDeposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandBatches = append(m.CommandBatches, CommandBatchMetadata{})
			if err := m.CommandBatches[len(m.CommandBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, ERC20TokenMetadata{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBatchedCommandsID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBatchedCommandsID = append(m.LatestBatchedCommandsID[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBatchedCommandsID == nil {
				m.LatestBatchedCommandsID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
