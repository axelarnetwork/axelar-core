// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/multisig/v1beta1/types.proto

package types

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	exported1 "github.com/axelarnetwork/axelar-core/x/multisig/exported"
	github_com_axelarnetwork_axelar_core_x_multisig_exported "github.com/axelarnetwork/axelar-core/x/multisig/exported"
	exported "github.com/axelarnetwork/axelar-core/x/snapshot/exported"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Key struct {
	ID               github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID" json:"id,omitempty"`
	Snapshot         exported.Snapshot                                              `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot"`
	PubKeys          map[string]PublicKey                                           `protobuf:"bytes,3,rep,name=pub_keys,json=pubKeys,proto3,castvalue=PublicKey" json:"pub_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SigningThreshold utils.Threshold                                                `protobuf:"bytes,5,opt,name=signing_threshold,json=signingThreshold,proto3" json:"signing_threshold"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_4411d79cd20e5e65, []int{0}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetID() github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Key) GetSnapshot() exported.Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return exported.Snapshot{}
}

func (m *Key) GetPubKeys() map[string]PublicKey {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (m *Key) GetSigningThreshold() utils.Threshold {
	if m != nil {
		return m.SigningThreshold
	}
	return utils.Threshold{}
}

type KeygenSession struct {
	Key              Key                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	State            exported1.KeygenState `protobuf:"varint,2,opt,name=state,proto3,enum=axelar.multisig.exported.v1beta1.KeygenState" json:"state,omitempty"`
	KeygenThreshold  utils.Threshold       `protobuf:"bytes,3,opt,name=keygen_threshold,json=keygenThreshold,proto3" json:"keygen_threshold"`
	ExpiresAt        int64                 `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CompletedAt      int64                 `protobuf:"varint,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	IsPubKeyReceived map[string]bool       `protobuf:"bytes,6,rep,name=is_pub_key_received,json=isPubKeyReceived,proto3" json:"is_pub_key_received,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GracePeriod      int64                 `protobuf:"varint,7,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
}

func (m *KeygenSession) Reset()         { *m = KeygenSession{} }
func (m *KeygenSession) String() string { return proto.CompactTextString(m) }
func (*KeygenSession) ProtoMessage()    {}
func (*KeygenSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_4411d79cd20e5e65, []int{1}
}
func (m *KeygenSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KeygenSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenSession.Merge(m, src)
}
func (m *KeygenSession) XXX_Size() int {
	return m.Size()
}
func (m *KeygenSession) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenSession.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenSession proto.InternalMessageInfo

func (m *KeygenSession) GetKey() Key {
	if m != nil {
		return m.Key
	}
	return Key{}
}

func (m *KeygenSession) GetState() exported1.KeygenState {
	if m != nil {
		return m.State
	}
	return exported1.NonExistent
}

func (m *KeygenSession) GetKeygenThreshold() utils.Threshold {
	if m != nil {
		return m.KeygenThreshold
	}
	return utils.Threshold{}
}

func (m *KeygenSession) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *KeygenSession) GetCompletedAt() int64 {
	if m != nil {
		return m.CompletedAt
	}
	return 0
}

func (m *KeygenSession) GetIsPubKeyReceived() map[string]bool {
	if m != nil {
		return m.IsPubKeyReceived
	}
	return nil
}

func (m *KeygenSession) GetGracePeriod() int64 {
	if m != nil {
		return m.GracePeriod
	}
	return 0
}

type Sig struct {
	ID             uint64                                                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	KeyID          github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID" json:"key_id,omitempty"`
	PayloadHash    Hash                                                           `protobuf:"bytes,3,opt,name=payload_hash,json=payloadHash,proto3,casttype=Hash" json:"payload_hash,omitempty"`
	Sigs           map[string]Signature                                           `protobuf:"bytes,4,rep,name=sigs,proto3,castvalue=Signature" json:"sigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Module         string                                                         `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	ModuleMetadata *types.Any                                                     `protobuf:"bytes,6,opt,name=module_metadata,json=moduleMetadata,proto3" json:"module_metadata,omitempty"`
}

func (m *Sig) Reset()         { *m = Sig{} }
func (m *Sig) String() string { return proto.CompactTextString(m) }
func (*Sig) ProtoMessage()    {}
func (*Sig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4411d79cd20e5e65, []int{2}
}
func (m *Sig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Sig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sig.Merge(m, src)
}
func (m *Sig) XXX_Size() int {
	return m.Size()
}
func (m *Sig) XXX_DiscardUnknown() {
	xxx_messageInfo_Sig.DiscardUnknown(m)
}

var xxx_messageInfo_Sig proto.InternalMessageInfo

func (m *Sig) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Sig) GetKeyID() github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Sig) GetPayloadHash() Hash {
	if m != nil {
		return m.PayloadHash
	}
	return nil
}

func (m *Sig) GetSigs() map[string]Signature {
	if m != nil {
		return m.Sigs
	}
	return nil
}

func (m *Sig) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Sig) GetModuleMetadata() *types.Any {
	if m != nil {
		return m.ModuleMetadata
	}
	return nil
}

type SigningSession struct {
	Signature   Sig   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature"`
	Key         Key   `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	ExpiresAt   int64 `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CompletedAt int64 `protobuf:"varint,4,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	GracePeriod int64 `protobuf:"varint,5,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
}

func (m *SigningSession) Reset()         { *m = SigningSession{} }
func (m *SigningSession) String() string { return proto.CompactTextString(m) }
func (*SigningSession) ProtoMessage()    {}
func (*SigningSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_4411d79cd20e5e65, []int{3}
}
func (m *SigningSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SigningSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningSession.Merge(m, src)
}
func (m *SigningSession) XXX_Size() int {
	return m.Size()
}
func (m *SigningSession) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningSession.DiscardUnknown(m)
}

var xxx_messageInfo_SigningSession proto.InternalMessageInfo

func (m *SigningSession) GetSignature() Sig {
	if m != nil {
		return m.Signature
	}
	return Sig{}
}

func (m *SigningSession) GetKey() Key {
	if m != nil {
		return m.Key
	}
	return Key{}
}

func (m *SigningSession) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *SigningSession) GetCompletedAt() int64 {
	if m != nil {
		return m.CompletedAt
	}
	return 0
}

func (m *SigningSession) GetGracePeriod() int64 {
	if m != nil {
		return m.GracePeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*Key)(nil), "axelar.multisig.v1beta1.Key")
	proto.RegisterMapType((map[string]PublicKey)(nil), "axelar.multisig.v1beta1.Key.PubKeysEntry")
	proto.RegisterType((*KeygenSession)(nil), "axelar.multisig.v1beta1.KeygenSession")
	proto.RegisterMapType((map[string]bool)(nil), "axelar.multisig.v1beta1.KeygenSession.IsPubKeyReceivedEntry")
	proto.RegisterType((*Sig)(nil), "axelar.multisig.v1beta1.Sig")
	proto.RegisterMapType((map[string]Signature)(nil), "axelar.multisig.v1beta1.Sig.SigsEntry")
	proto.RegisterType((*SigningSession)(nil), "axelar.multisig.v1beta1.SigningSession")
}

func init() {
	proto.RegisterFile("axelar/multisig/v1beta1/types.proto", fileDescriptor_4411d79cd20e5e65)
}

var fileDescriptor_4411d79cd20e5e65 = []byte{
	// 861 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0xc7, 0x49, 0xba, 0x99, 0xa4, 0xdb, 0x65, 0x58, 0x8a, 0x1b, 0x41, 0xb2, 0x14, 0x54,
	0x2d, 0x85, 0xb5, 0xd5, 0x05, 0x04, 0x5a, 0x21, 0xc4, 0xa6, 0x45, 0x6a, 0x14, 0x2a, 0x22, 0x87,
	0x03, 0xe2, 0x62, 0x4d, 0xec, 0x87, 0x33, 0x8a, 0xe3, 0xb1, 0x3c, 0xe3, 0x65, 0xfd, 0x17, 0x38,
	0x71, 0xec, 0x95, 0xff, 0xc0, 0x8d, 0x3f, 0x50, 0x71, 0xea, 0x91, 0x53, 0x40, 0xd9, 0x9f, 0xc0,
	0x89, 0x9e, 0x90, 0x67, 0xc6, 0xde, 0xa5, 0x69, 0x77, 0xb5, 0xa8, 0x87, 0x48, 0x9e, 0x37, 0xdf,
	0x7b, 0xf3, 0xcd, 0xf7, 0xde, 0x37, 0x41, 0xef, 0x92, 0x13, 0x88, 0x48, 0xea, 0x2c, 0xb2, 0x48,
	0x50, 0x4e, 0x43, 0xe7, 0xf8, 0xde, 0x14, 0x04, 0xb9, 0xe7, 0x88, 0x3c, 0x01, 0x6e, 0x27, 0x29,
	0x13, 0x0c, 0xbf, 0xa9, 0x40, 0x76, 0x09, 0xb2, 0x35, 0xa8, 0x7b, 0x2b, 0x64, 0x2c, 0x8c, 0xc0,
	0x91, 0xb0, 0x69, 0xf6, 0x83, 0x43, 0xe2, 0x5c, 0xe5, 0x74, 0x77, 0x42, 0x16, 0x32, 0xf9, 0xe9,
	0x14, 0x5f, 0x3a, 0x7a, 0xcb, 0x67, 0x7c, 0xc1, 0xb8, 0xa7, 0x36, 0xd4, 0x42, 0x6f, 0xbd, 0xa7,
	0x99, 0x64, 0x82, 0x46, 0xfc, 0x8c, 0xc6, 0x2c, 0x05, 0x3e, 0x63, 0x51, 0xa0, 0x51, 0x1f, 0x6a,
	0x14, 0x8f, 0x49, 0xc2, 0x67, 0x4c, 0x38, 0x70, 0x92, 0xb0, 0x54, 0x40, 0xf0, 0x22, 0xe2, 0x15,
	0xba, 0xba, 0xdd, 0x45, 0xe8, 0xdb, 0x8f, 0x4d, 0x64, 0x8e, 0x20, 0xc7, 0xdf, 0xa1, 0x1a, 0x0d,
	0x2c, 0x63, 0xd7, 0xd8, 0x6b, 0x0d, 0x1e, 0xae, 0x96, 0xfd, 0xda, 0xf0, 0xc1, 0xb3, 0x65, 0xff,
	0x8b, 0x90, 0x8a, 0x59, 0x36, 0xb5, 0x7d, 0xb6, 0x70, 0x54, 0xd9, 0x18, 0xc4, 0x8f, 0x2c, 0x9d,
	0xeb, 0xd5, 0xbe, 0xcf, 0x52, 0x70, 0x4e, 0xd6, 0xcf, 0xb2, 0x47, 0x90, 0x0f, 0x1f, 0xb8, 0x35,
	0x1a, 0xe0, 0xaf, 0xd1, 0x66, 0x49, 0xdc, 0xaa, 0xed, 0x1a, 0x7b, 0xed, 0x83, 0xbb, 0xb6, 0xd6,
	0xb6, 0x8c, 0xdb, 0x55, 0x9a, 0xa6, 0x68, 0x4f, 0xf4, 0xce, 0xa0, 0xfe, 0x64, 0xd9, 0xdf, 0x70,
	0xab, 0x0a, 0x78, 0x82, 0x36, 0x93, 0x6c, 0xea, 0xcd, 0x21, 0xe7, 0x96, 0xb9, 0x6b, 0xee, 0xb5,
	0x0f, 0xde, 0xb7, 0x5f, 0xd2, 0xa9, 0x82, 0x83, 0x3d, 0xce, 0xa6, 0x23, 0xc8, 0xf9, 0x57, 0xb1,
	0x48, 0xf3, 0xc1, 0xf5, 0x9f, 0xfe, 0xec, 0xb7, 0xc6, 0xd9, 0x34, 0xa2, 0xfe, 0x08, 0x72, 0xf7,
	0x5a, 0xa2, 0x36, 0xb1, 0x8b, 0x5e, 0xe3, 0x34, 0x8c, 0x69, 0x1c, 0x7a, 0x95, 0xf6, 0x56, 0x43,
	0x72, 0xed, 0x97, 0xd5, 0x65, 0x8b, 0xaa, 0xd2, 0xdf, 0x96, 0x30, 0x4d, 0x70, 0x5b, 0xe7, 0x57,
	0xf1, 0xee, 0x21, 0xea, 0x9c, 0x3f, 0x1b, 0x6f, 0x23, 0x73, 0x0e, 0xb9, 0x52, 0xd8, 0x2d, 0x3e,
	0xf1, 0x0e, 0x6a, 0x1c, 0x93, 0x28, 0x03, 0xa9, 0x4a, 0xc7, 0x55, 0x8b, 0xc3, 0xda, 0x67, 0xc6,
	0x61, 0xfd, 0xf1, 0x2f, 0x7d, 0xe3, 0xf6, 0x3f, 0x26, 0xba, 0x3e, 0x82, 0x3c, 0x84, 0x78, 0x02,
	0x9c, 0x53, 0x16, 0xe3, 0x8f, 0xcf, 0x6a, 0xb4, 0x0f, 0xde, 0xba, 0xe8, 0xde, 0x9a, 0x96, 0x3c,
	0xe7, 0x3e, 0x6a, 0x70, 0x41, 0x84, 0x3a, 0x67, 0xeb, 0x60, 0x7f, 0x2d, 0x6f, 0x4d, 0x7d, 0x7d,
	0x6a, 0x91, 0xe4, 0xaa, 0x5c, 0x3c, 0x46, 0xdb, 0x73, 0x19, 0x3d, 0xa7, 0x90, 0x79, 0x15, 0x85,
	0x6e, 0xa8, 0xf4, 0x2a, 0x8c, 0xdf, 0x46, 0x08, 0x4e, 0x12, 0x9a, 0x02, 0xf7, 0x88, 0xb0, 0xea,
	0xbb, 0xc6, 0x9e, 0xe9, 0xb6, 0x74, 0xe4, 0x48, 0xe0, 0x77, 0x50, 0xc7, 0x67, 0x8b, 0x24, 0x02,
	0x01, 0x41, 0x01, 0x68, 0x48, 0x40, 0xbb, 0x8a, 0x1d, 0x09, 0x3c, 0x47, 0xaf, 0x53, 0xee, 0xe9,
	0x71, 0xf0, 0x52, 0xf0, 0x81, 0x1e, 0x43, 0x60, 0x35, 0xe5, 0x58, 0x7c, 0x7e, 0x91, 0x3c, 0x67,
	0x9a, 0xda, 0x43, 0xae, 0xda, 0xe4, 0xea, 0x74, 0xd9, 0x2d, 0x77, 0x9b, 0x3e, 0x17, 0x2e, 0xf8,
	0x84, 0x29, 0xf1, 0xc1, 0x4b, 0x20, 0xa5, 0x2c, 0xb0, 0xae, 0x29, 0x3e, 0x32, 0x36, 0x96, 0xa1,
	0xee, 0x7d, 0xf4, 0xc6, 0x0b, 0xab, 0x5d, 0xd6, 0xfb, 0xcd, 0xf5, 0xde, 0xff, 0x66, 0x22, 0x73,
	0x42, 0x43, 0x7c, 0xb3, 0xb2, 0x65, 0x7d, 0xd0, 0x54, 0xb6, 0x94, 0xa6, 0x9a, 0xa2, 0x66, 0x71,
	0x67, 0x1a, 0xc8, 0x02, 0xad, 0xc1, 0x68, 0xb5, 0xec, 0x37, 0xa4, 0xe7, 0x5e, 0x81, 0x6b, 0x1b,
	0x73, 0xc8, 0x87, 0x01, 0xfe, 0x00, 0x75, 0x12, 0x92, 0x47, 0x8c, 0x04, 0xde, 0x8c, 0xf0, 0x99,
	0x6c, 0x77, 0x67, 0xb0, 0xf9, 0x6c, 0xd9, 0xaf, 0x3f, 0x24, 0x7c, 0xe6, 0xb6, 0xf5, 0x6e, 0xb1,
	0xc0, 0x43, 0x54, 0xe7, 0x34, 0xe4, 0x56, 0x5d, 0x8a, 0x7f, 0xe7, 0xa5, 0xe2, 0x4f, 0x68, 0x58,
	0xfc, 0xce, 0x1b, 0x72, 0x42, 0xc3, 0x98, 0x88, 0x2c, 0x05, 0x57, 0x96, 0xc0, 0x37, 0x51, 0x73,
	0xc1, 0x82, 0x2c, 0x02, 0xd9, 0xf3, 0x96, 0xab, 0x57, 0x98, 0xa2, 0x1b, 0xea, 0xcb, 0x5b, 0x80,
	0x20, 0x01, 0x11, 0xc4, 0x6a, 0xca, 0x09, 0xdc, 0xb1, 0xd5, 0x93, 0x6c, 0x97, 0x4f, 0xb2, 0x7d,
	0x14, 0xe7, 0x83, 0xbb, 0xbf, 0xff, 0xba, 0x7f, 0xe7, 0x9c, 0x12, 0xea, 0xe1, 0x75, 0x7c, 0x16,
	0x80, 0xef, 0x8c, 0x0b, 0xe4, 0x23, 0x92, 0xf2, 0x19, 0x89, 0x20, 0x75, 0xb7, 0x54, 0xe1, 0x47,
	0xba, 0x6e, 0xf7, 0x53, 0xd4, 0xaa, 0x48, 0xfe, 0x0f, 0xe7, 0xfe, 0x6d, 0xa0, 0xad, 0x89, 0x7a,
	0x10, 0x4a, 0xeb, 0x7e, 0x89, 0x5a, 0xbc, 0xbc, 0xe7, 0xa5, 0x06, 0x9e, 0xd0, 0x50, 0xbb, 0xe6,
	0x2c, 0xa9, 0x34, 0x7f, 0xed, 0x6a, 0xe6, 0xff, 0xaf, 0xcb, 0xcc, 0xcb, 0x5c, 0x56, 0x5f, 0x77,
	0xd9, 0xf3, 0x83, 0xdf, 0x58, 0x1b, 0x7c, 0x75, 0xeb, 0xc1, 0x37, 0x4f, 0x56, 0x3d, 0xe3, 0xe9,
	0xaa, 0x67, 0xfc, 0xb5, 0xea, 0x19, 0x3f, 0x9f, 0xf6, 0x36, 0x9e, 0x9e, 0xf6, 0x36, 0xfe, 0x38,
	0xed, 0x6d, 0x7c, 0xff, 0xc9, 0x55, 0x07, 0x52, 0xfe, 0x43, 0x4d, 0x9b, 0xb2, 0x9f, 0x1f, 0xfd,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x50, 0x90, 0x82, 0xb0, 0x07, 0x00, 0x00,
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SigningThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.PubKeys) > 0 {
		keysForPubKeys := make([]string, 0, len(m.PubKeys))
		for k := range m.PubKeys {
			keysForPubKeys = append(keysForPubKeys, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForPubKeys)
		for iNdEx := len(keysForPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			v := m.PubKeys[string(keysForPubKeys[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintTypes(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForPubKeys[iNdEx])
			copy(dAtA[i:], keysForPubKeys[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForPubKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GracePeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GracePeriod))
		i--
		dAtA[i] = 0x38
	}
	if len(m.IsPubKeyReceived) > 0 {
		keysForIsPubKeyReceived := make([]string, 0, len(m.IsPubKeyReceived))
		for k := range m.IsPubKeyReceived {
			keysForIsPubKeyReceived = append(keysForIsPubKeyReceived, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForIsPubKeyReceived)
		for iNdEx := len(keysForIsPubKeyReceived) - 1; iNdEx >= 0; iNdEx-- {
			v := m.IsPubKeyReceived[string(keysForIsPubKeyReceived[iNdEx])]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(keysForIsPubKeyReceived[iNdEx])
			copy(dAtA[i:], keysForIsPubKeyReceived[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForIsPubKeyReceived[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.CompletedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CompletedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.KeygenThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Sig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModuleMetadata != nil {
		{
			size, err := m.ModuleMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sigs) > 0 {
		keysForSigs := make([]string, 0, len(m.Sigs))
		for k := range m.Sigs {
			keysForSigs = append(keysForSigs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSigs)
		for iNdEx := len(keysForSigs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Sigs[string(keysForSigs[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintTypes(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSigs[iNdEx])
			copy(dAtA[i:], keysForSigs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForSigs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PayloadHash) > 0 {
		i -= len(m.PayloadHash)
		copy(dAtA[i:], m.PayloadHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PayloadHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SigningSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GracePeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GracePeriod))
		i--
		dAtA[i] = 0x28
	}
	if m.CompletedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CompletedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Snapshot.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.PubKeys) > 0 {
		for k, v := range m.PubKeys {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovTypes(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = m.SigningThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *KeygenSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	l = m.KeygenThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ExpiresAt != 0 {
		n += 1 + sovTypes(uint64(m.ExpiresAt))
	}
	if m.CompletedAt != 0 {
		n += 1 + sovTypes(uint64(m.CompletedAt))
	}
	if len(m.IsPubKeyReceived) > 0 {
		for k, v := range m.IsPubKeyReceived {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.GracePeriod != 0 {
		n += 1 + sovTypes(uint64(m.GracePeriod))
	}
	return n
}

func (m *Sig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTypes(uint64(m.ID))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PayloadHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Sigs) > 0 {
		for k, v := range m.Sigs {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovTypes(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ModuleMetadata != nil {
		l = m.ModuleMetadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SigningSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Signature.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Key.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ExpiresAt != 0 {
		n += 1 + sovTypes(uint64(m.ExpiresAt))
	}
	if m.CompletedAt != 0 {
		n += 1 + sovTypes(uint64(m.CompletedAt))
	}
	if m.GracePeriod != 0 {
		n += 1 + sovTypes(uint64(m.GracePeriod))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKeys == nil {
				m.PubKeys = make(map[string]PublicKey)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthTypes
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PubKeys[mapkey] = ((PublicKey)(mapvalue))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SigningThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= exported1.KeygenState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KeygenThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			m.CompletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPubKeyReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsPubKeyReceived == nil {
				m.IsPubKeyReceived = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IsPubKeyReceived[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriod", wireType)
			}
			m.GracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_multisig_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = append(m.PayloadHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PayloadHash == nil {
				m.PayloadHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sigs == nil {
				m.Sigs = make(map[string]Signature)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthTypes
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sigs[mapkey] = ((Signature)(mapvalue))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleMetadata == nil {
				m.ModuleMetadata = &types.Any{}
			}
			if err := m.ModuleMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			m.CompletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriod", wireType)
			}
			m.GracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
