// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vote/v1beta1/types.proto

package types

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	_ "github.com/axelarnetwork/axelar-core/x/snapshot/exported"
	exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PollMetadata_State int32

const (
	NonExistant PollMetadata_State = 0
	Pending     PollMetadata_State = 1
	Completed   PollMetadata_State = 2
	Failed      PollMetadata_State = 3
	Expired     PollMetadata_State = 4
)

var PollMetadata_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "STATE_PENDING",
	2: "STATE_COMPLETED",
	3: "STATE_FAILED",
	4: "STATE_EXPIRED",
}

var PollMetadata_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"STATE_PENDING":     1,
	"STATE_COMPLETED":   2,
	"STATE_FAILED":      3,
	"STATE_EXPIRED":     4,
}

func (x PollMetadata_State) String() string {
	return proto.EnumName(PollMetadata_State_name, int32(x))
}

func (PollMetadata_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9c503af20eb7347, []int{1, 0}
}

// TalliedVote represents a vote for a poll with the accumulated stake of all
// validators voting for the same data
type TalliedVote struct {
	Tally  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=tally,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tally"`
	Voters Voters                                 `protobuf:"bytes,2,rep,name=voters,proto3,castrepeated=Voters" json:"voters,omitempty"`
	Data   *types.Any                             `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TalliedVote) Reset()         { *m = TalliedVote{} }
func (m *TalliedVote) String() string { return proto.CompactTextString(m) }
func (*TalliedVote) ProtoMessage()    {}
func (*TalliedVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c503af20eb7347, []int{0}
}
func (m *TalliedVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TalliedVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TalliedVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TalliedVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalliedVote.Merge(m, src)
}
func (m *TalliedVote) XXX_Size() int {
	return m.Size()
}
func (m *TalliedVote) XXX_DiscardUnknown() {
	xxx_messageInfo_TalliedVote.DiscardUnknown(m)
}

var xxx_messageInfo_TalliedVote proto.InternalMessageInfo

// PollMetadata represents a poll with write-in voting, i.e. the result of the
// vote can have any data type
type PollMetadata struct {
	Key             exported.PollKey   `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	SnapshotSeqNo   int64              `protobuf:"varint,2,opt,name=snapshot_seq_no,json=snapshotSeqNo,proto3" json:"snapshot_seq_no,omitempty"`
	ExpiresAt       int64              `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Result          *types.Any         `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	VotingThreshold utils.Threshold    `protobuf:"bytes,6,opt,name=voting_threshold,json=votingThreshold,proto3" json:"voting_threshold"`
	State           PollMetadata_State `protobuf:"varint,8,opt,name=state,proto3,enum=vote.v1beta1.PollMetadata_State" json:"state,omitempty"`
}

func (m *PollMetadata) Reset()         { *m = PollMetadata{} }
func (m *PollMetadata) String() string { return proto.CompactTextString(m) }
func (*PollMetadata) ProtoMessage()    {}
func (*PollMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c503af20eb7347, []int{1}
}
func (m *PollMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollMetadata.Merge(m, src)
}
func (m *PollMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PollMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PollMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PollMetadata proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("vote.v1beta1.PollMetadata_State", PollMetadata_State_name, PollMetadata_State_value)
	proto.RegisterType((*TalliedVote)(nil), "vote.v1beta1.TalliedVote")
	proto.RegisterType((*PollMetadata)(nil), "vote.v1beta1.PollMetadata")
}

func init() { proto.RegisterFile("vote/v1beta1/types.proto", fileDescriptor_f9c503af20eb7347) }

var fileDescriptor_f9c503af20eb7347 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0xb5, 0xc9, 0xcf, 0x07, 0x93, 0xf0, 0x25, 0x1d, 0xb1, 0x30, 0x56, 0x31, 0x6e, 0xa4, 0xa2,
	0xa8, 0x12, 0xb6, 0xa0, 0x12, 0xfb, 0x84, 0x98, 0xca, 0x2a, 0x04, 0xcb, 0x49, 0x11, 0xea, 0x26,
	0x9a, 0xc4, 0x53, 0xc7, 0x62, 0xf0, 0x04, 0xcf, 0x84, 0x26, 0x6f, 0x50, 0x65, 0xd5, 0x17, 0xc8,
	0xaa, 0x5d, 0xa0, 0xae, 0xbb, 0xeb, 0x0b, 0xa0, 0x4a, 0x95, 0x58, 0x56, 0x5d, 0xd0, 0x16, 0x5e,
	0xa4, 0xf2, 0xd8, 0x81, 0x2c, 0x50, 0x57, 0x5d, 0xc5, 0x73, 0xce, 0xb9, 0xf7, 0xe6, 0xdc, 0x33,
	0x03, 0x94, 0x73, 0xca, 0xb1, 0x79, 0xbe, 0xd5, 0xc5, 0x1c, 0x6d, 0x99, 0x7c, 0x3c, 0xc0, 0xcc,
	0x18, 0x44, 0x94, 0x53, 0x58, 0x8c, 0x19, 0x23, 0x65, 0xd4, 0x55, 0x9f, 0x52, 0x9f, 0x60, 0x53,
	0x70, 0xdd, 0xe1, 0x1b, 0x13, 0x85, 0xe3, 0x44, 0xa8, 0xae, 0xf8, 0xd4, 0xa7, 0xe2, 0xd3, 0x8c,
	0xbf, 0x52, 0xf4, 0x89, 0x68, 0x8c, 0x47, 0x03, 0x1a, 0x71, 0xec, 0x3d, 0x34, 0x41, 0x5d, 0xed,
	0x51, 0x76, 0x4a, 0x59, 0x27, 0xa9, 0x4d, 0x0e, 0x29, 0xb5, 0x36, 0xe4, 0x01, 0x61, 0xf7, 0x55,
	0xfd, 0x08, 0xb3, 0x3e, 0x25, 0x5e, 0x4a, 0x3f, 0x65, 0x21, 0x1a, 0xb0, 0x3e, 0xe5, 0x7f, 0x1d,
	0x50, 0xf9, 0x26, 0x83, 0x42, 0x1b, 0x11, 0x12, 0x60, 0xef, 0x88, 0x72, 0x0c, 0x1b, 0x20, 0xc7,
	0x11, 0x21, 0x63, 0x45, 0xd6, 0xe5, 0x6a, 0xb1, 0x6e, 0x5c, 0x5e, 0xaf, 0x4b, 0x3f, 0xae, 0xd7,
	0x37, 0xfc, 0x80, 0xf7, 0x87, 0x5d, 0xa3, 0x47, 0x4f, 0xd3, 0x7f, 0x91, 0xfe, 0x6c, 0x32, 0xef,
	0x24, 0x6d, 0x68, 0x87, 0xdc, 0x4d, 0x8a, 0x61, 0x05, 0xe4, 0x63, 0x6f, 0x11, 0x53, 0x16, 0xf4,
	0x4c, 0xb5, 0x58, 0x07, 0x9f, 0x7e, 0xae, 0xe7, 0x8f, 0x04, 0xe2, 0xa6, 0x0c, 0x6c, 0x83, 0xac,
	0x87, 0x38, 0x52, 0x32, 0xba, 0x5c, 0x2d, 0x6c, 0xaf, 0x18, 0xc9, 0xf6, 0x8c, 0xd9, 0xf6, 0x8c,
	0x5a, 0x38, 0xae, 0x3f, 0xfb, 0xfa, 0x79, 0xf3, 0xc1, 0xd1, 0x1e, 0xee, 0x99, 0x4e, 0xac, 0x3c,
	0x40, 0x11, 0xeb, 0x23, 0x82, 0x23, 0x57, 0x74, 0xab, 0x5c, 0x64, 0x41, 0xd1, 0xa1, 0x84, 0x1c,
	0x60, 0x8e, 0x62, 0x00, 0xee, 0x80, 0xcc, 0x09, 0x4e, 0xec, 0x14, 0xb6, 0x35, 0x43, 0x24, 0x36,
	0xdb, 0xc8, 0x2c, 0x3a, 0x23, 0xae, 0x78, 0x89, 0xc7, 0xf5, 0x6c, 0x6c, 0xd7, 0x8d, 0x0b, 0xe0,
	0x06, 0x28, 0xcd, 0x36, 0xd8, 0x61, 0xf8, 0xac, 0x13, 0x52, 0x65, 0x41, 0x97, 0xab, 0x19, 0x77,
	0x79, 0x06, 0xb7, 0xf0, 0x59, 0x93, 0xc2, 0x35, 0x00, 0xf0, 0x68, 0x10, 0x44, 0x98, 0x75, 0x10,
	0x57, 0xb2, 0x42, 0xb2, 0x94, 0x22, 0x35, 0x0e, 0x8f, 0x41, 0x3e, 0xc2, 0x6c, 0x48, 0xb8, 0x92,
	0xfb, 0x47, 0x3e, 0xd3, 0x7e, 0xd0, 0x06, 0xe5, 0x73, 0xca, 0x83, 0xd0, 0xef, 0xdc, 0x45, 0xaf,
	0xe4, 0xc5, 0x0c, 0xc5, 0x10, 0x57, 0xe3, 0xce, 0x5d, 0x7b, 0xc6, 0xa7, 0xfe, 0x4a, 0x49, 0xdd,
	0x1d, 0x0c, 0x77, 0x40, 0x8e, 0x71, 0xc4, 0xb1, 0xb2, 0xa8, 0xcb, 0xd5, 0xff, 0xb7, 0x75, 0x63,
	0xfe, 0x5e, 0x1b, 0xf3, 0xeb, 0x34, 0x5a, 0xb1, 0xce, 0x4d, 0xe4, 0x95, 0x2f, 0x32, 0xc8, 0x09,
	0x00, 0x6e, 0x80, 0x47, 0xad, 0x76, 0xad, 0x6d, 0x75, 0x5e, 0x35, 0x5b, 0x8e, 0xb5, 0x6b, 0xef,
	0xd9, 0x56, 0xa3, 0x2c, 0xa9, 0xa5, 0xc9, 0x54, 0x2f, 0x34, 0x69, 0x68, 0x8d, 0x02, 0xc6, 0x51,
	0xc8, 0xa1, 0x06, 0x96, 0x13, 0x9d, 0x63, 0x35, 0x1b, 0x76, 0xf3, 0x45, 0x59, 0x56, 0x0b, 0x93,
	0xa9, 0xfe, 0x9f, 0x83, 0x43, 0x2f, 0x08, 0x7d, 0x58, 0x01, 0xa5, 0x84, 0xdf, 0x3d, 0x3c, 0x70,
	0xf6, 0xad, 0xb6, 0xd5, 0x28, 0x2f, 0xa8, 0xcb, 0x93, 0xa9, 0xbe, 0xb4, 0x4b, 0x4f, 0x07, 0x04,
	0x73, 0xec, 0xc1, 0xc7, 0xa0, 0x98, 0x68, 0xf6, 0x6a, 0xf6, 0xbe, 0xd5, 0x28, 0x67, 0x54, 0x30,
	0x99, 0xea, 0xf9, 0x3d, 0x14, 0x10, 0xec, 0xdd, 0x4f, 0xb0, 0x8e, 0x1d, 0xdb, 0xb5, 0x1a, 0xe5,
	0x6c, 0x32, 0xc1, 0x12, 0x91, 0x78, 0xea, 0xe2, 0xbb, 0x0f, 0x9a, 0x74, 0xf1, 0x51, 0x93, 0xeb,
	0x87, 0x97, 0xbf, 0x35, 0xe9, 0xf2, 0x46, 0x93, 0xaf, 0x6e, 0x34, 0xf9, 0xd7, 0x8d, 0x26, 0xbf,
	0xbf, 0xd5, 0xa4, 0xab, 0x5b, 0x4d, 0xfa, 0x7e, 0xab, 0x49, 0xaf, 0xb7, 0xe6, 0xe2, 0x40, 0x23,
	0x4c, 0x50, 0x14, 0x62, 0xfe, 0x96, 0x46, 0x27, 0xe9, 0x69, 0xb3, 0x47, 0x23, 0x6c, 0x8e, 0x4c,
	0xf1, 0x86, 0xc5, 0x03, 0xe8, 0xe6, 0x45, 0xa6, 0xcf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x49,
	0xc7, 0x5f, 0xf9, 0x31, 0x04, 0x00, 0x00,
}

func (m *TalliedVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TalliedVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TalliedVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Voters[iNdEx])
			copy(dAtA[i:], m.Voters[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Voters[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.Tally.Size()
		i -= size
		if _, err := m.Tally.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PollMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.VotingThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x20
	}
	if m.SnapshotSeqNo != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SnapshotSeqNo))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TalliedVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tally.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Voters) > 0 {
		for _, b := range m.Voters {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PollMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.SnapshotSeqNo != 0 {
		n += 1 + sovTypes(uint64(m.SnapshotSeqNo))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovTypes(uint64(m.ExpiresAt))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.VotingThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TalliedVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalliedVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalliedVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tally", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tally.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, make([]byte, postIndex-iNdEx))
			copy(m.Voters[len(m.Voters)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotSeqNo", wireType)
			}
			m.SnapshotSeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotSeqNo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Any{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotingThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PollMetadata_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
