// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/axelarnetwork/axelar-core/x/vote/exported"
	"github.com/axelarnetwork/axelar-core/x/vote/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	"sync"
)

// Ensure, that StoreMock does implement types.Store.
// If this is not the case, regenerate this file with moq.
var _ types.Store = &StoreMock{}

// StoreMock is a mock implementation of types.Store.
//
// 	func TestSomethingThatUsesStore(t *testing.T) {
//
// 		// make and configure a mocked types.Store
// 		mockedStore := &StoreMock{
// 			DeletePollFunc: func(key exported.PollKey)  {
// 				panic("mock out the DeletePoll method")
// 			},
// 			GetPollFunc: func(key exported.PollKey) exported.Poll {
// 				panic("mock out the GetPoll method")
// 			},
// 			GetShareCountFunc: func(snapSeqNo int64, address github_com_cosmos_cosmos_sdk_types.ValAddress) (int64, bool) {
// 				panic("mock out the GetShareCount method")
// 			},
// 			GetTotalShareCountFunc: func(snapSeqNo int64) github_com_cosmos_cosmos_sdk_types.Int {
// 				panic("mock out the GetTotalShareCount method")
// 			},
// 			GetVoteFunc: func(key exported.PollKey, hash string) (types.TalliedVote, bool) {
// 				panic("mock out the GetVote method")
// 			},
// 			GetVotesFunc: func(key exported.PollKey) []types.TalliedVote {
// 				panic("mock out the GetVotes method")
// 			},
// 			HasVotedFunc: func(key exported.PollKey, voter github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
// 				panic("mock out the HasVoted method")
// 			},
// 			SetMetadataFunc: func(metadata exported.PollMetadata)  {
// 				panic("mock out the SetMetadata method")
// 			},
// 			SetVoteFunc: func(key exported.PollKey, vote types.TalliedVote)  {
// 				panic("mock out the SetVote method")
// 			},
// 			SetVotedFunc: func(key exported.PollKey, voter github_com_cosmos_cosmos_sdk_types.ValAddress)  {
// 				panic("mock out the SetVoted method")
// 			},
// 		}
//
// 		// use mockedStore in code that requires types.Store
// 		// and then make assertions.
//
// 	}
type StoreMock struct {
	// DeletePollFunc mocks the DeletePoll method.
	DeletePollFunc func(key exported.PollKey)

	// GetPollFunc mocks the GetPoll method.
	GetPollFunc func(key exported.PollKey) exported.Poll

	// GetShareCountFunc mocks the GetShareCount method.
	GetShareCountFunc func(snapSeqNo int64, address github_com_cosmos_cosmos_sdk_types.ValAddress) (int64, bool)

	// GetTotalShareCountFunc mocks the GetTotalShareCount method.
	GetTotalShareCountFunc func(snapSeqNo int64) github_com_cosmos_cosmos_sdk_types.Int

	// GetVoteFunc mocks the GetVote method.
	GetVoteFunc func(key exported.PollKey, hash string) (types.TalliedVote, bool)

	// GetVotesFunc mocks the GetVotes method.
	GetVotesFunc func(key exported.PollKey) []types.TalliedVote

	// HasVotedFunc mocks the HasVoted method.
	HasVotedFunc func(key exported.PollKey, voter github_com_cosmos_cosmos_sdk_types.ValAddress) bool

	// SetMetadataFunc mocks the SetMetadata method.
	SetMetadataFunc func(metadata exported.PollMetadata)

	// SetVoteFunc mocks the SetVote method.
	SetVoteFunc func(key exported.PollKey, vote types.TalliedVote)

	// SetVotedFunc mocks the SetVoted method.
	SetVotedFunc func(key exported.PollKey, voter github_com_cosmos_cosmos_sdk_types.ValAddress)

	// calls tracks calls to the methods.
	calls struct {
		// DeletePoll holds details about calls to the DeletePoll method.
		DeletePoll []struct {
			// Key is the key argument value.
			Key exported.PollKey
		}
		// GetPoll holds details about calls to the GetPoll method.
		GetPoll []struct {
			// Key is the key argument value.
			Key exported.PollKey
		}
		// GetShareCount holds details about calls to the GetShareCount method.
		GetShareCount []struct {
			// SnapSeqNo is the snapSeqNo argument value.
			SnapSeqNo int64
			// Address is the address argument value.
			Address github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// GetTotalShareCount holds details about calls to the GetTotalShareCount method.
		GetTotalShareCount []struct {
			// SnapSeqNo is the snapSeqNo argument value.
			SnapSeqNo int64
		}
		// GetVote holds details about calls to the GetVote method.
		GetVote []struct {
			// Key is the key argument value.
			Key exported.PollKey
			// Hash is the hash argument value.
			Hash string
		}
		// GetVotes holds details about calls to the GetVotes method.
		GetVotes []struct {
			// Key is the key argument value.
			Key exported.PollKey
		}
		// HasVoted holds details about calls to the HasVoted method.
		HasVoted []struct {
			// Key is the key argument value.
			Key exported.PollKey
			// Voter is the voter argument value.
			Voter github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// SetMetadata holds details about calls to the SetMetadata method.
		SetMetadata []struct {
			// Metadata is the metadata argument value.
			Metadata exported.PollMetadata
		}
		// SetVote holds details about calls to the SetVote method.
		SetVote []struct {
			// Key is the key argument value.
			Key exported.PollKey
			// Vote is the vote argument value.
			Vote types.TalliedVote
		}
		// SetVoted holds details about calls to the SetVoted method.
		SetVoted []struct {
			// Key is the key argument value.
			Key exported.PollKey
			// Voter is the voter argument value.
			Voter github_com_cosmos_cosmos_sdk_types.ValAddress
		}
	}
	lockDeletePoll         sync.RWMutex
	lockGetPoll            sync.RWMutex
	lockGetShareCount      sync.RWMutex
	lockGetTotalShareCount sync.RWMutex
	lockGetVote            sync.RWMutex
	lockGetVotes           sync.RWMutex
	lockHasVoted           sync.RWMutex
	lockSetMetadata        sync.RWMutex
	lockSetVote            sync.RWMutex
	lockSetVoted           sync.RWMutex
}

// DeletePoll calls DeletePollFunc.
func (mock *StoreMock) DeletePoll(key exported.PollKey) {
	if mock.DeletePollFunc == nil {
		panic("StoreMock.DeletePollFunc: method is nil but Store.DeletePoll was just called")
	}
	callInfo := struct {
		Key exported.PollKey
	}{
		Key: key,
	}
	mock.lockDeletePoll.Lock()
	mock.calls.DeletePoll = append(mock.calls.DeletePoll, callInfo)
	mock.lockDeletePoll.Unlock()
	mock.DeletePollFunc(key)
}

// DeletePollCalls gets all the calls that were made to DeletePoll.
// Check the length with:
//     len(mockedStore.DeletePollCalls())
func (mock *StoreMock) DeletePollCalls() []struct {
	Key exported.PollKey
} {
	var calls []struct {
		Key exported.PollKey
	}
	mock.lockDeletePoll.RLock()
	calls = mock.calls.DeletePoll
	mock.lockDeletePoll.RUnlock()
	return calls
}

// GetPoll calls GetPollFunc.
func (mock *StoreMock) GetPoll(key exported.PollKey) exported.Poll {
	if mock.GetPollFunc == nil {
		panic("StoreMock.GetPollFunc: method is nil but Store.GetPoll was just called")
	}
	callInfo := struct {
		Key exported.PollKey
	}{
		Key: key,
	}
	mock.lockGetPoll.Lock()
	mock.calls.GetPoll = append(mock.calls.GetPoll, callInfo)
	mock.lockGetPoll.Unlock()
	return mock.GetPollFunc(key)
}

// GetPollCalls gets all the calls that were made to GetPoll.
// Check the length with:
//     len(mockedStore.GetPollCalls())
func (mock *StoreMock) GetPollCalls() []struct {
	Key exported.PollKey
} {
	var calls []struct {
		Key exported.PollKey
	}
	mock.lockGetPoll.RLock()
	calls = mock.calls.GetPoll
	mock.lockGetPoll.RUnlock()
	return calls
}

// GetShareCount calls GetShareCountFunc.
func (mock *StoreMock) GetShareCount(snapSeqNo int64, address github_com_cosmos_cosmos_sdk_types.ValAddress) (int64, bool) {
	if mock.GetShareCountFunc == nil {
		panic("StoreMock.GetShareCountFunc: method is nil but Store.GetShareCount was just called")
	}
	callInfo := struct {
		SnapSeqNo int64
		Address   github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		SnapSeqNo: snapSeqNo,
		Address:   address,
	}
	mock.lockGetShareCount.Lock()
	mock.calls.GetShareCount = append(mock.calls.GetShareCount, callInfo)
	mock.lockGetShareCount.Unlock()
	return mock.GetShareCountFunc(snapSeqNo, address)
}

// GetShareCountCalls gets all the calls that were made to GetShareCount.
// Check the length with:
//     len(mockedStore.GetShareCountCalls())
func (mock *StoreMock) GetShareCountCalls() []struct {
	SnapSeqNo int64
	Address   github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		SnapSeqNo int64
		Address   github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockGetShareCount.RLock()
	calls = mock.calls.GetShareCount
	mock.lockGetShareCount.RUnlock()
	return calls
}

// GetTotalShareCount calls GetTotalShareCountFunc.
func (mock *StoreMock) GetTotalShareCount(snapSeqNo int64) github_com_cosmos_cosmos_sdk_types.Int {
	if mock.GetTotalShareCountFunc == nil {
		panic("StoreMock.GetTotalShareCountFunc: method is nil but Store.GetTotalShareCount was just called")
	}
	callInfo := struct {
		SnapSeqNo int64
	}{
		SnapSeqNo: snapSeqNo,
	}
	mock.lockGetTotalShareCount.Lock()
	mock.calls.GetTotalShareCount = append(mock.calls.GetTotalShareCount, callInfo)
	mock.lockGetTotalShareCount.Unlock()
	return mock.GetTotalShareCountFunc(snapSeqNo)
}

// GetTotalShareCountCalls gets all the calls that were made to GetTotalShareCount.
// Check the length with:
//     len(mockedStore.GetTotalShareCountCalls())
func (mock *StoreMock) GetTotalShareCountCalls() []struct {
	SnapSeqNo int64
} {
	var calls []struct {
		SnapSeqNo int64
	}
	mock.lockGetTotalShareCount.RLock()
	calls = mock.calls.GetTotalShareCount
	mock.lockGetTotalShareCount.RUnlock()
	return calls
}

// GetVote calls GetVoteFunc.
func (mock *StoreMock) GetVote(key exported.PollKey, hash string) (types.TalliedVote, bool) {
	if mock.GetVoteFunc == nil {
		panic("StoreMock.GetVoteFunc: method is nil but Store.GetVote was just called")
	}
	callInfo := struct {
		Key  exported.PollKey
		Hash string
	}{
		Key:  key,
		Hash: hash,
	}
	mock.lockGetVote.Lock()
	mock.calls.GetVote = append(mock.calls.GetVote, callInfo)
	mock.lockGetVote.Unlock()
	return mock.GetVoteFunc(key, hash)
}

// GetVoteCalls gets all the calls that were made to GetVote.
// Check the length with:
//     len(mockedStore.GetVoteCalls())
func (mock *StoreMock) GetVoteCalls() []struct {
	Key  exported.PollKey
	Hash string
} {
	var calls []struct {
		Key  exported.PollKey
		Hash string
	}
	mock.lockGetVote.RLock()
	calls = mock.calls.GetVote
	mock.lockGetVote.RUnlock()
	return calls
}

// GetVotes calls GetVotesFunc.
func (mock *StoreMock) GetVotes(key exported.PollKey) []types.TalliedVote {
	if mock.GetVotesFunc == nil {
		panic("StoreMock.GetVotesFunc: method is nil but Store.GetVotes was just called")
	}
	callInfo := struct {
		Key exported.PollKey
	}{
		Key: key,
	}
	mock.lockGetVotes.Lock()
	mock.calls.GetVotes = append(mock.calls.GetVotes, callInfo)
	mock.lockGetVotes.Unlock()
	return mock.GetVotesFunc(key)
}

// GetVotesCalls gets all the calls that were made to GetVotes.
// Check the length with:
//     len(mockedStore.GetVotesCalls())
func (mock *StoreMock) GetVotesCalls() []struct {
	Key exported.PollKey
} {
	var calls []struct {
		Key exported.PollKey
	}
	mock.lockGetVotes.RLock()
	calls = mock.calls.GetVotes
	mock.lockGetVotes.RUnlock()
	return calls
}

// HasVoted calls HasVotedFunc.
func (mock *StoreMock) HasVoted(key exported.PollKey, voter github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
	if mock.HasVotedFunc == nil {
		panic("StoreMock.HasVotedFunc: method is nil but Store.HasVoted was just called")
	}
	callInfo := struct {
		Key   exported.PollKey
		Voter github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Key:   key,
		Voter: voter,
	}
	mock.lockHasVoted.Lock()
	mock.calls.HasVoted = append(mock.calls.HasVoted, callInfo)
	mock.lockHasVoted.Unlock()
	return mock.HasVotedFunc(key, voter)
}

// HasVotedCalls gets all the calls that were made to HasVoted.
// Check the length with:
//     len(mockedStore.HasVotedCalls())
func (mock *StoreMock) HasVotedCalls() []struct {
	Key   exported.PollKey
	Voter github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Key   exported.PollKey
		Voter github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockHasVoted.RLock()
	calls = mock.calls.HasVoted
	mock.lockHasVoted.RUnlock()
	return calls
}

// SetMetadata calls SetMetadataFunc.
func (mock *StoreMock) SetMetadata(metadata exported.PollMetadata) {
	if mock.SetMetadataFunc == nil {
		panic("StoreMock.SetMetadataFunc: method is nil but Store.SetMetadata was just called")
	}
	callInfo := struct {
		Metadata exported.PollMetadata
	}{
		Metadata: metadata,
	}
	mock.lockSetMetadata.Lock()
	mock.calls.SetMetadata = append(mock.calls.SetMetadata, callInfo)
	mock.lockSetMetadata.Unlock()
	mock.SetMetadataFunc(metadata)
}

// SetMetadataCalls gets all the calls that were made to SetMetadata.
// Check the length with:
//     len(mockedStore.SetMetadataCalls())
func (mock *StoreMock) SetMetadataCalls() []struct {
	Metadata exported.PollMetadata
} {
	var calls []struct {
		Metadata exported.PollMetadata
	}
	mock.lockSetMetadata.RLock()
	calls = mock.calls.SetMetadata
	mock.lockSetMetadata.RUnlock()
	return calls
}

// SetVote calls SetVoteFunc.
func (mock *StoreMock) SetVote(key exported.PollKey, vote types.TalliedVote) {
	if mock.SetVoteFunc == nil {
		panic("StoreMock.SetVoteFunc: method is nil but Store.SetVote was just called")
	}
	callInfo := struct {
		Key  exported.PollKey
		Vote types.TalliedVote
	}{
		Key:  key,
		Vote: vote,
	}
	mock.lockSetVote.Lock()
	mock.calls.SetVote = append(mock.calls.SetVote, callInfo)
	mock.lockSetVote.Unlock()
	mock.SetVoteFunc(key, vote)
}

// SetVoteCalls gets all the calls that were made to SetVote.
// Check the length with:
//     len(mockedStore.SetVoteCalls())
func (mock *StoreMock) SetVoteCalls() []struct {
	Key  exported.PollKey
	Vote types.TalliedVote
} {
	var calls []struct {
		Key  exported.PollKey
		Vote types.TalliedVote
	}
	mock.lockSetVote.RLock()
	calls = mock.calls.SetVote
	mock.lockSetVote.RUnlock()
	return calls
}

// SetVoted calls SetVotedFunc.
func (mock *StoreMock) SetVoted(key exported.PollKey, voter github_com_cosmos_cosmos_sdk_types.ValAddress) {
	if mock.SetVotedFunc == nil {
		panic("StoreMock.SetVotedFunc: method is nil but Store.SetVoted was just called")
	}
	callInfo := struct {
		Key   exported.PollKey
		Voter github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Key:   key,
		Voter: voter,
	}
	mock.lockSetVoted.Lock()
	mock.calls.SetVoted = append(mock.calls.SetVoted, callInfo)
	mock.lockSetVoted.Unlock()
	mock.SetVotedFunc(key, voter)
}

// SetVotedCalls gets all the calls that were made to SetVoted.
// Check the length with:
//     len(mockedStore.SetVotedCalls())
func (mock *StoreMock) SetVotedCalls() []struct {
	Key   exported.PollKey
	Voter github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Key   exported.PollKey
		Voter github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockSetVoted.RLock()
	calls = mock.calls.SetVoted
	mock.lockSetVoted.RUnlock()
	return calls
}
