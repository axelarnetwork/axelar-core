// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/axelarnetwork/axelar-core/x/vote/exported"
	"github.com/cosmos/cosmos-sdk/codec"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"sync"
)

// Ensure, that PollMock does implement exported.Poll.
// If this is not the case, regenerate this file with moq.
var _ exported.Poll = &PollMock{}

// PollMock is a mock implementation of exported.Poll.
//
// 	func TestSomethingThatUsesPoll(t *testing.T) {
//
// 		// make and configure a mocked exported.Poll
// 		mockedPoll := &PollMock{
// 			DeleteFunc: func()  {
// 				panic("mock out the Delete method")
// 			},
// 			GetMetadataFunc: func() exported.PollMetadata {
// 				panic("mock out the GetMetadata method")
// 			},
// 			InitializeFunc: func() error {
// 				panic("mock out the Initialize method")
// 			},
// 			IsFunc: func(state exported.PollState) bool {
// 				panic("mock out the Is method")
// 			},
// 			VoteFunc: func(voter sdk.ValAddress, data codec.ProtoMarshaler) error {
// 				panic("mock out the Vote method")
// 			},
// 		}
//
// 		// use mockedPoll in code that requires exported.Poll
// 		// and then make assertions.
//
// 	}
type PollMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func()

	// GetMetadataFunc mocks the GetMetadata method.
	GetMetadataFunc func() exported.PollMetadata

	// InitializeFunc mocks the Initialize method.
	InitializeFunc func() error

	// IsFunc mocks the Is method.
	IsFunc func(state exported.PollState) bool

	// VoteFunc mocks the Vote method.
	VoteFunc func(voter sdk.ValAddress, data codec.ProtoMarshaler) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
		}
		// GetMetadata holds details about calls to the GetMetadata method.
		GetMetadata []struct {
		}
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
		}
		// Is holds details about calls to the Is method.
		Is []struct {
			// State is the state argument value.
			State exported.PollState
		}
		// Vote holds details about calls to the Vote method.
		Vote []struct {
			// Voter is the voter argument value.
			Voter sdk.ValAddress
			// Data is the data argument value.
			Data codec.ProtoMarshaler
		}
	}
	lockDelete      sync.RWMutex
	lockGetMetadata sync.RWMutex
	lockInitialize  sync.RWMutex
	lockIs          sync.RWMutex
	lockVote        sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *PollMock) Delete() {
	if mock.DeleteFunc == nil {
		panic("PollMock.DeleteFunc: method is nil but Poll.Delete was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	mock.DeleteFunc()
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedPoll.DeleteCalls())
func (mock *PollMock) DeleteCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetMetadata calls GetMetadataFunc.
func (mock *PollMock) GetMetadata() exported.PollMetadata {
	if mock.GetMetadataFunc == nil {
		panic("PollMock.GetMetadataFunc: method is nil but Poll.GetMetadata was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMetadata.Lock()
	mock.calls.GetMetadata = append(mock.calls.GetMetadata, callInfo)
	mock.lockGetMetadata.Unlock()
	return mock.GetMetadataFunc()
}

// GetMetadataCalls gets all the calls that were made to GetMetadata.
// Check the length with:
//     len(mockedPoll.GetMetadataCalls())
func (mock *PollMock) GetMetadataCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMetadata.RLock()
	calls = mock.calls.GetMetadata
	mock.lockGetMetadata.RUnlock()
	return calls
}

// Initialize calls InitializeFunc.
func (mock *PollMock) Initialize() error {
	if mock.InitializeFunc == nil {
		panic("PollMock.InitializeFunc: method is nil but Poll.Initialize was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	mock.lockInitialize.Unlock()
	return mock.InitializeFunc()
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//     len(mockedPoll.InitializeCalls())
func (mock *PollMock) InitializeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInitialize.RLock()
	calls = mock.calls.Initialize
	mock.lockInitialize.RUnlock()
	return calls
}

// Is calls IsFunc.
func (mock *PollMock) Is(state exported.PollState) bool {
	if mock.IsFunc == nil {
		panic("PollMock.IsFunc: method is nil but Poll.Is was just called")
	}
	callInfo := struct {
		State exported.PollState
	}{
		State: state,
	}
	mock.lockIs.Lock()
	mock.calls.Is = append(mock.calls.Is, callInfo)
	mock.lockIs.Unlock()
	return mock.IsFunc(state)
}

// IsCalls gets all the calls that were made to Is.
// Check the length with:
//     len(mockedPoll.IsCalls())
func (mock *PollMock) IsCalls() []struct {
	State exported.PollState
} {
	var calls []struct {
		State exported.PollState
	}
	mock.lockIs.RLock()
	calls = mock.calls.Is
	mock.lockIs.RUnlock()
	return calls
}

// Vote calls VoteFunc.
func (mock *PollMock) Vote(voter sdk.ValAddress, data codec.ProtoMarshaler) error {
	if mock.VoteFunc == nil {
		panic("PollMock.VoteFunc: method is nil but Poll.Vote was just called")
	}
	callInfo := struct {
		Voter sdk.ValAddress
		Data  codec.ProtoMarshaler
	}{
		Voter: voter,
		Data:  data,
	}
	mock.lockVote.Lock()
	mock.calls.Vote = append(mock.calls.Vote, callInfo)
	mock.lockVote.Unlock()
	return mock.VoteFunc(voter, data)
}

// VoteCalls gets all the calls that were made to Vote.
// Check the length with:
//     len(mockedPoll.VoteCalls())
func (mock *PollMock) VoteCalls() []struct {
	Voter sdk.ValAddress
	Data  codec.ProtoMarshaler
} {
	var calls []struct {
		Voter sdk.ValAddress
		Data  codec.ProtoMarshaler
	}
	mock.lockVote.RLock()
	calls = mock.calls.Vote
	mock.lockVote.RUnlock()
	return calls
}
