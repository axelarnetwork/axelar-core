// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vote/exported/v1beta1/types.proto

package exported

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	_ "github.com/axelarnetwork/axelar-core/x/snapshot/exported"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PollState int32

const (
	// these enum values are used for bitwise operations, therefore they need to
	// be powers of 2
	NonExistent   PollState = 0
	Pending       PollState = 1
	Completed     PollState = 2
	Failed        PollState = 4
	Expired       PollState = 8
	AllowOverride PollState = 16
)

var PollState_name = map[int32]string{
	0:  "POLL_STATE_UNSPECIFIED",
	1:  "POLL_STATE_PENDING",
	2:  "POLL_STATE_COMPLETED",
	4:  "POLL_STATE_FAILED",
	8:  "POLL_STATE_EXPIRED",
	16: "POLL_STATE_ALLOW_OVERRIDE",
}

var PollState_value = map[string]int32{
	"POLL_STATE_UNSPECIFIED":    0,
	"POLL_STATE_PENDING":        1,
	"POLL_STATE_COMPLETED":      2,
	"POLL_STATE_FAILED":         4,
	"POLL_STATE_EXPIRED":        8,
	"POLL_STATE_ALLOW_OVERRIDE": 16,
}

func (x PollState) String() string {
	return proto.EnumName(PollState_name, int32(x))
}

func (PollState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d6b2e7e914c77d3b, []int{0}
}

// PollKey represents the key data for a poll
type PollKey struct {
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	ID     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PollKey) Reset()      { *m = PollKey{} }
func (*PollKey) ProtoMessage() {}
func (*PollKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6b2e7e914c77d3b, []int{0}
}
func (m *PollKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollKey.Merge(m, src)
}
func (m *PollKey) XXX_Size() int {
	return m.Size()
}
func (m *PollKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PollKey.DiscardUnknown(m)
}

var xxx_messageInfo_PollKey proto.InternalMessageInfo

type Voter struct {
	Validator   github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=validator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"validator,omitempty"`
	VotingPower int64                                         `protobuf:"varint,2,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *Voter) Reset()         { *m = Voter{} }
func (m *Voter) String() string { return proto.CompactTextString(m) }
func (*Voter) ProtoMessage()    {}
func (*Voter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6b2e7e914c77d3b, []int{1}
}
func (m *Voter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Voter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Voter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Voter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voter.Merge(m, src)
}
func (m *Voter) XXX_Size() int {
	return m.Size()
}
func (m *Voter) XXX_DiscardUnknown() {
	xxx_messageInfo_Voter.DiscardUnknown(m)
}

var xxx_messageInfo_Voter proto.InternalMessageInfo

// PollMetadata represents a poll with write-in voting, i.e. the result of the
// vote can have any data type
type PollMetadata struct {
	Key              PollKey                                `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	ExpiresAt        int64                                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Result           *types.Any                             `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	VotingThreshold  utils.Threshold                        `protobuf:"bytes,5,opt,name=voting_threshold,json=votingThreshold,proto3" json:"voting_threshold"`
	State            PollState                              `protobuf:"varint,6,opt,name=state,proto3,enum=vote.exported.v1beta1.PollState" json:"state,omitempty"`
	MinVoterCount    int64                                  `protobuf:"varint,7,opt,name=min_voter_count,json=minVoterCount,proto3" json:"min_voter_count,omitempty"`
	Voters           []Voter                                `protobuf:"bytes,8,rep,name=voters,proto3" json:"voters"`
	TotalVotingPower github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=total_voting_power,json=totalVotingPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_voting_power"`
	RewardPoolName   string                                 `protobuf:"bytes,10,opt,name=reward_pool_name,json=rewardPoolName,proto3" json:"reward_pool_name,omitempty"`
}

func (m *PollMetadata) Reset()         { *m = PollMetadata{} }
func (m *PollMetadata) String() string { return proto.CompactTextString(m) }
func (*PollMetadata) ProtoMessage()    {}
func (*PollMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6b2e7e914c77d3b, []int{2}
}
func (m *PollMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollMetadata.Merge(m, src)
}
func (m *PollMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PollMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PollMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PollMetadata proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("vote.exported.v1beta1.PollState", PollState_name, PollState_value)
	proto.RegisterType((*PollKey)(nil), "vote.exported.v1beta1.PollKey")
	proto.RegisterType((*Voter)(nil), "vote.exported.v1beta1.Voter")
	proto.RegisterType((*PollMetadata)(nil), "vote.exported.v1beta1.PollMetadata")
}

func init() { proto.RegisterFile("vote/exported/v1beta1/types.proto", fileDescriptor_d6b2e7e914c77d3b) }

var fileDescriptor_d6b2e7e914c77d3b = []byte{
	// 811 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x93, 0x34, 0x4d, 0x9b, 0x49, 0xbb, 0xf5, 0x8e, 0x4a, 0xe5, 0x8d, 0x58, 0x27, 0x2d,
	0xa2, 0x54, 0x8b, 0x6a, 0xd3, 0x82, 0xf6, 0xb0, 0x17, 0x94, 0x34, 0x2e, 0xb2, 0x48, 0x13, 0xcb,
	0x2d, 0x65, 0x85, 0x90, 0xac, 0x69, 0xe6, 0x91, 0x58, 0x9d, 0x78, 0xa2, 0xf1, 0x24, 0x4d, 0xc4,
	0x17, 0x40, 0x39, 0x71, 0xe4, 0x12, 0x09, 0x09, 0x0e, 0x9c, 0x38, 0xf1, 0x21, 0x2a, 0x4e, 0x7b,
	0x44, 0x1c, 0x2a, 0x68, 0xbf, 0x05, 0x27, 0xe4, 0xb1, 0xdb, 0x66, 0xd1, 0x52, 0xed, 0x29, 0x99,
	0x37, 0xbf, 0xf7, 0xde, 0xff, 0xcd, 0xff, 0x25, 0x68, 0x73, 0xc4, 0x25, 0x58, 0x30, 0x1e, 0x70,
	0x21, 0x81, 0x5a, 0xa3, 0xbd, 0x33, 0x90, 0x64, 0xcf, 0x92, 0x93, 0x01, 0x44, 0xe6, 0x40, 0x70,
	0xc9, 0xf1, 0x3b, 0x31, 0x62, 0xde, 0x22, 0x66, 0x8a, 0x94, 0xd7, 0xbb, 0xbc, 0xcb, 0x15, 0x61,
	0xc5, 0xdf, 0x12, 0xb8, 0xfc, 0xa4, 0xcb, 0x79, 0x97, 0x81, 0xa5, 0x4e, 0x67, 0xc3, 0x6f, 0x2c,
	0x12, 0x4e, 0xd2, 0xab, 0xa7, 0x43, 0x19, 0xb0, 0xe8, 0xbe, 0x45, 0x4f, 0x40, 0xd4, 0xe3, 0x8c,
	0xde, 0x66, 0x76, 0x78, 0xd4, 0xe7, 0x91, 0x9f, 0x94, 0x4c, 0x0e, 0xe9, 0xd5, 0xfb, 0x51, 0x48,
	0x06, 0x51, 0x8f, 0xcb, 0x07, 0x85, 0x6e, 0x7d, 0x8a, 0x96, 0x5c, 0xce, 0xd8, 0xe7, 0x30, 0xc1,
	0x1b, 0xa8, 0xd0, 0xe7, 0x74, 0xc8, 0x40, 0xcf, 0x56, 0xb3, 0x3b, 0x45, 0x2f, 0x3d, 0xe1, 0x0d,
	0x94, 0x0b, 0xa8, 0x9e, 0x8b, 0x63, 0xf5, 0xc2, 0xf5, 0x55, 0x25, 0xe7, 0x34, 0xbc, 0x5c, 0x40,
	0x5f, 0xe4, 0x7f, 0xf8, 0xb1, 0x92, 0xd9, 0xfa, 0x16, 0x2d, 0x9e, 0x72, 0x09, 0x02, 0xb7, 0x51,
	0x71, 0x44, 0x58, 0x40, 0x89, 0xe4, 0x42, 0x55, 0x58, 0xa9, 0xef, 0xfd, 0x73, 0x55, 0xd9, 0xed,
	0x06, 0xb2, 0x37, 0x3c, 0x33, 0x3b, 0xbc, 0x9f, 0x0a, 0x4c, 0x3f, 0x76, 0x23, 0x7a, 0x9e, 0x4a,
	0x39, 0x25, 0xac, 0x46, 0xa9, 0x80, 0x28, 0xf2, 0xee, 0x6b, 0xe0, 0x4d, 0xb4, 0x32, 0xe2, 0x32,
	0x08, 0xbb, 0xfe, 0x80, 0x5f, 0x80, 0x50, 0x0a, 0x16, 0xbc, 0x52, 0x12, 0x73, 0xe3, 0xd0, 0xd6,
	0xaf, 0x79, 0xb4, 0x12, 0xcb, 0x3f, 0x02, 0x49, 0x28, 0x91, 0x04, 0x3f, 0x47, 0x0b, 0xe7, 0x30,
	0x51, 0xed, 0x4b, 0xfb, 0x86, 0xf9, 0x46, 0x17, 0xcc, 0x74, 0xe0, 0x7a, 0xfe, 0xf2, 0xaa, 0x92,
	0xf1, 0xe2, 0x04, 0xfc, 0x14, 0x21, 0x18, 0x0f, 0x02, 0x01, 0x91, 0x4f, 0xa4, 0xbe, 0xa0, 0x3a,
	0x15, 0xd3, 0x48, 0x4d, 0xe2, 0x97, 0xa8, 0x20, 0x20, 0x1a, 0x32, 0xa9, 0xe7, 0x55, 0xe5, 0x75,
	0x33, 0xb1, 0xcc, 0xbc, 0xb5, 0xcc, 0xac, 0x85, 0x93, 0xfa, 0xb3, 0xdf, 0x7f, 0xdb, 0xdd, 0x7e,
	0xd3, 0xb8, 0x14, 0x3a, 0x96, 0x1b, 0x93, 0x47, 0x44, 0x44, 0x3d, 0xc2, 0x40, 0x78, 0x69, 0x3d,
	0xec, 0x20, 0x2d, 0x1d, 0xf2, 0xce, 0x5b, 0x7d, 0x51, 0xf5, 0xd0, 0x4d, 0xe5, 0xfd, 0x9d, 0xea,
	0x93, 0xdb, 0xfb, 0x54, 0xf7, 0x5a, 0x92, 0x77, 0x17, 0xc6, 0xcf, 0xd1, 0x62, 0x24, 0x89, 0x04,
	0xbd, 0x50, 0xcd, 0xee, 0x3c, 0xda, 0xaf, 0x3e, 0x30, 0xfd, 0x71, 0xcc, 0x79, 0x09, 0x8e, 0xb7,
	0xd1, 0x5a, 0x3f, 0x08, 0xfd, 0x98, 0x16, 0x7e, 0x87, 0x0f, 0x43, 0xa9, 0x2f, 0xa9, 0x07, 0x58,
	0xed, 0x07, 0xa1, 0xf2, 0xf6, 0x20, 0x0e, 0xe2, 0x17, 0xa8, 0xa0, 0x98, 0x48, 0x5f, 0xae, 0x2e,
	0xec, 0x94, 0xf6, 0xdf, 0xfd, 0x9f, 0x06, 0x2a, 0x25, 0x15, 0x99, 0x66, 0xe0, 0xaf, 0x11, 0x96,
	0x5c, 0x12, 0xe6, 0xbf, 0xe6, 0x68, 0x51, 0x6d, 0x89, 0x19, 0x93, 0x7f, 0x5e, 0x55, 0xb6, 0xdf,
	0x62, 0x53, 0x9c, 0x50, 0x7a, 0x9a, 0xaa, 0x74, 0x7a, 0xbf, 0x06, 0x78, 0x07, 0x69, 0x02, 0x2e,
	0x88, 0xa0, 0xfe, 0x80, 0x73, 0xe6, 0x87, 0xa4, 0x0f, 0x3a, 0x52, 0x3b, 0xfc, 0x28, 0x89, 0xbb,
	0x9c, 0xb3, 0x16, 0xe9, 0xc3, 0xb3, 0x69, 0x0e, 0x15, 0xef, 0x1e, 0x00, 0x7f, 0x88, 0x36, 0xdc,
	0x76, 0xb3, 0xe9, 0x1f, 0x9f, 0xd4, 0x4e, 0x6c, 0xff, 0x8b, 0xd6, 0xb1, 0x6b, 0x1f, 0x38, 0x87,
	0x8e, 0xdd, 0xd0, 0x32, 0xe5, 0xb5, 0xe9, 0xac, 0x5a, 0x6a, 0xf1, 0xd0, 0x1e, 0x07, 0x91, 0x84,
	0x50, 0xe2, 0xf7, 0x10, 0x9e, 0x83, 0x5d, 0xbb, 0xd5, 0x70, 0x5a, 0x9f, 0x69, 0xd9, 0x72, 0x69,
	0x3a, 0xab, 0x2e, 0xb9, 0x10, 0xd2, 0x20, 0xec, 0xe2, 0x0f, 0xd0, 0xfa, 0x1c, 0x74, 0xd0, 0x3e,
	0x72, 0x9b, 0xf6, 0x89, 0xdd, 0xd0, 0x72, 0xe5, 0xd5, 0xe9, 0xac, 0x5a, 0x3c, 0xe0, 0xfd, 0x01,
	0x03, 0x09, 0x14, 0x6f, 0xa2, 0xc7, 0x73, 0xe0, 0x61, 0xcd, 0x69, 0xda, 0x0d, 0x2d, 0x5f, 0x46,
	0xd3, 0x59, 0xb5, 0x70, 0x48, 0x02, 0x06, 0xf4, 0x3f, 0x0d, 0xed, 0x97, 0xae, 0xe3, 0xd9, 0x0d,
	0x6d, 0x39, 0x69, 0x68, 0xab, 0xdd, 0xa4, 0xf8, 0x23, 0xf4, 0x64, 0x0e, 0xaa, 0x35, 0x9b, 0xed,
	0x2f, 0xfd, 0xf6, 0xa9, 0xed, 0x79, 0x4e, 0xc3, 0xd6, 0xb4, 0xf2, 0xe3, 0xe9, 0xac, 0xba, 0x5a,
	0x63, 0x8c, 0x5f, 0xb4, 0x47, 0x20, 0x44, 0x40, 0xa1, 0xbc, 0xfc, 0xdd, 0x4f, 0x46, 0xe6, 0x97,
	0x9f, 0x8d, 0x6c, 0xdd, 0xbb, 0xfc, 0xdb, 0xc8, 0x5c, 0x5e, 0x1b, 0xd9, 0x57, 0xd7, 0x46, 0xf6,
	0xaf, 0x6b, 0x23, 0xfb, 0xfd, 0x8d, 0x91, 0x79, 0x75, 0x63, 0x64, 0xfe, 0xb8, 0x31, 0x32, 0x5f,
	0x7d, 0x32, 0x67, 0x07, 0x19, 0x03, 0x23, 0x22, 0x04, 0x79, 0xc1, 0xc5, 0x79, 0x7a, 0xda, 0xed,
	0x70, 0x01, 0xd6, 0xd8, 0x7a, 0xed, 0xcf, 0xf0, 0xac, 0xa0, 0x7e, 0x11, 0x1f, 0xff, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x8d, 0x45, 0xa2, 0x21, 0x24, 0x05, 0x00, 0x00,
}

func (m *PollKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Voter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Voter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Voter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPoolName) > 0 {
		i -= len(m.RewardPoolName)
		copy(dAtA[i:], m.RewardPoolName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardPoolName)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.TotalVotingPower.Size()
		i -= size
		if _, err := m.TotalVotingPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.MinVoterCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinVoterCount))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.VotingThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PollKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Voter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VotingPower != 0 {
		n += 1 + sovTypes(uint64(m.VotingPower))
	}
	return n
}

func (m *PollMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ExpiresAt != 0 {
		n += 1 + sovTypes(uint64(m.ExpiresAt))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.VotingThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	if m.MinVoterCount != 0 {
		n += 1 + sovTypes(uint64(m.MinVoterCount))
	}
	if len(m.Voters) > 0 {
		for _, e := range m.Voters {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.TotalVotingPower.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.RewardPoolName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PollKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Voter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator[:0], dAtA[iNdEx:postIndex]...)
			if m.Validator == nil {
				m.Validator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Any{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotingThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PollState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVoterCount", wireType)
			}
			m.MinVoterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVoterCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, Voter{})
			if err := m.Voters[len(m.Voters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalVotingPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
