// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/tss/exported/v1beta1/types.proto

package exported

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyRole int32

const (
	Unknown      KeyRole = 0
	MasterKey    KeyRole = 1
	SecondaryKey KeyRole = 2
	ExternalKey  KeyRole = 3
)

var KeyRole_name = map[int32]string{
	0: "KEY_ROLE_UNSPECIFIED",
	1: "KEY_ROLE_MASTER_KEY",
	2: "KEY_ROLE_SECONDARY_KEY",
	3: "KEY_ROLE_EXTERNAL_KEY",
}

var KeyRole_value = map[string]int32{
	"KEY_ROLE_UNSPECIFIED":   0,
	"KEY_ROLE_MASTER_KEY":    1,
	"KEY_ROLE_SECONDARY_KEY": 2,
	"KEY_ROLE_EXTERNAL_KEY":  3,
}

func (x KeyRole) String() string {
	return proto.EnumName(KeyRole_name, int32(x))
}

func (KeyRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{0}
}

type KeyShareDistributionPolicy int32

const (
	Unspecified     KeyShareDistributionPolicy = 0
	WeightedByStake KeyShareDistributionPolicy = 1
	OnePerValidator KeyShareDistributionPolicy = 2
)

var KeyShareDistributionPolicy_name = map[int32]string{
	0: "KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED",
	1: "KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE",
	2: "KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR",
}

var KeyShareDistributionPolicy_value = map[string]int32{
	"KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED":       0,
	"KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE": 1,
	"KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR": 2,
}

func (x KeyShareDistributionPolicy) String() string {
	return proto.EnumName(KeyShareDistributionPolicy_name, int32(x))
}

func (KeyShareDistributionPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{1}
}

type AckType int32

const (
	AckType_Unspecified AckType = 0
	AckType_Keygen      AckType = 1
	AckType_Sign        AckType = 2
)

var AckType_name = map[int32]string{
	0: "ACK_TYPE_UNSPECIFIED",
	1: "ACK_TYPE_KEYGEN",
	2: "ACK_TYPE_SIGN",
}

var AckType_value = map[string]int32{
	"ACK_TYPE_UNSPECIFIED": 0,
	"ACK_TYPE_KEYGEN":      1,
	"ACK_TYPE_SIGN":        2,
}

func (x AckType) String() string {
	return proto.EnumName(AckType_name, int32(x))
}

func (AckType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{2}
}

type SigStatus int32

const (
	SigStatus_Unspecified SigStatus = 0
	SigStatus_Queued      SigStatus = 1
	SigStatus_Signing     SigStatus = 2
	SigStatus_Signed      SigStatus = 3
	SigStatus_Aborted     SigStatus = 4
	SigStatus_Invalid     SigStatus = 5
)

var SigStatus_name = map[int32]string{
	0: "SIG_STATUS_UNSPECIFIED",
	1: "SIG_STATUS_QUEUED",
	2: "SIG_STATUS_SIGNING",
	3: "SIG_STATUS_SIGNED",
	4: "SIG_STATUS_ABORTED",
	5: "SIG_STATUS_INVALID",
}

var SigStatus_value = map[string]int32{
	"SIG_STATUS_UNSPECIFIED": 0,
	"SIG_STATUS_QUEUED":      1,
	"SIG_STATUS_SIGNING":     2,
	"SIG_STATUS_SIGNED":      3,
	"SIG_STATUS_ABORTED":     4,
	"SIG_STATUS_INVALID":     5,
}

func (x SigStatus) String() string {
	return proto.EnumName(SigStatus_name, int32(x))
}

func (SigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{3}
}

type KeyType int32

const (
	KEY_TYPE_UNSPECIFIED KeyType = 0
	None                 KeyType = 1
	Threshold            KeyType = 2
	Multisig             KeyType = 3
)

var KeyType_name = map[int32]string{
	0: "KEY_TYPE_UNSPECIFIED",
	1: "KEY_TYPE_NONE",
	2: "KEY_TYPE_THRESHOLD",
	3: "KEY_TYPE_MULTISIG",
}

var KeyType_value = map[string]int32{
	"KEY_TYPE_UNSPECIFIED": 0,
	"KEY_TYPE_NONE":        1,
	"KEY_TYPE_THRESHOLD":   2,
	"KEY_TYPE_MULTISIG":    3,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{4}
}

// KeyRequirement defines requirements for keys
type KeyRequirement struct {
	KeyRole                    KeyRole                    `protobuf:"varint,1,opt,name=key_role,json=keyRole,proto3,enum=axelar.tss.exported.v1beta1.KeyRole" json:"key_role,omitempty"`
	KeyType                    KeyType                    `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=axelar.tss.exported.v1beta1.KeyType" json:"key_type,omitempty"`
	MinKeygenThreshold         utils.Threshold            `protobuf:"bytes,3,opt,name=min_keygen_threshold,json=minKeygenThreshold,proto3" json:"min_keygen_threshold"`
	SafetyThreshold            utils.Threshold            `protobuf:"bytes,4,opt,name=safety_threshold,json=safetyThreshold,proto3" json:"safety_threshold"`
	KeyShareDistributionPolicy KeyShareDistributionPolicy `protobuf:"varint,5,opt,name=key_share_distribution_policy,json=keyShareDistributionPolicy,proto3,enum=axelar.tss.exported.v1beta1.KeyShareDistributionPolicy" json:"key_share_distribution_policy,omitempty"`
	MaxTotalShareCount         int64                      `protobuf:"varint,6,opt,name=max_total_share_count,json=maxTotalShareCount,proto3" json:"max_total_share_count,omitempty"`
	MinTotalShareCount         int64                      `protobuf:"varint,7,opt,name=min_total_share_count,json=minTotalShareCount,proto3" json:"min_total_share_count,omitempty"`
	KeygenVotingThreshold      utils.Threshold            `protobuf:"bytes,8,opt,name=keygen_voting_threshold,json=keygenVotingThreshold,proto3" json:"keygen_voting_threshold"`
	SignVotingThreshold        utils.Threshold            `protobuf:"bytes,9,opt,name=sign_voting_threshold,json=signVotingThreshold,proto3" json:"sign_voting_threshold"`
	KeygenTimeout              int64                      `protobuf:"varint,10,opt,name=keygen_timeout,json=keygenTimeout,proto3" json:"keygen_timeout,omitempty"`
	SignTimeout                int64                      `protobuf:"varint,11,opt,name=sign_timeout,json=signTimeout,proto3" json:"sign_timeout,omitempty"`
}

func (m *KeyRequirement) Reset()         { *m = KeyRequirement{} }
func (m *KeyRequirement) String() string { return proto.CompactTextString(m) }
func (*KeyRequirement) ProtoMessage()    {}
func (*KeyRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{0}
}
func (m *KeyRequirement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyRequirement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyRequirement.Merge(m, src)
}
func (m *KeyRequirement) XXX_Size() int {
	return m.Size()
}
func (m *KeyRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_KeyRequirement proto.InternalMessageInfo

func (m *KeyRequirement) GetKeyRole() KeyRole {
	if m != nil {
		return m.KeyRole
	}
	return Unknown
}

func (m *KeyRequirement) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KEY_TYPE_UNSPECIFIED
}

func (m *KeyRequirement) GetMinKeygenThreshold() utils.Threshold {
	if m != nil {
		return m.MinKeygenThreshold
	}
	return utils.Threshold{}
}

func (m *KeyRequirement) GetSafetyThreshold() utils.Threshold {
	if m != nil {
		return m.SafetyThreshold
	}
	return utils.Threshold{}
}

func (m *KeyRequirement) GetKeyShareDistributionPolicy() KeyShareDistributionPolicy {
	if m != nil {
		return m.KeyShareDistributionPolicy
	}
	return Unspecified
}

func (m *KeyRequirement) GetMaxTotalShareCount() int64 {
	if m != nil {
		return m.MaxTotalShareCount
	}
	return 0
}

func (m *KeyRequirement) GetMinTotalShareCount() int64 {
	if m != nil {
		return m.MinTotalShareCount
	}
	return 0
}

func (m *KeyRequirement) GetKeygenVotingThreshold() utils.Threshold {
	if m != nil {
		return m.KeygenVotingThreshold
	}
	return utils.Threshold{}
}

func (m *KeyRequirement) GetSignVotingThreshold() utils.Threshold {
	if m != nil {
		return m.SignVotingThreshold
	}
	return utils.Threshold{}
}

func (m *KeyRequirement) GetKeygenTimeout() int64 {
	if m != nil {
		return m.KeygenTimeout
	}
	return 0
}

func (m *KeyRequirement) GetSignTimeout() int64 {
	if m != nil {
		return m.SignTimeout
	}
	return 0
}

// SignInfo holds information about a sign request
type SignInfo struct {
	KeyID           KeyID  `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3,casttype=KeyID" json:"key_id,omitempty"`
	SigID           string `protobuf:"bytes,2,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
	Msg             []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	SnapshotCounter int64  `protobuf:"varint,4,opt,name=snapshot_counter,json=snapshotCounter,proto3" json:"snapshot_counter,omitempty"`
	RequestModule   string `protobuf:"bytes,5,opt,name=request_module,json=requestModule,proto3" json:"request_module,omitempty"`
	Metadata        string `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SignInfo) Reset()         { *m = SignInfo{} }
func (m *SignInfo) String() string { return proto.CompactTextString(m) }
func (*SignInfo) ProtoMessage()    {}
func (*SignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{1}
}
func (m *SignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInfo.Merge(m, src)
}
func (m *SignInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignInfo proto.InternalMessageInfo

func (m *SignInfo) GetKeyID() KeyID {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *SignInfo) GetSigID() string {
	if m != nil {
		return m.SigID
	}
	return ""
}

func (m *SignInfo) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *SignInfo) GetSnapshotCounter() int64 {
	if m != nil {
		return m.SnapshotCounter
	}
	return 0
}

func (m *SignInfo) GetRequestModule() string {
	if m != nil {
		return m.RequestModule
	}
	return ""
}

func (m *SignInfo) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// PubKeyInfo holds a pubkey and a signature
type SigKeyPair struct {
	PubKey    []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SigKeyPair) Reset()         { *m = SigKeyPair{} }
func (m *SigKeyPair) String() string { return proto.CompactTextString(m) }
func (*SigKeyPair) ProtoMessage()    {}
func (*SigKeyPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{2}
}
func (m *SigKeyPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigKeyPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigKeyPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigKeyPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigKeyPair.Merge(m, src)
}
func (m *SigKeyPair) XXX_Size() int {
	return m.Size()
}
func (m *SigKeyPair) XXX_DiscardUnknown() {
	xxx_messageInfo_SigKeyPair.DiscardUnknown(m)
}

var xxx_messageInfo_SigKeyPair proto.InternalMessageInfo

func (m *SigKeyPair) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SigKeyPair) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Signature holds public key and ECDSA signature
type Signature struct {
	SigID string `protobuf:"bytes,1,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
	// Types that are valid to be assigned to Sig:
	//	*Signature_SingleSig_
	//	*Signature_MultiSig_
	Sig       isSignature_Sig `protobuf_oneof:"sig"`
	SigStatus SigStatus       `protobuf:"varint,4,opt,name=sig_status,json=sigStatus,proto3,enum=axelar.tss.exported.v1beta1.SigStatus" json:"sig_status,omitempty"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{3}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

type isSignature_Sig interface {
	isSignature_Sig()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Signature_SingleSig_ struct {
	SingleSig *Signature_SingleSig `protobuf:"bytes,2,opt,name=single_sig,json=singleSig,proto3,oneof" json:"single_sig,omitempty"`
}
type Signature_MultiSig_ struct {
	MultiSig *Signature_MultiSig `protobuf:"bytes,3,opt,name=multi_sig,json=multiSig,proto3,oneof" json:"multi_sig,omitempty"`
}

func (*Signature_SingleSig_) isSignature_Sig() {}
func (*Signature_MultiSig_) isSignature_Sig()  {}

func (m *Signature) GetSig() isSignature_Sig {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Signature) GetSigID() string {
	if m != nil {
		return m.SigID
	}
	return ""
}

func (m *Signature) GetSingleSig() *Signature_SingleSig {
	if x, ok := m.GetSig().(*Signature_SingleSig_); ok {
		return x.SingleSig
	}
	return nil
}

func (m *Signature) GetMultiSig() *Signature_MultiSig {
	if x, ok := m.GetSig().(*Signature_MultiSig_); ok {
		return x.MultiSig
	}
	return nil
}

func (m *Signature) GetSigStatus() SigStatus {
	if m != nil {
		return m.SigStatus
	}
	return SigStatus_Unspecified
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Signature) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Signature_SingleSig_)(nil),
		(*Signature_MultiSig_)(nil),
	}
}

type Signature_SingleSig struct {
	SigKeyPair SigKeyPair `protobuf:"bytes,1,opt,name=sig_key_pair,json=sigKeyPair,proto3" json:"sig_key_pair"`
}

func (m *Signature_SingleSig) Reset()         { *m = Signature_SingleSig{} }
func (m *Signature_SingleSig) String() string { return proto.CompactTextString(m) }
func (*Signature_SingleSig) ProtoMessage()    {}
func (*Signature_SingleSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{3, 0}
}
func (m *Signature_SingleSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature_SingleSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature_SingleSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature_SingleSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature_SingleSig.Merge(m, src)
}
func (m *Signature_SingleSig) XXX_Size() int {
	return m.Size()
}
func (m *Signature_SingleSig) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature_SingleSig.DiscardUnknown(m)
}

var xxx_messageInfo_Signature_SingleSig proto.InternalMessageInfo

func (m *Signature_SingleSig) GetSigKeyPair() SigKeyPair {
	if m != nil {
		return m.SigKeyPair
	}
	return SigKeyPair{}
}

type Signature_MultiSig struct {
	SigKeyPairs []SigKeyPair `protobuf:"bytes,1,rep,name=sig_key_pairs,json=sigKeyPairs,proto3" json:"sig_key_pairs"`
}

func (m *Signature_MultiSig) Reset()         { *m = Signature_MultiSig{} }
func (m *Signature_MultiSig) String() string { return proto.CompactTextString(m) }
func (*Signature_MultiSig) ProtoMessage()    {}
func (*Signature_MultiSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{3, 1}
}
func (m *Signature_MultiSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature_MultiSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature_MultiSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature_MultiSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature_MultiSig.Merge(m, src)
}
func (m *Signature_MultiSig) XXX_Size() int {
	return m.Size()
}
func (m *Signature_MultiSig) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature_MultiSig.DiscardUnknown(m)
}

var xxx_messageInfo_Signature_MultiSig proto.InternalMessageInfo

func (m *Signature_MultiSig) GetSigKeyPairs() []SigKeyPair {
	if m != nil {
		return m.SigKeyPairs
	}
	return nil
}

type Key struct {
	ID   KeyID   `protobuf:"bytes,1,opt,name=id,proto3,casttype=KeyID" json:"id,omitempty"`
	Role KeyRole `protobuf:"varint,2,opt,name=role,proto3,enum=axelar.tss.exported.v1beta1.KeyRole" json:"role,omitempty"`
	Type KeyType `protobuf:"varint,3,opt,name=type,proto3,enum=axelar.tss.exported.v1beta1.KeyType" json:"type,omitempty"`
	// Types that are valid to be assigned to PublicKey:
	//	*Key_ECDSAKey_
	//	*Key_MultisigKey_
	PublicKey       isKey_PublicKey `protobuf_oneof:"public_key"`
	RotatedAt       *time.Time      `protobuf:"bytes,6,opt,name=rotated_at,json=rotatedAt,proto3,stdtime" json:"rotated_at,omitempty"`
	RotationCount   int64           `protobuf:"varint,7,opt,name=rotation_count,json=rotationCount,proto3" json:"rotation_count,omitempty"`
	Chain           string          `protobuf:"bytes,8,opt,name=chain,proto3" json:"chain,omitempty"`
	SnapshotCounter int64           `protobuf:"varint,9,opt,name=snapshot_counter,json=snapshotCounter,proto3" json:"snapshot_counter,omitempty"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{4}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

type isKey_PublicKey interface {
	isKey_PublicKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Key_ECDSAKey_ struct {
	ECDSAKey *Key_ECDSAKey `protobuf:"bytes,4,opt,name=ecdsa_key,json=ecdsaKey,proto3,oneof" json:"ecdsa_key,omitempty"`
}
type Key_MultisigKey_ struct {
	MultisigKey *Key_MultisigKey `protobuf:"bytes,5,opt,name=multisig_key,json=multisigKey,proto3,oneof" json:"multisig_key,omitempty"`
}

func (*Key_ECDSAKey_) isKey_PublicKey()    {}
func (*Key_MultisigKey_) isKey_PublicKey() {}

func (m *Key) GetPublicKey() isKey_PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Key) GetID() KeyID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Key) GetRole() KeyRole {
	if m != nil {
		return m.Role
	}
	return Unknown
}

func (m *Key) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return KEY_TYPE_UNSPECIFIED
}

func (m *Key) GetECDSAKey() *Key_ECDSAKey {
	if x, ok := m.GetPublicKey().(*Key_ECDSAKey_); ok {
		return x.ECDSAKey
	}
	return nil
}

func (m *Key) GetMultisigKey() *Key_MultisigKey {
	if x, ok := m.GetPublicKey().(*Key_MultisigKey_); ok {
		return x.MultisigKey
	}
	return nil
}

func (m *Key) GetRotatedAt() *time.Time {
	if m != nil {
		return m.RotatedAt
	}
	return nil
}

func (m *Key) GetRotationCount() int64 {
	if m != nil {
		return m.RotationCount
	}
	return 0
}

func (m *Key) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Key) GetSnapshotCounter() int64 {
	if m != nil {
		return m.SnapshotCounter
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Key) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Key_ECDSAKey_)(nil),
		(*Key_MultisigKey_)(nil),
	}
}

type Key_ECDSAKey struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Key_ECDSAKey) Reset()         { *m = Key_ECDSAKey{} }
func (m *Key_ECDSAKey) String() string { return proto.CompactTextString(m) }
func (*Key_ECDSAKey) ProtoMessage()    {}
func (*Key_ECDSAKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{4, 0}
}
func (m *Key_ECDSAKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key_ECDSAKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key_ECDSAKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Key_ECDSAKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key_ECDSAKey.Merge(m, src)
}
func (m *Key_ECDSAKey) XXX_Size() int {
	return m.Size()
}
func (m *Key_ECDSAKey) XXX_DiscardUnknown() {
	xxx_messageInfo_Key_ECDSAKey.DiscardUnknown(m)
}

var xxx_messageInfo_Key_ECDSAKey proto.InternalMessageInfo

func (m *Key_ECDSAKey) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Key_MultisigKey struct {
	Values    [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Threshold int64    `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *Key_MultisigKey) Reset()         { *m = Key_MultisigKey{} }
func (m *Key_MultisigKey) String() string { return proto.CompactTextString(m) }
func (*Key_MultisigKey) ProtoMessage()    {}
func (*Key_MultisigKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac52734c3fd8f67, []int{4, 1}
}
func (m *Key_MultisigKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key_MultisigKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key_MultisigKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Key_MultisigKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key_MultisigKey.Merge(m, src)
}
func (m *Key_MultisigKey) XXX_Size() int {
	return m.Size()
}
func (m *Key_MultisigKey) XXX_DiscardUnknown() {
	xxx_messageInfo_Key_MultisigKey.DiscardUnknown(m)
}

var xxx_messageInfo_Key_MultisigKey proto.InternalMessageInfo

func (m *Key_MultisigKey) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Key_MultisigKey) GetThreshold() int64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func init() {
	proto.RegisterEnum("axelar.tss.exported.v1beta1.KeyRole", KeyRole_name, KeyRole_value)
	proto.RegisterEnum("axelar.tss.exported.v1beta1.KeyShareDistributionPolicy", KeyShareDistributionPolicy_name, KeyShareDistributionPolicy_value)
	proto.RegisterEnum("axelar.tss.exported.v1beta1.AckType", AckType_name, AckType_value)
	proto.RegisterEnum("axelar.tss.exported.v1beta1.SigStatus", SigStatus_name, SigStatus_value)
	proto.RegisterEnum("axelar.tss.exported.v1beta1.KeyType", KeyType_name, KeyType_value)
	proto.RegisterType((*KeyRequirement)(nil), "axelar.tss.exported.v1beta1.KeyRequirement")
	proto.RegisterType((*SignInfo)(nil), "axelar.tss.exported.v1beta1.SignInfo")
	proto.RegisterType((*SigKeyPair)(nil), "axelar.tss.exported.v1beta1.SigKeyPair")
	proto.RegisterType((*Signature)(nil), "axelar.tss.exported.v1beta1.Signature")
	proto.RegisterType((*Signature_SingleSig)(nil), "axelar.tss.exported.v1beta1.Signature.SingleSig")
	proto.RegisterType((*Signature_MultiSig)(nil), "axelar.tss.exported.v1beta1.Signature.MultiSig")
	proto.RegisterType((*Key)(nil), "axelar.tss.exported.v1beta1.Key")
	proto.RegisterType((*Key_ECDSAKey)(nil), "axelar.tss.exported.v1beta1.Key.ECDSAKey")
	proto.RegisterType((*Key_MultisigKey)(nil), "axelar.tss.exported.v1beta1.Key.MultisigKey")
}

func init() {
	proto.RegisterFile("axelar/tss/exported/v1beta1/types.proto", fileDescriptor_aac52734c3fd8f67)
}

var fileDescriptor_aac52734c3fd8f67 = []byte{
	// 1543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcd, 0x6e, 0xdb, 0xca,
	0x15, 0x36, 0x25, 0x5b, 0x96, 0x46, 0xb2, 0xcd, 0x3b, 0xb1, 0x73, 0x05, 0xde, 0x56, 0xd2, 0xf5,
	0xfd, 0x8b, 0xd3, 0x5b, 0xa9, 0x71, 0x16, 0xed, 0xaa, 0x81, 0x7e, 0x58, 0x9b, 0x90, 0x2d, 0xc9,
	0x24, 0xe5, 0x54, 0x45, 0x03, 0x82, 0x12, 0xc7, 0xf4, 0x40, 0x12, 0xa9, 0x90, 0x43, 0xc7, 0x2a,
	0xfa, 0x00, 0x85, 0x56, 0x59, 0x75, 0xa7, 0x55, 0xba, 0xe8, 0x43, 0xf4, 0x01, 0xb2, 0xcc, 0xae,
	0x05, 0x0a, 0xb8, 0x85, 0xfd, 0x10, 0x05, 0xb2, 0x2a, 0x66, 0x86, 0x94, 0x74, 0x1d, 0x27, 0x8a,
	0x77, 0x73, 0xce, 0x7c, 0xe7, 0xe3, 0x39, 0xdf, 0x9c, 0x39, 0x23, 0x81, 0x1f, 0xcc, 0x4b, 0x34,
	0x30, 0xbd, 0x12, 0xf1, 0xfd, 0x12, 0xba, 0x1c, 0xb9, 0x1e, 0x41, 0x56, 0xe9, 0xe2, 0x49, 0x17,
	0x11, 0xf3, 0x49, 0x89, 0x8c, 0x47, 0xc8, 0x2f, 0x8e, 0x3c, 0x97, 0xb8, 0xf0, 0x2b, 0x0e, 0x2c,
	0x12, 0xdf, 0x2f, 0x46, 0xc0, 0x62, 0x08, 0x94, 0xbe, 0x0d, 0x59, 0x02, 0x82, 0x07, 0xfe, 0x3c,
	0xfc, 0xdc, 0x43, 0xfe, 0xb9, 0x3b, 0xb0, 0x38, 0x85, 0xb4, 0x6d, 0xbb, 0xb6, 0xcb, 0x96, 0x25,
	0xba, 0x0a, 0xbd, 0x79, 0xdb, 0x75, 0xed, 0x01, 0x2a, 0x31, 0xab, 0x1b, 0x9c, 0x95, 0x08, 0x1e,
	0x22, 0x9f, 0x98, 0xc3, 0x11, 0x07, 0xec, 0xbe, 0x49, 0x80, 0xcd, 0x3a, 0x1a, 0xab, 0xe8, 0x65,
	0x80, 0x3d, 0x34, 0x44, 0x0e, 0x81, 0xcf, 0x40, 0xb2, 0x8f, 0xc6, 0x86, 0xe7, 0x0e, 0x50, 0x56,
	0x28, 0x08, 0x8f, 0x36, 0xf7, 0xbf, 0x2d, 0x7e, 0x22, 0xbf, 0x22, 0x0d, 0x77, 0x07, 0x48, 0x5d,
	0xef, 0xf3, 0x45, 0x44, 0x40, 0x0b, 0xcc, 0xc6, 0x3e, 0x8f, 0x40, 0x1f, 0x8f, 0x38, 0x01, 0x5d,
	0xc0, 0xe7, 0x60, 0x7b, 0x88, 0x1d, 0xa3, 0x8f, 0xc6, 0x36, 0x72, 0x8c, 0x59, 0xa5, 0xd9, 0x78,
	0x41, 0x78, 0x94, 0xde, 0xcf, 0x47, 0x64, 0x4c, 0x90, 0x19, 0x8b, 0x1e, 0xc1, 0x2a, 0xab, 0x6f,
	0xaf, 0xf2, 0x2b, 0x2a, 0x1c, 0x62, 0xa7, 0xce, 0x18, 0x66, 0x3b, 0xb0, 0x05, 0x44, 0xdf, 0x3c,
	0x43, 0x64, 0xbc, 0x40, 0xba, 0x7a, 0x1f, 0xd2, 0x2d, 0x1e, 0x3e, 0x67, 0xfc, 0x13, 0xf8, 0x39,
	0xad, 0xd5, 0x3f, 0x37, 0x3d, 0x64, 0x58, 0xd8, 0x27, 0x1e, 0xee, 0x06, 0x04, 0xbb, 0x8e, 0x31,
	0x72, 0x07, 0xb8, 0x37, 0xce, 0xae, 0x31, 0x01, 0x7e, 0xbd, 0x4c, 0x00, 0x8d, 0x12, 0xd4, 0x16,
	0xe2, 0x5b, 0x2c, 0x5c, 0x95, 0xfa, 0x1f, 0xdd, 0x83, 0x4f, 0xc0, 0xce, 0xd0, 0xbc, 0x34, 0x88,
	0x4b, 0xcc, 0x41, 0x98, 0x41, 0xcf, 0x0d, 0x1c, 0x92, 0x4d, 0x14, 0x84, 0x47, 0x71, 0x15, 0x0e,
	0xcd, 0x4b, 0x9d, 0xee, 0xb1, 0xf8, 0x2a, 0xdd, 0x61, 0x21, 0xd8, 0xb9, 0x23, 0x64, 0x3d, 0x0c,
	0xc1, 0xce, 0xed, 0x90, 0x17, 0xe0, 0xcb, 0xf0, 0x20, 0x2e, 0x5c, 0x82, 0x1d, 0x7b, 0x41, 0xba,
	0xe4, 0x7d, 0xa4, 0xdb, 0xe1, 0x2c, 0xa7, 0x8c, 0x64, 0x2e, 0x60, 0x07, 0xec, 0xf8, 0xd8, 0xbe,
	0x83, 0x3c, 0x75, 0x1f, 0xf2, 0x07, 0x94, 0xe3, 0x36, 0xf5, 0x77, 0x60, 0x33, 0x6a, 0x21, 0x3c,
	0x44, 0x6e, 0x40, 0xb2, 0x80, 0x55, 0xb9, 0xc1, 0xbd, 0x3a, 0x77, 0xc2, 0xaf, 0x41, 0x86, 0x65,
	0x10, 0x81, 0xd2, 0x0c, 0x94, 0xa6, 0xbe, 0x10, 0xb2, 0xfb, 0x4f, 0x01, 0x24, 0x35, 0x6c, 0x3b,
	0x8a, 0x73, 0xe6, 0xc2, 0x3d, 0x90, 0xa0, 0x47, 0x8e, 0x2d, 0x76, 0x3b, 0x52, 0x15, 0x78, 0x7d,
	0x95, 0x5f, 0xab, 0xa3, 0xb1, 0x52, 0x7b, 0x1f, 0x2d, 0xd4, 0xb5, 0x3e, 0x1a, 0x2b, 0x16, 0x2c,
	0x80, 0x84, 0x8f, 0x6d, 0x0a, 0x8d, 0x31, 0x68, 0x8a, 0x42, 0x35, 0x6c, 0x53, 0x84, 0x8f, 0x6d,
	0xc5, 0x82, 0x22, 0x88, 0x0f, 0x7d, 0x9b, 0x75, 0x76, 0x46, 0xa5, 0x4b, 0xb8, 0x07, 0x44, 0xdf,
	0x31, 0x47, 0xfe, 0xb9, 0x4b, 0xf8, 0xd9, 0x20, 0x8f, 0xf5, 0x68, 0x5c, 0xdd, 0x8a, 0xfc, 0x55,
	0xee, 0xa6, 0x05, 0x7a, 0xe8, 0x65, 0x80, 0x7c, 0x62, 0x0c, 0x5d, 0x2b, 0x18, 0x20, 0xd6, 0x6d,
	0x29, 0x75, 0x23, 0xf4, 0x1e, 0x33, 0x27, 0x94, 0x40, 0x72, 0x88, 0x88, 0x69, 0x99, 0xc4, 0x64,
	0xad, 0x91, 0x52, 0x67, 0xf6, 0x6e, 0x15, 0x00, 0x0d, 0xdb, 0x75, 0x34, 0x6e, 0x99, 0xd8, 0x83,
	0x5f, 0x82, 0xf5, 0x51, 0xd0, 0xa5, 0x17, 0x8f, 0xd5, 0x96, 0x51, 0x13, 0xa3, 0xa0, 0x5b, 0x47,
	0x63, 0xf8, 0x33, 0x90, 0xa2, 0x7a, 0x98, 0x24, 0xf0, 0xf8, 0x9d, 0xce, 0xa8, 0x73, 0xc7, 0xee,
	0xbf, 0xe3, 0x20, 0xa5, 0x45, 0xd6, 0x42, 0xd1, 0xc2, 0x47, 0x8a, 0x3e, 0x01, 0xc0, 0xc7, 0x8e,
	0x3d, 0x40, 0x86, 0x8f, 0x6d, 0x46, 0x97, 0xde, 0xff, 0xd5, 0x27, 0x6f, 0xc8, 0x8c, 0xbd, 0xa8,
	0xb1, 0x40, 0x0d, 0xdb, 0x87, 0x2b, 0x34, 0x85, 0xd0, 0x80, 0x0d, 0x90, 0x1a, 0x06, 0x03, 0x82,
	0x19, 0x23, 0x9f, 0x13, 0xa5, 0xcf, 0x64, 0x3c, 0xa6, 0x71, 0x9c, 0x30, 0x39, 0x0c, 0xd7, 0x50,
	0xa6, 0x29, 0xda, 0x86, 0x4f, 0x4c, 0x12, 0xf8, 0x4c, 0xff, 0xcd, 0xfd, 0xef, 0x97, 0x11, 0x6a,
	0x0c, 0xcd, 0x94, 0xe1, 0x4b, 0xe9, 0x8f, 0x54, 0x98, 0x28, 0xc7, 0x26, 0x6b, 0x34, 0xaa, 0xae,
	0x31, 0x32, 0xb1, 0xc7, 0xe4, 0x49, 0xef, 0xff, 0xb0, 0x8c, 0x35, 0x3c, 0x9c, 0xb0, 0xd3, 0x69,
	0x5a, 0xa1, 0x47, 0x7a, 0x01, 0x92, 0x51, 0xf2, 0xf0, 0x04, 0x6c, 0x2c, 0x92, 0xfb, 0x59, 0xa1,
	0x10, 0xbf, 0x3f, 0x7b, 0x7a, 0xce, 0xee, 0x57, 0xd6, 0x40, 0xdc, 0xc7, 0xf6, 0xee, 0xcd, 0x2a,
	0x88, 0xd3, 0x1e, 0xc8, 0x83, 0xd8, 0xec, 0x4c, 0xb7, 0xae, 0xaf, 0xf2, 0xb1, 0xc5, 0x86, 0x8f,
	0x61, 0x0b, 0xfe, 0x06, 0xac, 0xb2, 0x47, 0x23, 0x76, 0x8f, 0x47, 0x83, 0x45, 0xd0, 0x48, 0xf6,
	0x5a, 0xc4, 0xef, 0xf1, 0x5a, 0xb0, 0x08, 0x78, 0x0a, 0x52, 0xa8, 0x67, 0xf9, 0x26, 0xeb, 0x59,
	0x3e, 0xca, 0xf7, 0x96, 0x85, 0x17, 0xe5, 0x6a, 0x4d, 0x2b, 0xd7, 0xd1, 0xb8, 0x92, 0xb9, 0xbe,
	0xca, 0x27, 0x23, 0x8b, 0x9e, 0x3f, 0xe3, 0xa2, 0xc5, 0x9e, 0x80, 0x0c, 0xeb, 0x85, 0x50, 0x53,
	0x76, 0xb1, 0xd2, 0xfb, 0x3f, 0x2e, 0xa5, 0x3e, 0x0e, 0x83, 0x38, 0x5f, 0x7a, 0x38, 0x37, 0xe1,
	0x33, 0x00, 0x3c, 0x97, 0x98, 0x04, 0x59, 0x86, 0xc9, 0x67, 0x74, 0x7a, 0x5f, 0x2a, 0xf2, 0x07,
	0xba, 0x18, 0x3d, 0xd0, 0x45, 0x3d, 0x7a, 0xa0, 0x2b, 0xab, 0xaf, 0xff, 0x93, 0x17, 0xd4, 0x54,
	0x18, 0x53, 0x26, 0xec, 0xba, 0x53, 0x83, 0xbe, 0x2e, 0x8b, 0x53, 0x7b, 0x23, 0xf2, 0xf2, 0x81,
	0xbd, 0x0d, 0xd6, 0x7a, 0xe7, 0x26, 0x76, 0xd8, 0x78, 0x4e, 0xa9, 0xdc, 0xb8, 0x73, 0xac, 0xa4,
	0xee, 0x1c, 0x2b, 0x52, 0x01, 0xcc, 0x34, 0xa1, 0x64, 0x17, 0xe6, 0x20, 0x40, 0xe1, 0x3c, 0xe0,
	0x86, 0x54, 0x05, 0xe9, 0x85, 0x42, 0xe1, 0x43, 0x90, 0x60, 0x7e, 0xde, 0x74, 0x19, 0x35, 0xb4,
	0xe8, 0xd4, 0x98, 0xcf, 0xf3, 0x18, 0xfb, 0xd8, 0xdc, 0x51, 0xc9, 0x00, 0x30, 0x0a, 0xba, 0x03,
	0xdc, 0xa3, 0x02, 0x3f, 0xfe, 0x87, 0x00, 0xd6, 0xc3, 0xa6, 0x80, 0xdf, 0x81, 0xed, 0xba, 0xdc,
	0x31, 0xd4, 0xe6, 0x91, 0x6c, 0xb4, 0x1b, 0x5a, 0x4b, 0xae, 0x2a, 0xbf, 0x53, 0xe4, 0x9a, 0xb8,
	0x22, 0xa5, 0x27, 0xd3, 0xc2, 0x7a, 0xdb, 0xe9, 0x3b, 0xee, 0x2b, 0x07, 0x7e, 0x0f, 0x1e, 0xcc,
	0x60, 0xc7, 0x65, 0x4d, 0x97, 0x55, 0xa3, 0x2e, 0x77, 0x44, 0x41, 0xda, 0x98, 0x4c, 0x0b, 0xa9,
	0x63, 0xd3, 0x27, 0xc8, 0xa3, 0xe9, 0xfd, 0x08, 0x1e, 0xce, 0x70, 0x9a, 0x5c, 0x6d, 0x36, 0x6a,
	0x65, 0xb5, 0xc3, 0xa0, 0x31, 0x49, 0x9c, 0x4c, 0x0b, 0x19, 0x0d, 0xf5, 0x5c, 0xc7, 0x32, 0xbd,
	0x31, 0x45, 0x3f, 0x06, 0x3b, 0x33, 0xb4, 0xfc, 0x7b, 0x5d, 0x56, 0x1b, 0xe5, 0x23, 0x06, 0x8e,
	0x4b, 0x5b, 0x93, 0x69, 0x21, 0x2d, 0x5f, 0x12, 0xe4, 0x39, 0xe6, 0xa0, 0x8e, 0xc6, 0x52, 0xf2,
	0x2f, 0x6f, 0x72, 0x2b, 0x7f, 0xff, 0x5b, 0x4e, 0x78, 0xfc, 0x5e, 0x00, 0xd2, 0xc7, 0x9f, 0x71,
	0xf8, 0x5b, 0xb0, 0x47, 0x49, 0xb5, 0xc3, 0xb2, 0x2a, 0x1b, 0x35, 0x45, 0xd3, 0x55, 0xa5, 0xd2,
	0xd6, 0x95, 0x66, 0xc3, 0x68, 0x35, 0x8f, 0x94, 0x6a, 0xe7, 0x56, 0x99, 0xec, 0x43, 0x6d, 0xc7,
	0x1f, 0xa1, 0x1e, 0x3e, 0xc3, 0xc8, 0x82, 0x87, 0xa0, 0xf4, 0xe9, 0xf8, 0xe7, 0xb2, 0x72, 0x70,
	0xa8, 0xcb, 0x35, 0xa3, 0xd2, 0x31, 0x34, 0xbd, 0x5c, 0x97, 0x45, 0x41, 0x7a, 0x30, 0x99, 0x16,
	0xb6, 0x9e, 0x23, 0x6c, 0x9f, 0x13, 0x64, 0x55, 0xc6, 0x1a, 0x31, 0xfb, 0x68, 0x39, 0x53, 0xb3,
	0x21, 0x1b, 0x2d, 0x59, 0x35, 0x4e, 0xcb, 0x47, 0x4a, 0xad, 0xac, 0x37, 0x55, 0x31, 0xc6, 0x99,
	0x9a, 0x0e, 0x6a, 0x21, 0xef, 0xd4, 0x1c, 0x60, 0xcb, 0x24, 0xae, 0xb7, 0x50, 0xfc, 0x9f, 0xc1,
	0x7a, 0xb9, 0xd7, 0x67, 0x3f, 0xdd, 0xf6, 0xc0, 0x76, 0xb9, 0x5a, 0x37, 0xf4, 0x4e, 0x4b, 0x5e,
	0x56, 0x53, 0x1e, 0x6c, 0xcd, 0xa0, 0x75, 0xb9, 0x73, 0x20, 0x37, 0x44, 0x41, 0x02, 0x93, 0x69,
	0x21, 0xc1, 0x7f, 0xb6, 0xc1, 0xaf, 0xc0, 0xc6, 0x0c, 0xa0, 0x29, 0x07, 0x0d, 0x31, 0x26, 0x25,
	0x27, 0xd3, 0xc2, 0x2a, 0x1d, 0xdd, 0xec, 0xeb, 0x02, 0xfb, 0xfa, 0xff, 0x04, 0xf6, 0xfa, 0xf0,
	0x89, 0x0b, 0x7f, 0x01, 0x1e, 0x6a, 0xca, 0x01, 0xd5, 0x40, 0x6f, 0x6b, 0xcb, 0x52, 0xf8, 0x1a,
	0x7c, 0xb1, 0x00, 0x3e, 0x69, 0xcb, 0x6d, 0xb9, 0x16, 0x25, 0x71, 0x12, 0xa0, 0x00, 0x59, 0xf0,
	0x1b, 0x00, 0x17, 0x20, 0x34, 0x0d, 0xa5, 0x71, 0x20, 0xc6, 0x78, 0x27, 0xd2, 0x4c, 0xb0, 0x63,
	0xdf, 0xe2, 0xa1, 0x20, 0xb9, 0x26, 0xc6, 0x39, 0x0f, 0xc5, 0x7c, 0xc0, 0x53, 0xae, 0x34, 0x55,
	0x5d, 0xae, 0x89, 0xab, 0x9c, 0xa7, 0xdc, 0x65, 0x93, 0xe4, 0x16, 0x48, 0x69, 0xb0, 0x33, 0x10,
	0xd7, 0x38, 0x48, 0x71, 0x2e, 0xa8, 0xf6, 0x0b, 0x95, 0xff, 0x95, 0xdf, 0x19, 0x26, 0x7c, 0x96,
	0xdf, 0x99, 0x0f, 0x85, 0xa7, 0x32, 0xce, 0x76, 0x1a, 0xcd, 0x06, 0xed, 0x0c, 0x26, 0x63, 0xc3,
	0x75, 0xe8, 0x55, 0x83, 0xb3, 0x4d, 0xfd, 0x50, 0x95, 0xb5, 0xc3, 0xe6, 0x51, 0x4d, 0x8c, 0xf1,
	0x2b, 0x34, 0xff, 0x29, 0xf5, 0x0d, 0xf8, 0x62, 0x06, 0x3b, 0x6e, 0x1f, 0xe9, 0x8a, 0xa6, 0x1c,
	0x88, 0x71, 0x29, 0x33, 0x99, 0x16, 0x92, 0xd1, 0x24, 0x98, 0x37, 0x44, 0xe5, 0xf8, 0xed, 0x75,
	0x4e, 0x78, 0x77, 0x9d, 0x13, 0xfe, 0x7b, 0x9d, 0x13, 0x5e, 0xdf, 0xe4, 0x56, 0xde, 0xdd, 0xe4,
	0x56, 0xfe, 0x75, 0x93, 0x5b, 0xf9, 0xc3, 0x53, 0x1b, 0x93, 0xf3, 0xa0, 0x5b, 0xec, 0xb9, 0xc3,
	0x12, 0x9f, 0xa5, 0x0e, 0x22, 0xaf, 0x5c, 0xaf, 0x1f, 0x5a, 0xbf, 0xec, 0xb9, 0x1e, 0x2a, 0x5d,
	0xfe, 0xe4, 0x2f, 0x53, 0x37, 0xc1, 0xa6, 0xe3, 0xd3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd6,
	0x6e, 0x3d, 0x7b, 0x50, 0x0d, 0x00, 0x00,
}

func (m *KeyRequirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyRequirement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyRequirement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SignTimeout))
		i--
		dAtA[i] = 0x58
	}
	if m.KeygenTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeygenTimeout))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.SignVotingThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.KeygenVotingThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.MinTotalShareCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinTotalShareCount))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxTotalShareCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxTotalShareCount))
		i--
		dAtA[i] = 0x30
	}
	if m.KeyShareDistributionPolicy != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyShareDistributionPolicy))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.SafetyThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MinKeygenThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.KeyType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyRole != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyRole))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RequestModule) > 0 {
		i -= len(m.RequestModule)
		copy(dAtA[i:], m.RequestModule)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestModule)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SnapshotCounter != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SnapshotCounter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SigID) > 0 {
		i -= len(m.SigID)
		copy(dAtA[i:], m.SigID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SigID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigKeyPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigKeyPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigKeyPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigStatus != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SigStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.Sig != nil {
		{
			size := m.Sig.Size()
			i -= size
			if _, err := m.Sig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SigID) > 0 {
		i -= len(m.SigID)
		copy(dAtA[i:], m.SigID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SigID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature_SingleSig_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature_SingleSig_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleSig != nil {
		{
			size, err := m.SingleSig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Signature_MultiSig_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature_MultiSig_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiSig != nil {
		{
			size, err := m.MultiSig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Signature_SingleSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature_SingleSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature_SingleSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SigKeyPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Signature_MultiSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature_MultiSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature_MultiSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigKeyPairs) > 0 {
		for iNdEx := len(m.SigKeyPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SigKeyPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SnapshotCounter != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SnapshotCounter))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x42
	}
	if m.RotationCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RotationCount))
		i--
		dAtA[i] = 0x38
	}
	if m.RotatedAt != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.RotatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.RotatedAt):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintTypes(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x32
	}
	if m.PublicKey != nil {
		{
			size := m.PublicKey.Size()
			i -= size
			if _, err := m.PublicKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Role != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Key_ECDSAKey_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key_ECDSAKey_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ECDSAKey != nil {
		{
			size, err := m.ECDSAKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Key_MultisigKey_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key_MultisigKey_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigKey != nil {
		{
			size, err := m.MultisigKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Key_ECDSAKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key_ECDSAKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key_ECDSAKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Key_MultisigKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key_MultisigKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key_MultisigKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyRequirement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyRole != 0 {
		n += 1 + sovTypes(uint64(m.KeyRole))
	}
	if m.KeyType != 0 {
		n += 1 + sovTypes(uint64(m.KeyType))
	}
	l = m.MinKeygenThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.SafetyThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.KeyShareDistributionPolicy != 0 {
		n += 1 + sovTypes(uint64(m.KeyShareDistributionPolicy))
	}
	if m.MaxTotalShareCount != 0 {
		n += 1 + sovTypes(uint64(m.MaxTotalShareCount))
	}
	if m.MinTotalShareCount != 0 {
		n += 1 + sovTypes(uint64(m.MinTotalShareCount))
	}
	l = m.KeygenVotingThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.SignVotingThreshold.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.KeygenTimeout != 0 {
		n += 1 + sovTypes(uint64(m.KeygenTimeout))
	}
	if m.SignTimeout != 0 {
		n += 1 + sovTypes(uint64(m.SignTimeout))
	}
	return n
}

func (m *SignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SigID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SnapshotCounter != 0 {
		n += 1 + sovTypes(uint64(m.SnapshotCounter))
	}
	l = len(m.RequestModule)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SigKeyPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SigID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Sig != nil {
		n += m.Sig.Size()
	}
	if m.SigStatus != 0 {
		n += 1 + sovTypes(uint64(m.SigStatus))
	}
	return n
}

func (m *Signature_SingleSig_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleSig != nil {
		l = m.SingleSig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Signature_MultiSig_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiSig != nil {
		l = m.MultiSig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Signature_SingleSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SigKeyPair.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Signature_MultiSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SigKeyPairs) > 0 {
		for _, e := range m.SigKeyPairs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovTypes(uint64(m.Role))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.PublicKey != nil {
		n += m.PublicKey.Size()
	}
	if m.RotatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.RotatedAt)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RotationCount != 0 {
		n += 1 + sovTypes(uint64(m.RotationCount))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SnapshotCounter != 0 {
		n += 1 + sovTypes(uint64(m.SnapshotCounter))
	}
	return n
}

func (m *Key_ECDSAKey_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ECDSAKey != nil {
		l = m.ECDSAKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Key_MultisigKey_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigKey != nil {
		l = m.MultisigKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Key_ECDSAKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Key_MultisigKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovTypes(uint64(m.Threshold))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyRequirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyRequirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyRequirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRole", wireType)
			}
			m.KeyRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyRole |= KeyRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinKeygenThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinKeygenThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafetyThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SafetyThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShareDistributionPolicy", wireType)
			}
			m.KeyShareDistributionPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyShareDistributionPolicy |= KeyShareDistributionPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalShareCount", wireType)
			}
			m.MaxTotalShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTotalShareCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTotalShareCount", wireType)
			}
			m.MinTotalShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTotalShareCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenVotingThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KeygenVotingThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignVotingThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SignVotingThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenTimeout", wireType)
			}
			m.KeygenTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeygenTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignTimeout", wireType)
			}
			m.SignTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCounter", wireType)
			}
			m.SnapshotCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigKeyPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigKeyPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigKeyPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleSig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Signature_SingleSig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sig = &Signature_SingleSig_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Signature_MultiSig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sig = &Signature_MultiSig_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigStatus", wireType)
			}
			m.SigStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigStatus |= SigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature_SingleSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigKeyPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SigKeyPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature_MultiSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigKeyPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigKeyPairs = append(m.SigKeyPairs, SigKeyPair{})
			if err := m.SigKeyPairs[len(m.SigKeyPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= KeyRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ECDSAKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Key_ECDSAKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PublicKey = &Key_ECDSAKey_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Key_MultisigKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PublicKey = &Key_MultisigKey_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RotatedAt == nil {
				m.RotatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.RotatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationCount", wireType)
			}
			m.RotationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RotationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCounter", wireType)
			}
			m.SnapshotCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key_ECDSAKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECDSAKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECDSAKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key_MultisigKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultisigKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultisigKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
