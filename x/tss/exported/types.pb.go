// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tss/exported/v1beta1/types.proto

package exported

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyRole int32

const (
	Unknown      KeyRole = 0
	MasterKey    KeyRole = 1
	SecondaryKey KeyRole = 2
	ExternalKey  KeyRole = 3
)

var KeyRole_name = map[int32]string{
	0: "KEY_ROLE_UNSPECIFIED",
	1: "KEY_ROLE_MASTER_KEY",
	2: "KEY_ROLE_SECONDARY_KEY",
	3: "KEY_ROLE_EXTERNAL_KEY",
}

var KeyRole_value = map[string]int32{
	"KEY_ROLE_UNSPECIFIED":   0,
	"KEY_ROLE_MASTER_KEY":    1,
	"KEY_ROLE_SECONDARY_KEY": 2,
	"KEY_ROLE_EXTERNAL_KEY":  3,
}

func (x KeyRole) String() string {
	return proto.EnumName(KeyRole_name, int32(x))
}

func (KeyRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a3f02740fd114b9, []int{0}
}

type KeyShareDistributionPolicy int32

const (
	Unspecified     KeyShareDistributionPolicy = 0
	WeightedByStake KeyShareDistributionPolicy = 1
	OnePerValidator KeyShareDistributionPolicy = 2
)

var KeyShareDistributionPolicy_name = map[int32]string{
	0: "KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED",
	1: "KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE",
	2: "KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR",
}

var KeyShareDistributionPolicy_value = map[string]int32{
	"KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED":       0,
	"KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE": 1,
	"KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR": 2,
}

func (x KeyShareDistributionPolicy) String() string {
	return proto.EnumName(KeyShareDistributionPolicy_name, int32(x))
}

func (KeyShareDistributionPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a3f02740fd114b9, []int{1}
}

type AckType int32

const (
	AckType_Unspecified AckType = 0
	AckType_Keygen      AckType = 1
	AckType_Sign        AckType = 2
)

var AckType_name = map[int32]string{
	0: "ACK_TYPE_UNSPECIFIED",
	1: "ACK_TYPE_KEYGEN",
	2: "ACK_TYPE_SIGN",
}

var AckType_value = map[string]int32{
	"ACK_TYPE_UNSPECIFIED": 0,
	"ACK_TYPE_KEYGEN":      1,
	"ACK_TYPE_SIGN":        2,
}

func (x AckType) String() string {
	return proto.EnumName(AckType_name, int32(x))
}

func (AckType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a3f02740fd114b9, []int{2}
}

// KeyRequirement defines requirements for keys
type KeyRequirement struct {
	ChainName                  string                     `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	KeyRole                    KeyRole                    `protobuf:"varint,2,opt,name=key_role,json=keyRole,proto3,enum=tss.exported.v1beta1.KeyRole" json:"key_role,omitempty"`
	MinValidatorSubsetSize     int64                      `protobuf:"varint,3,opt,name=min_validator_subset_size,json=minValidatorSubsetSize,proto3" json:"min_validator_subset_size,omitempty"`
	KeyShareDistributionPolicy KeyShareDistributionPolicy `protobuf:"varint,4,opt,name=key_share_distribution_policy,json=keyShareDistributionPolicy,proto3,enum=tss.exported.v1beta1.KeyShareDistributionPolicy" json:"key_share_distribution_policy,omitempty"`
}

func (m *KeyRequirement) Reset()         { *m = KeyRequirement{} }
func (m *KeyRequirement) String() string { return proto.CompactTextString(m) }
func (*KeyRequirement) ProtoMessage()    {}
func (*KeyRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3f02740fd114b9, []int{0}
}
func (m *KeyRequirement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyRequirement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyRequirement.Merge(m, src)
}
func (m *KeyRequirement) XXX_Size() int {
	return m.Size()
}
func (m *KeyRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_KeyRequirement proto.InternalMessageInfo

func (m *KeyRequirement) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *KeyRequirement) GetKeyRole() KeyRole {
	if m != nil {
		return m.KeyRole
	}
	return Unknown
}

func (m *KeyRequirement) GetMinValidatorSubsetSize() int64 {
	if m != nil {
		return m.MinValidatorSubsetSize
	}
	return 0
}

func (m *KeyRequirement) GetKeyShareDistributionPolicy() KeyShareDistributionPolicy {
	if m != nil {
		return m.KeyShareDistributionPolicy
	}
	return Unspecified
}

// SignInfo holds information about a sign request
type SignInfo struct {
	KeyID           string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SigID           string `protobuf:"bytes,2,opt,name=sig_id,json=sigId,proto3" json:"sig_id,omitempty"`
	Msg             []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	SnapshotCounter int64  `protobuf:"varint,4,opt,name=snapshot_counter,json=snapshotCounter,proto3" json:"snapshot_counter,omitempty"`
}

func (m *SignInfo) Reset()         { *m = SignInfo{} }
func (m *SignInfo) String() string { return proto.CompactTextString(m) }
func (*SignInfo) ProtoMessage()    {}
func (*SignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3f02740fd114b9, []int{1}
}
func (m *SignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInfo.Merge(m, src)
}
func (m *SignInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignInfo proto.InternalMessageInfo

func (m *SignInfo) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *SignInfo) GetSigID() string {
	if m != nil {
		return m.SigID
	}
	return ""
}

func (m *SignInfo) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *SignInfo) GetSnapshotCounter() int64 {
	if m != nil {
		return m.SnapshotCounter
	}
	return 0
}

func init() {
	proto.RegisterEnum("tss.exported.v1beta1.KeyRole", KeyRole_name, KeyRole_value)
	proto.RegisterEnum("tss.exported.v1beta1.KeyShareDistributionPolicy", KeyShareDistributionPolicy_name, KeyShareDistributionPolicy_value)
	proto.RegisterEnum("tss.exported.v1beta1.AckType", AckType_name, AckType_value)
	proto.RegisterType((*KeyRequirement)(nil), "tss.exported.v1beta1.KeyRequirement")
	proto.RegisterType((*SignInfo)(nil), "tss.exported.v1beta1.SignInfo")
}

func init() { proto.RegisterFile("tss/exported/v1beta1/types.proto", fileDescriptor_6a3f02740fd114b9) }

var fileDescriptor_6a3f02740fd114b9 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x45, 0x29, 0xf1, 0xc7, 0xe6, 0xc3, 0x04, 0xe3, 0x06, 0x2e, 0x0b, 0x2b, 0x44, 0x80,
	0x16, 0xb6, 0xd1, 0x8a, 0x4d, 0x73, 0x69, 0x2f, 0x05, 0x28, 0x69, 0x6b, 0x13, 0xb4, 0x29, 0x61,
	0x49, 0x27, 0x55, 0x2f, 0x0b, 0x8a, 0x9c, 0x50, 0x0b, 0x4a, 0xbb, 0x2a, 0x77, 0x95, 0x98, 0x41,
	0x1f, 0xa0, 0x50, 0x2f, 0xbd, 0xf6, 0xa0, 0x53, 0x7b, 0xe8, 0x43, 0xf4, 0x01, 0x7a, 0xcc, 0xb1,
	0xa7, 0xa2, 0xb0, 0xdf, 0xa2, 0xa7, 0x82, 0x94, 0xad, 0x1a, 0x45, 0x9d, 0xdc, 0x86, 0x33, 0xbf,
	0x99, 0xff, 0xfc, 0x97, 0x8b, 0x45, 0x96, 0x92, 0xd2, 0x86, 0xb3, 0xa9, 0xc8, 0x15, 0x24, 0xf6,
	0xcb, 0x27, 0x43, 0x50, 0xd1, 0x13, 0x5b, 0x15, 0x53, 0x90, 0xad, 0x69, 0x2e, 0x94, 0x30, 0xb6,
	0x95, 0x94, 0xad, 0x2b, 0xa2, 0x75, 0x49, 0x98, 0xdb, 0xa9, 0x48, 0x45, 0x05, 0xd8, 0x65, 0xb4,
	0x64, 0x1f, 0xff, 0x54, 0x47, 0xf7, 0x3d, 0x28, 0x08, 0x7c, 0x3b, 0x63, 0x39, 0x4c, 0x80, 0x2b,
	0x63, 0x17, 0xa1, 0x78, 0x14, 0x31, 0x4e, 0x79, 0x34, 0x81, 0x1d, 0xcd, 0xd2, 0xf6, 0x36, 0xc9,
	0x66, 0x95, 0xf1, 0xa3, 0x09, 0x18, 0x9f, 0xa3, 0x8d, 0x0c, 0x0a, 0x9a, 0x8b, 0x31, 0xec, 0xd4,
	0x2d, 0x6d, 0xef, 0xfe, 0x67, 0xbb, 0xad, 0xff, 0x13, 0x6c, 0x95, 0x63, 0xc5, 0x18, 0xc8, 0x7a,
	0xb6, 0x0c, 0x8c, 0x2f, 0xd0, 0xfb, 0x13, 0xc6, 0xe9, 0xcb, 0x68, 0xcc, 0x92, 0x48, 0x89, 0x9c,
	0xca, 0xd9, 0x50, 0x82, 0xa2, 0x92, 0xbd, 0x86, 0x9d, 0x86, 0xa5, 0xed, 0x35, 0xc8, 0xc3, 0x09,
	0xe3, 0xcf, 0xae, 0xea, 0x41, 0x55, 0x0e, 0xd8, 0x6b, 0x30, 0x24, 0xda, 0x2d, 0x45, 0xe5, 0x28,
	0xca, 0x81, 0x26, 0x4c, 0xaa, 0x9c, 0x0d, 0x67, 0x8a, 0x09, 0x4e, 0xa7, 0x62, 0xcc, 0xe2, 0x62,
	0xe7, 0x56, 0xb5, 0xc9, 0xa7, 0x37, 0x6e, 0x12, 0x94, 0x9d, 0xdd, 0x6b, 0x8d, 0xfd, 0xaa, 0x8f,
	0x98, 0xd9, 0x8d, 0xb5, 0xc7, 0x3f, 0x68, 0x68, 0x23, 0x60, 0x29, 0x77, 0xf9, 0x0b, 0x61, 0x58,
	0x68, 0xad, 0xdc, 0x80, 0x25, 0xcb, 0x13, 0x69, 0x6f, 0x9e, 0xff, 0xf9, 0xe8, 0xb6, 0x07, 0x85,
	0xdb, 0x25, 0xb7, 0x33, 0x28, 0xdc, 0xa4, 0x24, 0x24, 0x4b, 0x4b, 0xa2, 0xfe, 0x2f, 0x11, 0xb0,
	0xb4, 0x24, 0x24, 0x4b, 0xdd, 0xc4, 0xd0, 0x51, 0x63, 0x22, 0xd3, 0xca, 0xea, 0x5d, 0x52, 0x86,
	0xc6, 0x3e, 0xd2, 0x25, 0x8f, 0xa6, 0x72, 0x24, 0x14, 0x8d, 0xc5, 0x8c, 0x2b, 0xc8, 0x2b, 0x2b,
	0x0d, 0xb2, 0x75, 0x95, 0xef, 0x2c, 0xd3, 0x07, 0xbf, 0x69, 0x68, 0xfd, 0xf2, 0x48, 0x8d, 0x0f,
	0xd1, 0xb6, 0x87, 0x07, 0x94, 0xf4, 0x8e, 0x31, 0x3d, 0xf5, 0x83, 0x3e, 0xee, 0xb8, 0x5f, 0xb9,
	0xb8, 0xab, 0xd7, 0xcc, 0x3b, 0xf3, 0x85, 0xb5, 0x7e, 0xca, 0x33, 0x2e, 0x5e, 0x71, 0xe3, 0x23,
	0xf4, 0x60, 0x85, 0x9d, 0x38, 0x41, 0x88, 0x09, 0xf5, 0xf0, 0x40, 0xd7, 0xcc, 0x7b, 0xf3, 0x85,
	0xb5, 0x79, 0x12, 0x49, 0x05, 0xb9, 0x07, 0x85, 0xf1, 0x31, 0x7a, 0xb8, 0xe2, 0x02, 0xdc, 0xe9,
	0xf9, 0x5d, 0x87, 0x0c, 0x2a, 0xb4, 0x6e, 0xea, 0xf3, 0x85, 0x75, 0x37, 0x80, 0x58, 0xf0, 0x24,
	0xca, 0x8b, 0x92, 0x3e, 0x40, 0xef, 0xad, 0x68, 0xfc, 0x75, 0x88, 0x89, 0xef, 0x1c, 0x57, 0x70,
	0xc3, 0xdc, 0x9a, 0x2f, 0xac, 0x3b, 0xf8, 0x4c, 0x41, 0xce, 0xa3, 0xb1, 0x07, 0x85, 0xb9, 0xf1,
	0xfd, 0xcf, 0xcd, 0xda, 0xaf, 0xbf, 0x34, 0xb5, 0x83, 0xbf, 0x35, 0x64, 0xde, 0xfc, 0x1f, 0x8c,
	0x2f, 0xd1, 0x7e, 0x39, 0x34, 0x38, 0x72, 0x08, 0xa6, 0x5d, 0x37, 0x08, 0x89, 0xdb, 0x3e, 0x0d,
	0xdd, 0x9e, 0x4f, 0xfb, 0xbd, 0x63, 0xb7, 0x33, 0xf8, 0x8f, 0xcd, 0x4a, 0xe8, 0x94, 0xcb, 0x29,
	0xc4, 0xec, 0x05, 0x83, 0xc4, 0x38, 0x42, 0xf6, 0xdb, 0xfb, 0x9f, 0x63, 0xf7, 0xf0, 0x28, 0xc4,
	0x5d, 0xda, 0x1e, 0xd0, 0x20, 0x74, 0x3c, 0xac, 0x6b, 0xe6, 0x83, 0xf9, 0xc2, 0xda, 0x7a, 0x0e,
	0x2c, 0x1d, 0x29, 0x48, 0xda, 0x45, 0xa0, 0xa2, 0x0c, 0xde, 0x3d, 0xa9, 0xe7, 0x63, 0xda, 0xc7,
	0x84, 0x3e, 0x73, 0x8e, 0xdd, 0xae, 0x13, 0xf6, 0x88, 0x5e, 0x5f, 0x4e, 0xea, 0x71, 0xe8, 0x43,
	0xbe, 0xba, 0xbe, 0xd7, 0xcc, 0x7f, 0x87, 0xd6, 0x9d, 0x38, 0x0b, 0x8b, 0x29, 0x18, 0xfb, 0x68,
	0xdb, 0xe9, 0x78, 0x34, 0x1c, 0xf4, 0xf1, 0xbb, 0x3c, 0x3d, 0x42, 0x5b, 0x2b, 0xd4, 0xc3, 0x83,
	0x43, 0xec, 0xeb, 0x9a, 0x89, 0xe6, 0x0b, 0x6b, 0xcd, 0x83, 0x22, 0x05, 0x6e, 0x7c, 0x80, 0xee,
	0xad, 0x80, 0xc0, 0x3d, 0xf4, 0xf5, 0xba, 0xb9, 0x31, 0x5f, 0x58, 0xb7, 0xca, 0x4b, 0x5b, 0xa9,
	0x6b, 0xa5, 0x7a, 0xfb, 0xe4, 0xf7, 0xf3, 0xa6, 0xf6, 0xe6, 0xbc, 0xa9, 0xfd, 0x75, 0xde, 0xd4,
	0x7e, 0xbc, 0x68, 0xd6, 0xde, 0x5c, 0x34, 0x6b, 0x7f, 0x5c, 0x34, 0x6b, 0xdf, 0x3c, 0x4d, 0x99,
	0x1a, 0xcd, 0x86, 0xad, 0x58, 0x4c, 0xec, 0xe8, 0x0c, 0xc6, 0x51, 0xce, 0x41, 0xbd, 0x12, 0x79,
	0x76, 0xf9, 0xf5, 0x49, 0x2c, 0x72, 0xb0, 0xcf, 0xec, 0xeb, 0x4f, 0xce, 0x70, 0xad, 0x7a, 0x39,
	0x9e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x05, 0xd1, 0x80, 0xd0, 0x89, 0x04, 0x00, 0x00,
}

func (m *KeyRequirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyRequirement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyRequirement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyShareDistributionPolicy != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyShareDistributionPolicy))
		i--
		dAtA[i] = 0x20
	}
	if m.MinValidatorSubsetSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinValidatorSubsetSize))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyRole != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyRole))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SnapshotCounter != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SnapshotCounter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SigID) > 0 {
		i -= len(m.SigID)
		copy(dAtA[i:], m.SigID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SigID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyRequirement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.KeyRole != 0 {
		n += 1 + sovTypes(uint64(m.KeyRole))
	}
	if m.MinValidatorSubsetSize != 0 {
		n += 1 + sovTypes(uint64(m.MinValidatorSubsetSize))
	}
	if m.KeyShareDistributionPolicy != 0 {
		n += 1 + sovTypes(uint64(m.KeyShareDistributionPolicy))
	}
	return n
}

func (m *SignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SigID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SnapshotCounter != 0 {
		n += 1 + sovTypes(uint64(m.SnapshotCounter))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyRequirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyRequirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyRequirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRole", wireType)
			}
			m.KeyRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyRole |= KeyRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidatorSubsetSize", wireType)
			}
			m.MinValidatorSubsetSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValidatorSubsetSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShareDistributionPolicy", wireType)
			}
			m.KeyShareDistributionPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyShareDistributionPolicy |= KeyShareDistributionPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCounter", wireType)
			}
			m.SnapshotCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
