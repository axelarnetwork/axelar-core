// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tss/v1beta1/query.proto

package types

import (
	fmt "fmt"
	exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	github_com_axelarnetwork_axelar_core_x_tss_exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	tofnd "github.com/axelarnetwork/axelar-core/x/tss/tofnd"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoteStatus int32

const (
	Unspecified VoteStatus = 0
	NotFound    VoteStatus = 1
	Pending     VoteStatus = 2
	Decided     VoteStatus = 3
)

var VoteStatus_name = map[int32]string{
	0: "VOTE_STATUS_UNSPECIFIED",
	1: "VOTE_STATUS_NOT_FOUND",
	2: "VOTE_STATUS_PENDING",
	3: "VOTE_STATUS_DECIDED",
}

var VoteStatus_value = map[string]int32{
	"VOTE_STATUS_UNSPECIFIED": 0,
	"VOTE_STATUS_NOT_FOUND":   1,
	"VOTE_STATUS_PENDING":     2,
	"VOTE_STATUS_DECIDED":     3,
}

func (x VoteStatus) String() string {
	return proto.EnumName(VoteStatus_name, int32(x))
}

func (VoteStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{0}
}

type QuerySignatureResponse struct {
	VoteStatus VoteStatus                        `protobuf:"varint,1,opt,name=vote_status,json=voteStatus,proto3,enum=tss.v1beta1.VoteStatus" json:"vote_status,omitempty"`
	Signature  *QuerySignatureResponse_Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *QuerySignatureResponse) Reset()         { *m = QuerySignatureResponse{} }
func (m *QuerySignatureResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureResponse) ProtoMessage()    {}
func (*QuerySignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{0}
}
func (m *QuerySignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureResponse.Merge(m, src)
}
func (m *QuerySignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureResponse proto.InternalMessageInfo

type QuerySignatureResponse_Signature struct {
	R string `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S string `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *QuerySignatureResponse_Signature) Reset()         { *m = QuerySignatureResponse_Signature{} }
func (m *QuerySignatureResponse_Signature) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureResponse_Signature) ProtoMessage()    {}
func (*QuerySignatureResponse_Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{0, 0}
}
func (m *QuerySignatureResponse_Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureResponse_Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureResponse_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureResponse_Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureResponse_Signature.Merge(m, src)
}
func (m *QuerySignatureResponse_Signature) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureResponse_Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureResponse_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureResponse_Signature proto.InternalMessageInfo

type QueryKeyResponse struct {
	VoteStatus VoteStatus       `protobuf:"varint,1,opt,name=vote_status,json=voteStatus,proto3,enum=tss.v1beta1.VoteStatus" json:"vote_status,omitempty"`
	Role       exported.KeyRole `protobuf:"varint,2,opt,name=role,proto3,enum=tss.exported.v1beta1.KeyRole" json:"role,omitempty"`
}

func (m *QueryKeyResponse) Reset()         { *m = QueryKeyResponse{} }
func (m *QueryKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyResponse) ProtoMessage()    {}
func (*QueryKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{1}
}
func (m *QueryKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyResponse.Merge(m, src)
}
func (m *QueryKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyResponse proto.InternalMessageInfo

type QueryRecoveryResponse struct {
	PartyUids        []string            `protobuf:"bytes,1,rep,name=party_uids,json=partyUids,proto3" json:"party_uids,omitempty"`
	PartyShareCounts []uint32            `protobuf:"varint,2,rep,packed,name=party_share_counts,json=partyShareCounts,proto3" json:"party_share_counts,omitempty"`
	Threshold        int32               `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	KeygenOutput     *tofnd.KeygenOutput `protobuf:"bytes,4,opt,name=keygen_output,json=keygenOutput,proto3" json:"keygen_output,omitempty"`
}

func (m *QueryRecoveryResponse) Reset()         { *m = QueryRecoveryResponse{} }
func (m *QueryRecoveryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecoveryResponse) ProtoMessage()    {}
func (*QueryRecoveryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{2}
}
func (m *QueryRecoveryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecoveryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecoveryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecoveryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecoveryResponse.Merge(m, src)
}
func (m *QueryRecoveryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecoveryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecoveryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecoveryResponse proto.InternalMessageInfo

type QueryKeyShareResponse struct {
	ShareInfos []QueryKeyShareResponse_ShareInfo `protobuf:"bytes,1,rep,name=share_infos,json=shareInfos,proto3" json:"share_infos"`
}

func (m *QueryKeyShareResponse) Reset()         { *m = QueryKeyShareResponse{} }
func (m *QueryKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyShareResponse) ProtoMessage()    {}
func (*QueryKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{3}
}
func (m *QueryKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyShareResponse.Merge(m, src)
}
func (m *QueryKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyShareResponse proto.InternalMessageInfo

type QueryKeyShareResponse_ShareInfo struct {
	KeyID               github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_id,omitempty"`
	KeyChain            string                                                    `protobuf:"bytes,2,opt,name=key_chain,json=keyChain,proto3" json:"key_chain,omitempty"`
	KeyRole             string                                                    `protobuf:"bytes,3,opt,name=key_role,json=keyRole,proto3" json:"key_role,omitempty"`
	SnapshotBlockNumber int64                                                     `protobuf:"varint,4,opt,name=snapshot_block_number,json=snapshotBlockNumber,proto3" json:"snapshot_block_number,omitempty"`
	ValidatorAddress    string                                                    `protobuf:"bytes,5,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	NumValidatorShares  int64                                                     `protobuf:"varint,6,opt,name=num_validator_shares,json=numValidatorShares,proto3" json:"num_validator_shares,omitempty"`
	NumTotalShares      int64                                                     `protobuf:"varint,7,opt,name=num_total_shares,json=numTotalShares,proto3" json:"num_total_shares,omitempty"`
}

func (m *QueryKeyShareResponse_ShareInfo) Reset()         { *m = QueryKeyShareResponse_ShareInfo{} }
func (m *QueryKeyShareResponse_ShareInfo) String() string { return proto.CompactTextString(m) }
func (*QueryKeyShareResponse_ShareInfo) ProtoMessage()    {}
func (*QueryKeyShareResponse_ShareInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{3, 0}
}
func (m *QueryKeyShareResponse_ShareInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyShareResponse_ShareInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyShareResponse_ShareInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyShareResponse_ShareInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyShareResponse_ShareInfo.Merge(m, src)
}
func (m *QueryKeyShareResponse_ShareInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyShareResponse_ShareInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyShareResponse_ShareInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyShareResponse_ShareInfo proto.InternalMessageInfo

type QueryDeactivatedOperatorsResponse struct {
	OperatorAddresses []string `protobuf:"bytes,1,rep,name=operator_addresses,json=operatorAddresses,proto3" json:"operator_addresses,omitempty"`
}

func (m *QueryDeactivatedOperatorsResponse) Reset()         { *m = QueryDeactivatedOperatorsResponse{} }
func (m *QueryDeactivatedOperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeactivatedOperatorsResponse) ProtoMessage()    {}
func (*QueryDeactivatedOperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{4}
}
func (m *QueryDeactivatedOperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeactivatedOperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeactivatedOperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeactivatedOperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeactivatedOperatorsResponse.Merge(m, src)
}
func (m *QueryDeactivatedOperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeactivatedOperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeactivatedOperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeactivatedOperatorsResponse proto.InternalMessageInfo

type QueryActiveOldKeysValidatorResponse struct {
	KeysInfo []QueryActiveOldKeysValidatorResponse_KeyInfo `protobuf:"bytes,1,rep,name=keys_info,json=keysInfo,proto3" json:"keys_info"`
}

func (m *QueryActiveOldKeysValidatorResponse) Reset()         { *m = QueryActiveOldKeysValidatorResponse{} }
func (m *QueryActiveOldKeysValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveOldKeysValidatorResponse) ProtoMessage()    {}
func (*QueryActiveOldKeysValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{5}
}
func (m *QueryActiveOldKeysValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveOldKeysValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveOldKeysValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveOldKeysValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveOldKeysValidatorResponse.Merge(m, src)
}
func (m *QueryActiveOldKeysValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveOldKeysValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveOldKeysValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveOldKeysValidatorResponse proto.InternalMessageInfo

type QueryActiveOldKeysValidatorResponse_KeyInfo struct {
	ID    github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID   `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"id,omitempty"`
	Chain string                                                      `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Role  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole `protobuf:"varint,3,opt,name=role,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyRole" json:"role,omitempty"`
}

func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) Reset() {
	*m = QueryActiveOldKeysValidatorResponse_KeyInfo{}
}
func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) String() string {
	return proto.CompactTextString(m)
}
func (*QueryActiveOldKeysValidatorResponse_KeyInfo) ProtoMessage() {}
func (*QueryActiveOldKeysValidatorResponse_KeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{5, 0}
}
func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveOldKeysValidatorResponse_KeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveOldKeysValidatorResponse_KeyInfo.Merge(m, src)
}
func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveOldKeysValidatorResponse_KeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveOldKeysValidatorResponse_KeyInfo proto.InternalMessageInfo

type QueryActiveOldKeysResponse struct {
	KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,1,rep,name=key_ids,json=keyIds,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_ids,omitempty"`
}

func (m *QueryActiveOldKeysResponse) Reset()         { *m = QueryActiveOldKeysResponse{} }
func (m *QueryActiveOldKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveOldKeysResponse) ProtoMessage()    {}
func (*QueryActiveOldKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{6}
}
func (m *QueryActiveOldKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveOldKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveOldKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveOldKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveOldKeysResponse.Merge(m, src)
}
func (m *QueryActiveOldKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveOldKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveOldKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveOldKeysResponse proto.InternalMessageInfo

type QueryExternalKeyIDResponse struct {
	KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID `protobuf:"bytes,1,rep,name=key_ids,json=keyIds,proto3,casttype=github.com/axelarnetwork/axelar-core/x/tss/exported.KeyID" json:"key_ids,omitempty"`
}

func (m *QueryExternalKeyIDResponse) Reset()         { *m = QueryExternalKeyIDResponse{} }
func (m *QueryExternalKeyIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExternalKeyIDResponse) ProtoMessage()    {}
func (*QueryExternalKeyIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e98857940a4a89, []int{7}
}
func (m *QueryExternalKeyIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExternalKeyIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExternalKeyIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExternalKeyIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExternalKeyIDResponse.Merge(m, src)
}
func (m *QueryExternalKeyIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExternalKeyIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExternalKeyIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExternalKeyIDResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("tss.v1beta1.VoteStatus", VoteStatus_name, VoteStatus_value)
	proto.RegisterType((*QuerySignatureResponse)(nil), "tss.v1beta1.QuerySignatureResponse")
	proto.RegisterType((*QuerySignatureResponse_Signature)(nil), "tss.v1beta1.QuerySignatureResponse.Signature")
	proto.RegisterType((*QueryKeyResponse)(nil), "tss.v1beta1.QueryKeyResponse")
	proto.RegisterType((*QueryRecoveryResponse)(nil), "tss.v1beta1.QueryRecoveryResponse")
	proto.RegisterType((*QueryKeyShareResponse)(nil), "tss.v1beta1.QueryKeyShareResponse")
	proto.RegisterType((*QueryKeyShareResponse_ShareInfo)(nil), "tss.v1beta1.QueryKeyShareResponse.ShareInfo")
	proto.RegisterType((*QueryDeactivatedOperatorsResponse)(nil), "tss.v1beta1.QueryDeactivatedOperatorsResponse")
	proto.RegisterType((*QueryActiveOldKeysValidatorResponse)(nil), "tss.v1beta1.QueryActiveOldKeysValidatorResponse")
	proto.RegisterType((*QueryActiveOldKeysValidatorResponse_KeyInfo)(nil), "tss.v1beta1.QueryActiveOldKeysValidatorResponse.KeyInfo")
	proto.RegisterType((*QueryActiveOldKeysResponse)(nil), "tss.v1beta1.QueryActiveOldKeysResponse")
	proto.RegisterType((*QueryExternalKeyIDResponse)(nil), "tss.v1beta1.QueryExternalKeyIDResponse")
}

func init() { proto.RegisterFile("tss/v1beta1/query.proto", fileDescriptor_b9e98857940a4a89) }

var fileDescriptor_b9e98857940a4a89 = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x73, 0x22, 0x45,
	0x14, 0x67, 0x60, 0xf3, 0x87, 0x26, 0x1b, 0xd9, 0xde, 0xc4, 0xe0, 0x68, 0x00, 0xa3, 0x55, 0x4b,
	0x69, 0x02, 0x1b, 0xbc, 0xac, 0xe5, 0xc1, 0x0a, 0x0c, 0xd9, 0xa2, 0xa8, 0x82, 0x38, 0x40, 0x0e,
	0x5a, 0xd6, 0x38, 0x30, 0x2f, 0x30, 0x05, 0x74, 0xe3, 0x74, 0x0f, 0x66, 0x2e, 0x7a, 0xb5, 0x72,
	0xf2, 0x0b, 0xe4, 0xa4, 0x07, 0xbf, 0x82, 0xdf, 0x20, 0x5e, 0xb6, 0xf6, 0xe8, 0x09, 0x95, 0x7c,
	0x8b, 0x3d, 0x59, 0xdd, 0xf3, 0x07, 0xdc, 0x58, 0x56, 0xe9, 0x5a, 0x9e, 0xa6, 0xdf, 0xfb, 0xbd,
	0xf7, 0x7b, 0x7f, 0xbb, 0x07, 0xed, 0x71, 0xc6, 0x4a, 0xb3, 0xe3, 0x1e, 0x70, 0xf3, 0xb8, 0xf4,
	0xa5, 0x0b, 0x8e, 0x57, 0x9c, 0x3a, 0x94, 0x53, 0x9c, 0xe2, 0x8c, 0x15, 0x03, 0x40, 0xdd, 0x19,
	0xd0, 0x01, 0x95, 0xfa, 0x92, 0x38, 0xf9, 0x26, 0x6a, 0x5e, 0xf8, 0xc2, 0xe5, 0x94, 0x3a, 0x1c,
	0xac, 0x88, 0x84, 0x7b, 0x53, 0x60, 0x81, 0xc5, 0xbe, 0xb0, 0xe0, 0xf4, 0x82, 0xac, 0xc0, 0x42,
	0xf2, 0xe1, 0x83, 0x1b, 0x05, 0xbd, 0xfe, 0x89, 0x88, 0xd9, 0xb6, 0x07, 0xc4, 0xe4, 0xae, 0x03,
	0x3a, 0xb0, 0x29, 0x25, 0x0c, 0xf0, 0x13, 0x94, 0x9a, 0x51, 0x0e, 0x06, 0xe3, 0x26, 0x77, 0x59,
	0x46, 0xc9, 0x2b, 0x85, 0xed, 0xf2, 0x5e, 0x71, 0x25, 0xa9, 0xe2, 0x39, 0xe5, 0xd0, 0x96, 0xb0,
	0x8e, 0x66, 0xd1, 0x19, 0x37, 0x50, 0x92, 0x85, 0x74, 0x99, 0x78, 0x5e, 0x29, 0xa4, 0xca, 0x47,
	0x7f, 0xf2, 0xfb, 0xeb, 0x88, 0xc5, 0xa5, 0x66, 0xe9, 0xaf, 0x3e, 0x42, 0xc9, 0x48, 0x8f, 0xb7,
	0x90, 0xe2, 0xc8, 0x4c, 0x92, 0xba, 0xe2, 0x08, 0x89, 0x49, 0xfe, 0xa4, 0xae, 0xb0, 0x83, 0x6f,
	0x50, 0x5a, 0xf2, 0x36, 0xc0, 0xfb, 0x0f, 0x6a, 0x38, 0x46, 0xf7, 0x1c, 0x3a, 0xf6, 0xd3, 0xdf,
	0x2e, 0xef, 0x4b, 0x97, 0xb0, 0xd1, 0x91, 0xaf, 0x08, 0x45, 0xc7, 0xa0, 0x4b, 0x53, 0xd1, 0xcb,
	0x5d, 0x99, 0x81, 0x0e, 0x7d, 0x3a, 0x93, 0xdf, 0x20, 0x8d, 0x7d, 0x84, 0xa6, 0xa6, 0xc3, 0x3d,
	0xc3, 0xb5, 0x2d, 0x91, 0x45, 0xa2, 0x90, 0xd4, 0x93, 0x52, 0xd3, 0xb5, 0x2d, 0x86, 0x0f, 0x11,
	0xf6, 0x61, 0x36, 0x34, 0x1d, 0x30, 0xfa, 0xd4, 0x25, 0x5c, 0x14, 0x96, 0x28, 0xdc, 0xd7, 0xd3,
	0x12, 0x69, 0x0b, 0xa0, 0x2a, 0xf5, 0xf8, 0x2d, 0x94, 0xe4, 0x43, 0x07, 0xd8, 0x90, 0x8e, 0xad,
	0x4c, 0x22, 0xaf, 0x14, 0xd6, 0xf4, 0xa5, 0x02, 0x6b, 0xe8, 0xfe, 0x08, 0xbc, 0x01, 0x10, 0x83,
	0xba, 0x7c, 0xea, 0xf2, 0xcc, 0x3d, 0xd9, 0xff, 0x9c, 0x2c, 0xc0, 0x9f, 0xfc, 0x4a, 0xf6, 0x03,
	0x20, 0x2d, 0x69, 0xa6, 0x6f, 0x8d, 0x56, 0xa4, 0x83, 0x67, 0x89, 0xa0, 0x94, 0x06, 0xf8, 0xb1,
	0xa3, 0x52, 0xda, 0x28, 0xe5, 0x67, 0x69, 0x93, 0x0b, 0xea, 0xd7, 0x92, 0x2a, 0x1f, 0xde, 0x9d,
	0xee, 0xcb, 0x8e, 0x45, 0x29, 0xd5, 0xc9, 0x05, 0xad, 0xdc, 0xbb, 0x99, 0xe7, 0x62, 0x3a, 0x62,
	0xa1, 0x82, 0xa9, 0xbf, 0xc6, 0x51, 0x32, 0xc2, 0xf1, 0xe7, 0x68, 0x7d, 0x04, 0x9e, 0x61, 0x5b,
	0xfe, 0xa4, 0x2b, 0xa7, 0x8b, 0x79, 0x6e, 0xad, 0x01, 0x5e, 0x5d, 0x7b, 0x31, 0xcf, 0x7d, 0x38,
	0xb0, 0xf9, 0xd0, 0xed, 0x15, 0xfb, 0x74, 0x52, 0x32, 0x2f, 0x61, 0x6c, 0x3a, 0x04, 0xf8, 0x57,
	0xd4, 0x19, 0x05, 0xd2, 0x51, 0x9f, 0x3a, 0x50, 0xba, 0x2c, 0xad, 0x5e, 0x8c, 0xa2, 0x74, 0xd6,
	0xd7, 0x46, 0xe0, 0xd5, 0x2d, 0xfc, 0x26, 0x4a, 0x0a, 0xfa, 0xfe, 0xd0, 0xb4, 0x49, 0xb0, 0x3d,
	0x9b, 0x23, 0xf0, 0xaa, 0x42, 0xc6, 0x6f, 0x20, 0x71, 0x36, 0xe4, 0xe8, 0x13, 0x12, 0xdb, 0x18,
	0xf9, 0x43, 0xc6, 0x65, 0xb4, 0xcb, 0x88, 0x39, 0x65, 0x43, 0xca, 0x8d, 0xde, 0x98, 0xf6, 0x47,
	0x06, 0x71, 0x27, 0x3d, 0x70, 0x64, 0x87, 0x13, 0xfa, 0xc3, 0x10, 0xac, 0x08, 0xac, 0x29, 0x21,
	0xfc, 0x3e, 0x7a, 0x30, 0x33, 0xc7, 0xb6, 0x65, 0x72, 0xea, 0x18, 0xa6, 0x65, 0x39, 0xc0, 0x58,
	0x66, 0x4d, 0xf2, 0xa6, 0x23, 0xe0, 0xc4, 0xd7, 0xe3, 0xc7, 0x68, 0x87, 0xb8, 0x13, 0x63, 0xe9,
	0x20, 0x3b, 0xc4, 0x32, 0xeb, 0x92, 0x1f, 0x13, 0x77, 0x72, 0x1e, 0x42, 0xb2, 0x59, 0x0c, 0x17,
	0x50, 0x5a, 0x78, 0x70, 0xca, 0xcd, 0x71, 0x68, 0xbd, 0x21, 0xad, 0xb7, 0x89, 0x3b, 0xe9, 0x08,
	0xb5, 0x6f, 0x79, 0xa0, 0xa3, 0xb7, 0xe5, 0x58, 0x34, 0x30, 0xfb, 0xdc, 0x9e, 0x99, 0x1c, 0xac,
	0xd6, 0x14, 0x1c, 0xc1, 0xc5, 0xa2, 0xd9, 0x1e, 0x21, 0x4c, 0x03, 0x65, 0x98, 0x2c, 0x84, 0xeb,
	0xfa, 0x20, 0x44, 0x4e, 0x42, 0xe0, 0xe0, 0x59, 0x1c, 0xbd, 0x23, 0x49, 0x4f, 0x04, 0x25, 0xb4,
	0xc6, 0x56, 0x03, 0x3c, 0x16, 0xe5, 0x18, 0xd1, 0x7e, 0x26, 0x1b, 0xce, 0xe4, 0xc6, 0x04, 0x0b,
	0xf3, 0xe4, 0xee, 0xc2, 0xfc, 0x3d, 0x89, 0x1c, 0xe1, 0x72, 0x79, 0xc4, 0x90, 0x98, 0x90, 0xd5,
	0x9f, 0x15, 0xb4, 0x11, 0x60, 0xb8, 0x8d, 0xe2, 0xd1, 0xd2, 0x54, 0x17, 0xf3, 0x5c, 0xfc, 0x55,
	0x37, 0x26, 0x6e, 0x5b, 0x78, 0x07, 0xad, 0xad, 0xae, 0x8a, 0x2f, 0xe0, 0x76, 0xf0, 0x3c, 0xc8,
	0xfb, 0x57, 0xf9, 0xf8, 0xc5, 0x3c, 0xf7, 0xd1, 0xbf, 0x0c, 0xb3, 0xf2, 0x80, 0x7c, 0x8d, 0xd4,
	0xbb, 0xad, 0x88, 0xda, 0xf8, 0x05, 0xda, 0xf0, 0xaf, 0x45, 0x30, 0x92, 0xca, 0xd3, 0xc5, 0x3c,
	0xb7, 0x2e, 0x13, 0x65, 0xaf, 0x56, 0xe6, 0xba, 0xbc, 0x18, 0x2c, 0x8a, 0x5f, 0xbb, 0xe4, 0xe0,
	0x10, 0x73, 0xec, 0xa3, 0xff, 0x5b, 0xfc, 0xf7, 0x7e, 0x52, 0x10, 0x5a, 0x3e, 0xc7, 0xf8, 0x10,
	0xed, 0x9d, 0xb7, 0x3a, 0x35, 0xa3, 0xdd, 0x39, 0xe9, 0x74, 0xdb, 0x46, 0xb7, 0xd9, 0x3e, 0xab,
	0x55, 0xeb, 0xa7, 0xf5, 0x9a, 0x96, 0x8e, 0xa9, 0xaf, 0x5d, 0x5d, 0xe7, 0x53, 0x5d, 0xc2, 0xa6,
	0xd0, 0xb7, 0x2f, 0x6c, 0xb0, 0xf0, 0x23, 0xb4, 0xbb, 0x6a, 0xdd, 0x6c, 0x75, 0x8c, 0xd3, 0x56,
	0xb7, 0xa9, 0xa5, 0x15, 0x75, 0xeb, 0xea, 0x3a, 0xbf, 0xd9, 0xa4, 0xfc, 0x94, 0xba, 0xc4, 0xc2,
	0xef, 0xa2, 0x87, 0xab, 0x86, 0x67, 0xb5, 0xa6, 0x56, 0x6f, 0x3e, 0x4d, 0xc7, 0xd5, 0xd4, 0xd5,
	0x75, 0x7e, 0xe3, 0x0c, 0x88, 0x65, 0x93, 0xc1, 0xcb, 0x56, 0x5a, 0xad, 0x5a, 0xd7, 0x6a, 0x5a,
	0x3a, 0xe1, 0x5b, 0x69, 0xd0, 0xb7, 0x2d, 0xb0, 0xd4, 0xcd, 0x6f, 0xbf, 0xcf, 0xc6, 0x7e, 0xfc,
	0x21, 0xab, 0x54, 0x9a, 0x37, 0xbf, 0x67, 0x63, 0x37, 0x8b, 0xac, 0xf2, 0x7c, 0x91, 0x55, 0x7e,
	0x5b, 0x64, 0x95, 0xef, 0x6e, 0xb3, 0xb1, 0xe7, 0xb7, 0xd9, 0xd8, 0x2f, 0xb7, 0xd9, 0xd8, 0xa7,
	0x8f, 0xff, 0x41, 0x73, 0xe4, 0xdf, 0xbb, 0xb7, 0x2e, 0xff, 0xcf, 0x1f, 0xfc, 0x11, 0x00, 0x00,
	0xff, 0xff, 0xaf, 0x23, 0x9c, 0xcd, 0x1e, 0x08, 0x00, 0x00,
}

func (m *QuerySignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VoteStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VoteStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureResponse_Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureResponse_Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureResponse_Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x10
	}
	if m.VoteStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VoteStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecoveryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecoveryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecoveryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeygenOutput != nil {
		{
			size, err := m.KeygenOutput.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Threshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PartyShareCounts) > 0 {
		dAtA4 := make([]byte, len(m.PartyShareCounts)*10)
		var j3 int
		for _, num := range m.PartyShareCounts {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PartyUids) > 0 {
		for iNdEx := len(m.PartyUids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PartyUids[iNdEx])
			copy(dAtA[i:], m.PartyUids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PartyUids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShareInfos) > 0 {
		for iNdEx := len(m.ShareInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShareInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyShareResponse_ShareInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyShareResponse_ShareInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyShareResponse_ShareInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumTotalShares != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumTotalShares))
		i--
		dAtA[i] = 0x38
	}
	if m.NumValidatorShares != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumValidatorShares))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SnapshotBlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SnapshotBlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.KeyRole) > 0 {
		i -= len(m.KeyRole)
		copy(dAtA[i:], m.KeyRole)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyRole)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyChain) > 0 {
		i -= len(m.KeyChain)
		copy(dAtA[i:], m.KeyChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeactivatedOperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeactivatedOperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeactivatedOperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddresses) > 0 {
		for iNdEx := len(m.OperatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OperatorAddresses[iNdEx])
			copy(dAtA[i:], m.OperatorAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveOldKeysValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveOldKeysValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveOldKeysValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeysInfo) > 0 {
		for iNdEx := len(m.KeysInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeysInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveOldKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveOldKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveOldKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyIDs) > 0 {
		for iNdEx := len(m.KeyIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyIDs[iNdEx])
			copy(dAtA[i:], m.KeyIDs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExternalKeyIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExternalKeyIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExternalKeyIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyIDs) > 0 {
		for iNdEx := len(m.KeyIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyIDs[iNdEx])
			copy(dAtA[i:], m.KeyIDs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.KeyIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteStatus != 0 {
		n += 1 + sovQuery(uint64(m.VoteStatus))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignatureResponse_Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteStatus != 0 {
		n += 1 + sovQuery(uint64(m.VoteStatus))
	}
	if m.Role != 0 {
		n += 1 + sovQuery(uint64(m.Role))
	}
	return n
}

func (m *QueryRecoveryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PartyUids) > 0 {
		for _, s := range m.PartyUids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PartyShareCounts) > 0 {
		l = 0
		for _, e := range m.PartyShareCounts {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.Threshold != 0 {
		n += 1 + sovQuery(uint64(m.Threshold))
	}
	if m.KeygenOutput != nil {
		l = m.KeygenOutput.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShareInfos) > 0 {
		for _, e := range m.ShareInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryKeyShareResponse_ShareInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KeyChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.KeyRole)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SnapshotBlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.SnapshotBlockNumber))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.NumValidatorShares != 0 {
		n += 1 + sovQuery(uint64(m.NumValidatorShares))
	}
	if m.NumTotalShares != 0 {
		n += 1 + sovQuery(uint64(m.NumTotalShares))
	}
	return n
}

func (m *QueryDeactivatedOperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorAddresses) > 0 {
		for _, s := range m.OperatorAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActiveOldKeysValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeysInfo) > 0 {
		for _, e := range m.KeysInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovQuery(uint64(m.Role))
	}
	return n
}

func (m *QueryActiveOldKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyIDs) > 0 {
		for _, s := range m.KeyIDs {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryExternalKeyIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyIDs) > 0 {
		for _, s := range m.KeyIDs {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteStatus", wireType)
			}
			m.VoteStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteStatus |= VoteStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &QuerySignatureResponse_Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureResponse_Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteStatus", wireType)
			}
			m.VoteStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteStatus |= VoteStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= exported.KeyRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecoveryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecoveryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecoveryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyUids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyUids = append(m.PartyUids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartyShareCounts = append(m.PartyShareCounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PartyShareCounts) == 0 {
					m.PartyShareCounts = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartyShareCounts = append(m.PartyShareCounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyShareCounts", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeygenOutput == nil {
				m.KeygenOutput = &tofnd.KeygenOutput{}
			}
			if err := m.KeygenOutput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareInfos = append(m.ShareInfos, QueryKeyShareResponse_ShareInfo{})
			if err := m.ShareInfos[len(m.ShareInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyShareResponse_ShareInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotBlockNumber", wireType)
			}
			m.SnapshotBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotBlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValidatorShares", wireType)
			}
			m.NumValidatorShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValidatorShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTotalShares", wireType)
			}
			m.NumTotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeactivatedOperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeactivatedOperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeactivatedOperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddresses = append(m.OperatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveOldKeysValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveOldKeysValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveOldKeysValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeysInfo = append(m.KeysInfo, QueryActiveOldKeysValidatorResponse_KeyInfo{})
			if err := m.KeysInfo[len(m.KeysInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveOldKeysValidatorResponse_KeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveOldKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveOldKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveOldKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyIDs = append(m.KeyIDs, github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExternalKeyIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExternalKeyIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExternalKeyIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyIDs = append(m.KeyIDs, github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
