// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tss/v1beta1/service.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/axelarnetwork/axelar-core/x/snapshot/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tss/v1beta1/service.proto", fileDescriptor_604dc337414bd075) }
func init() { golang_proto.RegisterFile("tss/v1beta1/service.proto", fileDescriptor_604dc337414bd075) }

var fileDescriptor_604dc337414bd075 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6b, 0xd4, 0x40,
	0x18, 0xde, 0x88, 0x54, 0x9c, 0xde, 0x86, 0x05, 0x69, 0x5c, 0x67, 0x25, 0xe0, 0x27, 0x98, 0xb1,
	0x7a, 0xf3, 0xe8, 0xb5, 0x2a, 0xa5, 0x51, 0x0f, 0xde, 0x26, 0xe1, 0xed, 0xec, 0x60, 0x3b, 0x93,
	0xce, 0xfb, 0x6e, 0xdd, 0x45, 0xbc, 0xf8, 0x0b, 0x04, 0xff, 0x90, 0x47, 0x8f, 0x05, 0x2f, 0x1e,
	0x65, 0xe3, 0xef, 0x10, 0x49, 0x76, 0xb2, 0x4d, 0xea, 0x2e, 0xf6, 0x96, 0xbc, 0xcf, 0x93, 0xe7,
	0x8b, 0xb0, 0x1d, 0x42, 0x94, 0xa7, 0xbb, 0x39, 0x90, 0xda, 0x95, 0x08, 0xfe, 0xd4, 0x14, 0x90,
	0x96, 0xde, 0x91, 0xe3, 0xdb, 0x84, 0x98, 0x06, 0x28, 0x1e, 0x6a, 0xa7, 0x5d, 0x73, 0x97, 0xf5,
	0xd3, 0x92, 0x12, 0x8f, 0xb4, 0x73, 0xfa, 0x08, 0xa4, 0x2a, 0x8d, 0x54, 0xd6, 0x3a, 0x52, 0x64,
	0x9c, 0xc5, 0x80, 0xee, 0xa0, 0x55, 0x25, 0x4e, 0x1c, 0xad, 0x0c, 0x68, 0x16, 0xa0, 0x61, 0xd7,
	0xb6, 0xbd, 0x3e, 0xf9, 0x73, 0x95, 0xb1, 0x97, 0xa8, 0xb3, 0x65, 0x0c, 0x4e, 0x6c, 0x3b, 0x23,
	0xe5, 0x69, 0x0f, 0xe6, 0x1a, 0x2c, 0x1f, 0xa7, 0x9d, 0x40, 0x69, 0x07, 0x39, 0x80, 0x93, 0x29,
	0x20, 0xc5, 0xb7, 0x37, 0x13, 0xb0, 0x74, 0x16, 0x21, 0x49, 0x3e, 0xff, 0xf8, 0xfd, 0xf5, 0xca,
	0x28, 0xb9, 0x21, 0xd5, 0x0c, 0x8e, 0x94, 0x97, 0x75, 0x0c, 0x3c, 0x27, 0x3e, 0x8b, 0x1e, 0x72,
	0x64, 0xc3, 0x7d, 0xef, 0x0a, 0x40, 0x5c, 0xde, 0x5e, 0x7b, 0x75, 0x78, 0x68, 0x0a, 0x7e, 0xbf,
	0xa7, 0xbe, 0x8e, 0xd2, 0xe6, 0x78, 0x70, 0x09, 0x66, 0x08, 0xb4, 0xd5, 0x04, 0x1a, 0xf0, 0x13,
	0x76, 0xfd, 0xa0, 0x5e, 0x0f, 0xf6, 0x60, 0xce, 0x6f, 0xf5, 0xbe, 0x5f, 0xdd, 0x5b, 0x79, 0xb1,
	0x09, 0x0e, 0x9a, 0x77, 0x1a, 0xcd, 0x71, 0x12, 0x77, 0x4b, 0x2a, 0x44, 0xa3, 0xad, 0xfc, 0x58,
	0x4c, 0x94, 0xb1, 0x9f, 0xea, 0x9e, 0x6f, 0x18, 0x7b, 0xeb, 0x08, 0xf6, 0xa7, 0x79, 0xed, 0xd9,
	0x17, 0x3d, 0x07, 0x5a, 0xd3, 0xf1, 0x46, 0xfc, 0x42, 0x93, 0x63, 0xc6, 0x43, 0xe3, 0xcc, 0xe8,
	0xd5, 0x78, 0x77, 0xd7, 0x4d, 0xd2, 0x21, 0xb4, 0x36, 0xf7, 0xfe, 0xcb, 0xbb, 0x60, 0xf7, 0x82,
	0x5d, 0xab, 0xc3, 0x64, 0x46, 0xf3, 0x9b, 0xff, 0x44, 0xcc, 0x8c, 0x6e, 0x85, 0x47, 0xeb, 0xc1,
	0xbe, 0xda, 0xf3, 0x57, 0xdf, 0x17, 0x22, 0x3a, 0x5b, 0x88, 0xe8, 0xd7, 0x42, 0x44, 0x5f, 0x2a,
	0x31, 0xf8, 0x56, 0x89, 0xe8, 0xac, 0x12, 0x83, 0x9f, 0x95, 0x18, 0xbc, 0x7b, 0xac, 0x0d, 0x4d,
	0xa6, 0x79, 0x5a, 0xb8, 0xe3, 0x30, 0xad, 0x05, 0xfa, 0xe0, 0xfc, 0xfb, 0xf0, 0xf6, 0xa8, 0x70,
	0x1e, 0xe4, 0xac, 0xd9, 0x9b, 0xe6, 0x25, 0x60, 0xbe, 0xd5, 0xfc, 0xd7, 0x4f, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x0c, 0xc9, 0x5f, 0x6e, 0x66, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	StartKeygen(ctx context.Context, in *StartKeygenRequest, opts ...grpc.CallOption) (*StartKeygenResponse, error)
	ProcessKeygenTraffic(ctx context.Context, in *ProcessKeygenTrafficRequest, opts ...grpc.CallOption) (*ProcessKeygenTrafficResponse, error)
	RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*RotateKeyResponse, error)
	VotePubKey(ctx context.Context, in *VotePubKeyRequest, opts ...grpc.CallOption) (*VotePubKeyResponse, error)
	ProcessSignTraffic(ctx context.Context, in *ProcessSignTrafficRequest, opts ...grpc.CallOption) (*ProcessSignTrafficResponse, error)
	VoteSig(ctx context.Context, in *VoteSigRequest, opts ...grpc.CallOption) (*VoteSigResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) StartKeygen(ctx context.Context, in *StartKeygenRequest, opts ...grpc.CallOption) (*StartKeygenResponse, error) {
	out := new(StartKeygenResponse)
	err := c.cc.Invoke(ctx, "/tss.v1beta1.MsgService/StartKeygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ProcessKeygenTraffic(ctx context.Context, in *ProcessKeygenTrafficRequest, opts ...grpc.CallOption) (*ProcessKeygenTrafficResponse, error) {
	out := new(ProcessKeygenTrafficResponse)
	err := c.cc.Invoke(ctx, "/tss.v1beta1.MsgService/ProcessKeygenTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RotateKey(ctx context.Context, in *RotateKeyRequest, opts ...grpc.CallOption) (*RotateKeyResponse, error) {
	out := new(RotateKeyResponse)
	err := c.cc.Invoke(ctx, "/tss.v1beta1.MsgService/RotateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) VotePubKey(ctx context.Context, in *VotePubKeyRequest, opts ...grpc.CallOption) (*VotePubKeyResponse, error) {
	out := new(VotePubKeyResponse)
	err := c.cc.Invoke(ctx, "/tss.v1beta1.MsgService/VotePubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ProcessSignTraffic(ctx context.Context, in *ProcessSignTrafficRequest, opts ...grpc.CallOption) (*ProcessSignTrafficResponse, error) {
	out := new(ProcessSignTrafficResponse)
	err := c.cc.Invoke(ctx, "/tss.v1beta1.MsgService/ProcessSignTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) VoteSig(ctx context.Context, in *VoteSigRequest, opts ...grpc.CallOption) (*VoteSigResponse, error) {
	out := new(VoteSigResponse)
	err := c.cc.Invoke(ctx, "/tss.v1beta1.MsgService/VoteSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	StartKeygen(context.Context, *StartKeygenRequest) (*StartKeygenResponse, error)
	ProcessKeygenTraffic(context.Context, *ProcessKeygenTrafficRequest) (*ProcessKeygenTrafficResponse, error)
	RotateKey(context.Context, *RotateKeyRequest) (*RotateKeyResponse, error)
	VotePubKey(context.Context, *VotePubKeyRequest) (*VotePubKeyResponse, error)
	ProcessSignTraffic(context.Context, *ProcessSignTrafficRequest) (*ProcessSignTrafficResponse, error)
	VoteSig(context.Context, *VoteSigRequest) (*VoteSigResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) StartKeygen(ctx context.Context, req *StartKeygenRequest) (*StartKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKeygen not implemented")
}
func (*UnimplementedMsgServiceServer) ProcessKeygenTraffic(ctx context.Context, req *ProcessKeygenTrafficRequest) (*ProcessKeygenTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessKeygenTraffic not implemented")
}
func (*UnimplementedMsgServiceServer) RotateKey(ctx context.Context, req *RotateKeyRequest) (*RotateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKey not implemented")
}
func (*UnimplementedMsgServiceServer) VotePubKey(ctx context.Context, req *VotePubKeyRequest) (*VotePubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePubKey not implemented")
}
func (*UnimplementedMsgServiceServer) ProcessSignTraffic(ctx context.Context, req *ProcessSignTrafficRequest) (*ProcessSignTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSignTraffic not implemented")
}
func (*UnimplementedMsgServiceServer) VoteSig(ctx context.Context, req *VoteSigRequest) (*VoteSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSig not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_StartKeygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).StartKeygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.v1beta1.MsgService/StartKeygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).StartKeygen(ctx, req.(*StartKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ProcessKeygenTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessKeygenTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ProcessKeygenTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.v1beta1.MsgService/ProcessKeygenTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ProcessKeygenTraffic(ctx, req.(*ProcessKeygenTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RotateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RotateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.v1beta1.MsgService/RotateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RotateKey(ctx, req.(*RotateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_VotePubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotePubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).VotePubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.v1beta1.MsgService/VotePubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).VotePubKey(ctx, req.(*VotePubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ProcessSignTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSignTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ProcessSignTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.v1beta1.MsgService/ProcessSignTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ProcessSignTraffic(ctx, req.(*ProcessSignTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_VoteSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).VoteSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.v1beta1.MsgService/VoteSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).VoteSig(ctx, req.(*VoteSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tss.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartKeygen",
			Handler:    _MsgService_StartKeygen_Handler,
		},
		{
			MethodName: "ProcessKeygenTraffic",
			Handler:    _MsgService_ProcessKeygenTraffic_Handler,
		},
		{
			MethodName: "RotateKey",
			Handler:    _MsgService_RotateKey_Handler,
		},
		{
			MethodName: "VotePubKey",
			Handler:    _MsgService_VotePubKey_Handler,
		},
		{
			MethodName: "ProcessSignTraffic",
			Handler:    _MsgService_ProcessSignTraffic_Handler,
		},
		{
			MethodName: "VoteSig",
			Handler:    _MsgService_VoteSig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tss/v1beta1/service.proto",
}
