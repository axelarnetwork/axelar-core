// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	context "context"
	"crypto/ecdsa"
	utils "github.com/axelarnetwork/axelar-core/utils"
	nexus "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	reward "github.com/axelarnetwork/axelar-core/x/reward/exported"
	github_com_axelarnetwork_axelar_core_x_snapshot_exported "github.com/axelarnetwork/axelar-core/x/snapshot/exported"
	github_com_axelarnetwork_axelar_core_x_tss_exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	tofnd "github.com/axelarnetwork/axelar-core/x/tss/tofnd"
	"github.com/axelarnetwork/axelar-core/x/tss/types"
	exported1 "github.com/axelarnetwork/axelar-core/x/vote/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
	"github.com/tendermint/tendermint/libs/log"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"sync"
)

// Ensure, that TofndClientMock does implement types.TofndClient.
// If this is not the case, regenerate this file with moq.
var _ types.TofndClient = &TofndClientMock{}

// TofndClientMock is a mock implementation of types.TofndClient.
//
// 	func TestSomethingThatUsesTofndClient(t *testing.T) {
//
// 		// make and configure a mocked types.TofndClient
// 		mockedTofndClient := &TofndClientMock{
// 			KeyPresenceFunc: func(ctx context.Context, in *tofnd.KeyPresenceRequest, opts ...grpc.CallOption) (*tofnd.KeyPresenceResponse, error) {
// 				panic("mock out the KeyPresence method")
// 			},
// 			KeygenFunc: func(ctx context.Context, opts ...grpc.CallOption) (tofnd.GG20_KeygenClient, error) {
// 				panic("mock out the Keygen method")
// 			},
// 			RecoverFunc: func(ctx context.Context, in *tofnd.RecoverRequest, opts ...grpc.CallOption) (*tofnd.RecoverResponse, error) {
// 				panic("mock out the Recover method")
// 			},
// 			SignFunc: func(ctx context.Context, opts ...grpc.CallOption) (tofnd.GG20_SignClient, error) {
// 				panic("mock out the Sign method")
// 			},
// 		}
//
// 		// use mockedTofndClient in code that requires types.TofndClient
// 		// and then make assertions.
//
// 	}
type TofndClientMock struct {
	// KeyPresenceFunc mocks the KeyPresence method.
	KeyPresenceFunc func(ctx context.Context, in *tofnd.KeyPresenceRequest, opts ...grpc.CallOption) (*tofnd.KeyPresenceResponse, error)

	// KeygenFunc mocks the Keygen method.
	KeygenFunc func(ctx context.Context, opts ...grpc.CallOption) (tofnd.GG20_KeygenClient, error)

	// RecoverFunc mocks the Recover method.
	RecoverFunc func(ctx context.Context, in *tofnd.RecoverRequest, opts ...grpc.CallOption) (*tofnd.RecoverResponse, error)

	// SignFunc mocks the Sign method.
	SignFunc func(ctx context.Context, opts ...grpc.CallOption) (tofnd.GG20_SignClient, error)

	// calls tracks calls to the methods.
	calls struct {
		// KeyPresence holds details about calls to the KeyPresence method.
		KeyPresence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *tofnd.KeyPresenceRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Keygen holds details about calls to the Keygen method.
		Keygen []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Recover holds details about calls to the Recover method.
		Recover []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *tofnd.RecoverRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Sign holds details about calls to the Sign method.
		Sign []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockKeyPresence sync.RWMutex
	lockKeygen      sync.RWMutex
	lockRecover     sync.RWMutex
	lockSign        sync.RWMutex
}

// KeyPresence calls KeyPresenceFunc.
func (mock *TofndClientMock) KeyPresence(ctx context.Context, in *tofnd.KeyPresenceRequest, opts ...grpc.CallOption) (*tofnd.KeyPresenceResponse, error) {
	if mock.KeyPresenceFunc == nil {
		panic("TofndClientMock.KeyPresenceFunc: method is nil but TofndClient.KeyPresence was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *tofnd.KeyPresenceRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockKeyPresence.Lock()
	mock.calls.KeyPresence = append(mock.calls.KeyPresence, callInfo)
	mock.lockKeyPresence.Unlock()
	return mock.KeyPresenceFunc(ctx, in, opts...)
}

// KeyPresenceCalls gets all the calls that were made to KeyPresence.
// Check the length with:
//     len(mockedTofndClient.KeyPresenceCalls())
func (mock *TofndClientMock) KeyPresenceCalls() []struct {
	Ctx  context.Context
	In   *tofnd.KeyPresenceRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *tofnd.KeyPresenceRequest
		Opts []grpc.CallOption
	}
	mock.lockKeyPresence.RLock()
	calls = mock.calls.KeyPresence
	mock.lockKeyPresence.RUnlock()
	return calls
}

// Keygen calls KeygenFunc.
func (mock *TofndClientMock) Keygen(ctx context.Context, opts ...grpc.CallOption) (tofnd.GG20_KeygenClient, error) {
	if mock.KeygenFunc == nil {
		panic("TofndClientMock.KeygenFunc: method is nil but TofndClient.Keygen was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockKeygen.Lock()
	mock.calls.Keygen = append(mock.calls.Keygen, callInfo)
	mock.lockKeygen.Unlock()
	return mock.KeygenFunc(ctx, opts...)
}

// KeygenCalls gets all the calls that were made to Keygen.
// Check the length with:
//     len(mockedTofndClient.KeygenCalls())
func (mock *TofndClientMock) KeygenCalls() []struct {
	Ctx  context.Context
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}
	mock.lockKeygen.RLock()
	calls = mock.calls.Keygen
	mock.lockKeygen.RUnlock()
	return calls
}

// Recover calls RecoverFunc.
func (mock *TofndClientMock) Recover(ctx context.Context, in *tofnd.RecoverRequest, opts ...grpc.CallOption) (*tofnd.RecoverResponse, error) {
	if mock.RecoverFunc == nil {
		panic("TofndClientMock.RecoverFunc: method is nil but TofndClient.Recover was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *tofnd.RecoverRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRecover.Lock()
	mock.calls.Recover = append(mock.calls.Recover, callInfo)
	mock.lockRecover.Unlock()
	return mock.RecoverFunc(ctx, in, opts...)
}

// RecoverCalls gets all the calls that were made to Recover.
// Check the length with:
//     len(mockedTofndClient.RecoverCalls())
func (mock *TofndClientMock) RecoverCalls() []struct {
	Ctx  context.Context
	In   *tofnd.RecoverRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *tofnd.RecoverRequest
		Opts []grpc.CallOption
	}
	mock.lockRecover.RLock()
	calls = mock.calls.Recover
	mock.lockRecover.RUnlock()
	return calls
}

// Sign calls SignFunc.
func (mock *TofndClientMock) Sign(ctx context.Context, opts ...grpc.CallOption) (tofnd.GG20_SignClient, error) {
	if mock.SignFunc == nil {
		panic("TofndClientMock.SignFunc: method is nil but TofndClient.Sign was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockSign.Lock()
	mock.calls.Sign = append(mock.calls.Sign, callInfo)
	mock.lockSign.Unlock()
	return mock.SignFunc(ctx, opts...)
}

// SignCalls gets all the calls that were made to Sign.
// Check the length with:
//     len(mockedTofndClient.SignCalls())
func (mock *TofndClientMock) SignCalls() []struct {
	Ctx  context.Context
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		Opts []grpc.CallOption
	}
	mock.lockSign.RLock()
	calls = mock.calls.Sign
	mock.lockSign.RUnlock()
	return calls
}

// Ensure, that TofndKeyGenClientMock does implement types.TofndKeyGenClient.
// If this is not the case, regenerate this file with moq.
var _ types.TofndKeyGenClient = &TofndKeyGenClientMock{}

// TofndKeyGenClientMock is a mock implementation of types.TofndKeyGenClient.
//
// 	func TestSomethingThatUsesTofndKeyGenClient(t *testing.T) {
//
// 		// make and configure a mocked types.TofndKeyGenClient
// 		mockedTofndKeyGenClient := &TofndKeyGenClientMock{
// 			CloseSendFunc: func() error {
// 				panic("mock out the CloseSend method")
// 			},
// 			ContextFunc: func() context.Context {
// 				panic("mock out the Context method")
// 			},
// 			HeaderFunc: func() (metadata.MD, error) {
// 				panic("mock out the Header method")
// 			},
// 			RecvFunc: func() (*tofnd.MessageOut, error) {
// 				panic("mock out the Recv method")
// 			},
// 			RecvMsgFunc: func(m interface{}) error {
// 				panic("mock out the RecvMsg method")
// 			},
// 			SendFunc: func(messageIn *tofnd.MessageIn) error {
// 				panic("mock out the Send method")
// 			},
// 			SendMsgFunc: func(m interface{}) error {
// 				panic("mock out the SendMsg method")
// 			},
// 			TrailerFunc: func() metadata.MD {
// 				panic("mock out the Trailer method")
// 			},
// 		}
//
// 		// use mockedTofndKeyGenClient in code that requires types.TofndKeyGenClient
// 		// and then make assertions.
//
// 	}
type TofndKeyGenClientMock struct {
	// CloseSendFunc mocks the CloseSend method.
	CloseSendFunc func() error

	// ContextFunc mocks the Context method.
	ContextFunc func() context.Context

	// HeaderFunc mocks the Header method.
	HeaderFunc func() (metadata.MD, error)

	// RecvFunc mocks the Recv method.
	RecvFunc func() (*tofnd.MessageOut, error)

	// RecvMsgFunc mocks the RecvMsg method.
	RecvMsgFunc func(m interface{}) error

	// SendFunc mocks the Send method.
	SendFunc func(messageIn *tofnd.MessageIn) error

	// SendMsgFunc mocks the SendMsg method.
	SendMsgFunc func(m interface{}) error

	// TrailerFunc mocks the Trailer method.
	TrailerFunc func() metadata.MD

	// calls tracks calls to the methods.
	calls struct {
		// CloseSend holds details about calls to the CloseSend method.
		CloseSend []struct {
		}
		// Context holds details about calls to the Context method.
		Context []struct {
		}
		// Header holds details about calls to the Header method.
		Header []struct {
		}
		// Recv holds details about calls to the Recv method.
		Recv []struct {
		}
		// RecvMsg holds details about calls to the RecvMsg method.
		RecvMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// MessageIn is the messageIn argument value.
			MessageIn *tofnd.MessageIn
		}
		// SendMsg holds details about calls to the SendMsg method.
		SendMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// Trailer holds details about calls to the Trailer method.
		Trailer []struct {
		}
	}
	lockCloseSend sync.RWMutex
	lockContext   sync.RWMutex
	lockHeader    sync.RWMutex
	lockRecv      sync.RWMutex
	lockRecvMsg   sync.RWMutex
	lockSend      sync.RWMutex
	lockSendMsg   sync.RWMutex
	lockTrailer   sync.RWMutex
}

// CloseSend calls CloseSendFunc.
func (mock *TofndKeyGenClientMock) CloseSend() error {
	if mock.CloseSendFunc == nil {
		panic("TofndKeyGenClientMock.CloseSendFunc: method is nil but TofndKeyGenClient.CloseSend was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCloseSend.Lock()
	mock.calls.CloseSend = append(mock.calls.CloseSend, callInfo)
	mock.lockCloseSend.Unlock()
	return mock.CloseSendFunc()
}

// CloseSendCalls gets all the calls that were made to CloseSend.
// Check the length with:
//     len(mockedTofndKeyGenClient.CloseSendCalls())
func (mock *TofndKeyGenClientMock) CloseSendCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCloseSend.RLock()
	calls = mock.calls.CloseSend
	mock.lockCloseSend.RUnlock()
	return calls
}

// Context calls ContextFunc.
func (mock *TofndKeyGenClientMock) Context() context.Context {
	if mock.ContextFunc == nil {
		panic("TofndKeyGenClientMock.ContextFunc: method is nil but TofndKeyGenClient.Context was just called")
	}
	callInfo := struct {
	}{}
	mock.lockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	mock.lockContext.Unlock()
	return mock.ContextFunc()
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//     len(mockedTofndKeyGenClient.ContextCalls())
func (mock *TofndKeyGenClientMock) ContextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContext.RLock()
	calls = mock.calls.Context
	mock.lockContext.RUnlock()
	return calls
}

// Header calls HeaderFunc.
func (mock *TofndKeyGenClientMock) Header() (metadata.MD, error) {
	if mock.HeaderFunc == nil {
		panic("TofndKeyGenClientMock.HeaderFunc: method is nil but TofndKeyGenClient.Header was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHeader.Lock()
	mock.calls.Header = append(mock.calls.Header, callInfo)
	mock.lockHeader.Unlock()
	return mock.HeaderFunc()
}

// HeaderCalls gets all the calls that were made to Header.
// Check the length with:
//     len(mockedTofndKeyGenClient.HeaderCalls())
func (mock *TofndKeyGenClientMock) HeaderCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHeader.RLock()
	calls = mock.calls.Header
	mock.lockHeader.RUnlock()
	return calls
}

// Recv calls RecvFunc.
func (mock *TofndKeyGenClientMock) Recv() (*tofnd.MessageOut, error) {
	if mock.RecvFunc == nil {
		panic("TofndKeyGenClientMock.RecvFunc: method is nil but TofndKeyGenClient.Recv was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRecv.Lock()
	mock.calls.Recv = append(mock.calls.Recv, callInfo)
	mock.lockRecv.Unlock()
	return mock.RecvFunc()
}

// RecvCalls gets all the calls that were made to Recv.
// Check the length with:
//     len(mockedTofndKeyGenClient.RecvCalls())
func (mock *TofndKeyGenClientMock) RecvCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRecv.RLock()
	calls = mock.calls.Recv
	mock.lockRecv.RUnlock()
	return calls
}

// RecvMsg calls RecvMsgFunc.
func (mock *TofndKeyGenClientMock) RecvMsg(m interface{}) error {
	if mock.RecvMsgFunc == nil {
		panic("TofndKeyGenClientMock.RecvMsgFunc: method is nil but TofndKeyGenClient.RecvMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockRecvMsg.Lock()
	mock.calls.RecvMsg = append(mock.calls.RecvMsg, callInfo)
	mock.lockRecvMsg.Unlock()
	return mock.RecvMsgFunc(m)
}

// RecvMsgCalls gets all the calls that were made to RecvMsg.
// Check the length with:
//     len(mockedTofndKeyGenClient.RecvMsgCalls())
func (mock *TofndKeyGenClientMock) RecvMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockRecvMsg.RLock()
	calls = mock.calls.RecvMsg
	mock.lockRecvMsg.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *TofndKeyGenClientMock) Send(messageIn *tofnd.MessageIn) error {
	if mock.SendFunc == nil {
		panic("TofndKeyGenClientMock.SendFunc: method is nil but TofndKeyGenClient.Send was just called")
	}
	callInfo := struct {
		MessageIn *tofnd.MessageIn
	}{
		MessageIn: messageIn,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(messageIn)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedTofndKeyGenClient.SendCalls())
func (mock *TofndKeyGenClientMock) SendCalls() []struct {
	MessageIn *tofnd.MessageIn
} {
	var calls []struct {
		MessageIn *tofnd.MessageIn
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// SendMsg calls SendMsgFunc.
func (mock *TofndKeyGenClientMock) SendMsg(m interface{}) error {
	if mock.SendMsgFunc == nil {
		panic("TofndKeyGenClientMock.SendMsgFunc: method is nil but TofndKeyGenClient.SendMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockSendMsg.Lock()
	mock.calls.SendMsg = append(mock.calls.SendMsg, callInfo)
	mock.lockSendMsg.Unlock()
	return mock.SendMsgFunc(m)
}

// SendMsgCalls gets all the calls that were made to SendMsg.
// Check the length with:
//     len(mockedTofndKeyGenClient.SendMsgCalls())
func (mock *TofndKeyGenClientMock) SendMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockSendMsg.RLock()
	calls = mock.calls.SendMsg
	mock.lockSendMsg.RUnlock()
	return calls
}

// Trailer calls TrailerFunc.
func (mock *TofndKeyGenClientMock) Trailer() metadata.MD {
	if mock.TrailerFunc == nil {
		panic("TofndKeyGenClientMock.TrailerFunc: method is nil but TofndKeyGenClient.Trailer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTrailer.Lock()
	mock.calls.Trailer = append(mock.calls.Trailer, callInfo)
	mock.lockTrailer.Unlock()
	return mock.TrailerFunc()
}

// TrailerCalls gets all the calls that were made to Trailer.
// Check the length with:
//     len(mockedTofndKeyGenClient.TrailerCalls())
func (mock *TofndKeyGenClientMock) TrailerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTrailer.RLock()
	calls = mock.calls.Trailer
	mock.lockTrailer.RUnlock()
	return calls
}

// Ensure, that TofndSignClientMock does implement types.TofndSignClient.
// If this is not the case, regenerate this file with moq.
var _ types.TofndSignClient = &TofndSignClientMock{}

// TofndSignClientMock is a mock implementation of types.TofndSignClient.
//
// 	func TestSomethingThatUsesTofndSignClient(t *testing.T) {
//
// 		// make and configure a mocked types.TofndSignClient
// 		mockedTofndSignClient := &TofndSignClientMock{
// 			CloseSendFunc: func() error {
// 				panic("mock out the CloseSend method")
// 			},
// 			ContextFunc: func() context.Context {
// 				panic("mock out the Context method")
// 			},
// 			HeaderFunc: func() (metadata.MD, error) {
// 				panic("mock out the Header method")
// 			},
// 			RecvFunc: func() (*tofnd.MessageOut, error) {
// 				panic("mock out the Recv method")
// 			},
// 			RecvMsgFunc: func(m interface{}) error {
// 				panic("mock out the RecvMsg method")
// 			},
// 			SendFunc: func(messageIn *tofnd.MessageIn) error {
// 				panic("mock out the Send method")
// 			},
// 			SendMsgFunc: func(m interface{}) error {
// 				panic("mock out the SendMsg method")
// 			},
// 			TrailerFunc: func() metadata.MD {
// 				panic("mock out the Trailer method")
// 			},
// 		}
//
// 		// use mockedTofndSignClient in code that requires types.TofndSignClient
// 		// and then make assertions.
//
// 	}
type TofndSignClientMock struct {
	// CloseSendFunc mocks the CloseSend method.
	CloseSendFunc func() error

	// ContextFunc mocks the Context method.
	ContextFunc func() context.Context

	// HeaderFunc mocks the Header method.
	HeaderFunc func() (metadata.MD, error)

	// RecvFunc mocks the Recv method.
	RecvFunc func() (*tofnd.MessageOut, error)

	// RecvMsgFunc mocks the RecvMsg method.
	RecvMsgFunc func(m interface{}) error

	// SendFunc mocks the Send method.
	SendFunc func(messageIn *tofnd.MessageIn) error

	// SendMsgFunc mocks the SendMsg method.
	SendMsgFunc func(m interface{}) error

	// TrailerFunc mocks the Trailer method.
	TrailerFunc func() metadata.MD

	// calls tracks calls to the methods.
	calls struct {
		// CloseSend holds details about calls to the CloseSend method.
		CloseSend []struct {
		}
		// Context holds details about calls to the Context method.
		Context []struct {
		}
		// Header holds details about calls to the Header method.
		Header []struct {
		}
		// Recv holds details about calls to the Recv method.
		Recv []struct {
		}
		// RecvMsg holds details about calls to the RecvMsg method.
		RecvMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// MessageIn is the messageIn argument value.
			MessageIn *tofnd.MessageIn
		}
		// SendMsg holds details about calls to the SendMsg method.
		SendMsg []struct {
			// M is the m argument value.
			M interface{}
		}
		// Trailer holds details about calls to the Trailer method.
		Trailer []struct {
		}
	}
	lockCloseSend sync.RWMutex
	lockContext   sync.RWMutex
	lockHeader    sync.RWMutex
	lockRecv      sync.RWMutex
	lockRecvMsg   sync.RWMutex
	lockSend      sync.RWMutex
	lockSendMsg   sync.RWMutex
	lockTrailer   sync.RWMutex
}

// CloseSend calls CloseSendFunc.
func (mock *TofndSignClientMock) CloseSend() error {
	if mock.CloseSendFunc == nil {
		panic("TofndSignClientMock.CloseSendFunc: method is nil but TofndSignClient.CloseSend was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCloseSend.Lock()
	mock.calls.CloseSend = append(mock.calls.CloseSend, callInfo)
	mock.lockCloseSend.Unlock()
	return mock.CloseSendFunc()
}

// CloseSendCalls gets all the calls that were made to CloseSend.
// Check the length with:
//     len(mockedTofndSignClient.CloseSendCalls())
func (mock *TofndSignClientMock) CloseSendCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCloseSend.RLock()
	calls = mock.calls.CloseSend
	mock.lockCloseSend.RUnlock()
	return calls
}

// Context calls ContextFunc.
func (mock *TofndSignClientMock) Context() context.Context {
	if mock.ContextFunc == nil {
		panic("TofndSignClientMock.ContextFunc: method is nil but TofndSignClient.Context was just called")
	}
	callInfo := struct {
	}{}
	mock.lockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	mock.lockContext.Unlock()
	return mock.ContextFunc()
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//     len(mockedTofndSignClient.ContextCalls())
func (mock *TofndSignClientMock) ContextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContext.RLock()
	calls = mock.calls.Context
	mock.lockContext.RUnlock()
	return calls
}

// Header calls HeaderFunc.
func (mock *TofndSignClientMock) Header() (metadata.MD, error) {
	if mock.HeaderFunc == nil {
		panic("TofndSignClientMock.HeaderFunc: method is nil but TofndSignClient.Header was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHeader.Lock()
	mock.calls.Header = append(mock.calls.Header, callInfo)
	mock.lockHeader.Unlock()
	return mock.HeaderFunc()
}

// HeaderCalls gets all the calls that were made to Header.
// Check the length with:
//     len(mockedTofndSignClient.HeaderCalls())
func (mock *TofndSignClientMock) HeaderCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHeader.RLock()
	calls = mock.calls.Header
	mock.lockHeader.RUnlock()
	return calls
}

// Recv calls RecvFunc.
func (mock *TofndSignClientMock) Recv() (*tofnd.MessageOut, error) {
	if mock.RecvFunc == nil {
		panic("TofndSignClientMock.RecvFunc: method is nil but TofndSignClient.Recv was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRecv.Lock()
	mock.calls.Recv = append(mock.calls.Recv, callInfo)
	mock.lockRecv.Unlock()
	return mock.RecvFunc()
}

// RecvCalls gets all the calls that were made to Recv.
// Check the length with:
//     len(mockedTofndSignClient.RecvCalls())
func (mock *TofndSignClientMock) RecvCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRecv.RLock()
	calls = mock.calls.Recv
	mock.lockRecv.RUnlock()
	return calls
}

// RecvMsg calls RecvMsgFunc.
func (mock *TofndSignClientMock) RecvMsg(m interface{}) error {
	if mock.RecvMsgFunc == nil {
		panic("TofndSignClientMock.RecvMsgFunc: method is nil but TofndSignClient.RecvMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockRecvMsg.Lock()
	mock.calls.RecvMsg = append(mock.calls.RecvMsg, callInfo)
	mock.lockRecvMsg.Unlock()
	return mock.RecvMsgFunc(m)
}

// RecvMsgCalls gets all the calls that were made to RecvMsg.
// Check the length with:
//     len(mockedTofndSignClient.RecvMsgCalls())
func (mock *TofndSignClientMock) RecvMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockRecvMsg.RLock()
	calls = mock.calls.RecvMsg
	mock.lockRecvMsg.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *TofndSignClientMock) Send(messageIn *tofnd.MessageIn) error {
	if mock.SendFunc == nil {
		panic("TofndSignClientMock.SendFunc: method is nil but TofndSignClient.Send was just called")
	}
	callInfo := struct {
		MessageIn *tofnd.MessageIn
	}{
		MessageIn: messageIn,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(messageIn)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedTofndSignClient.SendCalls())
func (mock *TofndSignClientMock) SendCalls() []struct {
	MessageIn *tofnd.MessageIn
} {
	var calls []struct {
		MessageIn *tofnd.MessageIn
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// SendMsg calls SendMsgFunc.
func (mock *TofndSignClientMock) SendMsg(m interface{}) error {
	if mock.SendMsgFunc == nil {
		panic("TofndSignClientMock.SendMsgFunc: method is nil but TofndSignClient.SendMsg was just called")
	}
	callInfo := struct {
		M interface{}
	}{
		M: m,
	}
	mock.lockSendMsg.Lock()
	mock.calls.SendMsg = append(mock.calls.SendMsg, callInfo)
	mock.lockSendMsg.Unlock()
	return mock.SendMsgFunc(m)
}

// SendMsgCalls gets all the calls that were made to SendMsg.
// Check the length with:
//     len(mockedTofndSignClient.SendMsgCalls())
func (mock *TofndSignClientMock) SendMsgCalls() []struct {
	M interface{}
} {
	var calls []struct {
		M interface{}
	}
	mock.lockSendMsg.RLock()
	calls = mock.calls.SendMsg
	mock.lockSendMsg.RUnlock()
	return calls
}

// Trailer calls TrailerFunc.
func (mock *TofndSignClientMock) Trailer() metadata.MD {
	if mock.TrailerFunc == nil {
		panic("TofndSignClientMock.TrailerFunc: method is nil but TofndSignClient.Trailer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTrailer.Lock()
	mock.calls.Trailer = append(mock.calls.Trailer, callInfo)
	mock.lockTrailer.Unlock()
	return mock.TrailerFunc()
}

// TrailerCalls gets all the calls that were made to Trailer.
// Check the length with:
//     len(mockedTofndSignClient.TrailerCalls())
func (mock *TofndSignClientMock) TrailerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTrailer.RLock()
	calls = mock.calls.Trailer
	mock.lockTrailer.RUnlock()
	return calls
}

// Ensure, that VoterMock does implement types.Voter.
// If this is not the case, regenerate this file with moq.
var _ types.Voter = &VoterMock{}

// VoterMock is a mock implementation of types.Voter.
//
// 	func TestSomethingThatUsesVoter(t *testing.T) {
//
// 		// make and configure a mocked types.Voter
// 		mockedVoter := &VoterMock{
// 			GetPollFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, pollKey exported1.PollKey) exported1.Poll {
// 				panic("mock out the GetPoll method")
// 			},
// 			InitializePollWithSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error {
// 				panic("mock out the InitializePollWithSnapshot method")
// 			},
// 		}
//
// 		// use mockedVoter in code that requires types.Voter
// 		// and then make assertions.
//
// 	}
type VoterMock struct {
	// GetPollFunc mocks the GetPoll method.
	GetPollFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, pollKey exported1.PollKey) exported1.Poll

	// InitializePollWithSnapshotFunc mocks the InitializePollWithSnapshot method.
	InitializePollWithSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error

	// calls tracks calls to the methods.
	calls struct {
		// GetPoll holds details about calls to the GetPoll method.
		GetPoll []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// PollKey is the pollKey argument value.
			PollKey exported1.PollKey
		}
		// InitializePollWithSnapshot holds details about calls to the InitializePollWithSnapshot method.
		InitializePollWithSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Key is the key argument value.
			Key exported1.PollKey
			// SnapshotSeqNo is the snapshotSeqNo argument value.
			SnapshotSeqNo int64
			// PollProperties is the pollProperties argument value.
			PollProperties []exported1.PollProperty
		}
	}
	lockGetPoll                    sync.RWMutex
	lockInitializePollWithSnapshot sync.RWMutex
}

// GetPoll calls GetPollFunc.
func (mock *VoterMock) GetPoll(ctx github_com_cosmos_cosmos_sdk_types.Context, pollKey exported1.PollKey) exported1.Poll {
	if mock.GetPollFunc == nil {
		panic("VoterMock.GetPollFunc: method is nil but Voter.GetPoll was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		PollKey exported1.PollKey
	}{
		Ctx:     ctx,
		PollKey: pollKey,
	}
	mock.lockGetPoll.Lock()
	mock.calls.GetPoll = append(mock.calls.GetPoll, callInfo)
	mock.lockGetPoll.Unlock()
	return mock.GetPollFunc(ctx, pollKey)
}

// GetPollCalls gets all the calls that were made to GetPoll.
// Check the length with:
//     len(mockedVoter.GetPollCalls())
func (mock *VoterMock) GetPollCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	PollKey exported1.PollKey
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		PollKey exported1.PollKey
	}
	mock.lockGetPoll.RLock()
	calls = mock.calls.GetPoll
	mock.lockGetPoll.RUnlock()
	return calls
}

// InitializePollWithSnapshot calls InitializePollWithSnapshotFunc.
func (mock *VoterMock) InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error {
	if mock.InitializePollWithSnapshotFunc == nil {
		panic("VoterMock.InitializePollWithSnapshotFunc: method is nil but Voter.InitializePollWithSnapshot was just called")
	}
	callInfo := struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		Key            exported1.PollKey
		SnapshotSeqNo  int64
		PollProperties []exported1.PollProperty
	}{
		Ctx:            ctx,
		Key:            key,
		SnapshotSeqNo:  snapshotSeqNo,
		PollProperties: pollProperties,
	}
	mock.lockInitializePollWithSnapshot.Lock()
	mock.calls.InitializePollWithSnapshot = append(mock.calls.InitializePollWithSnapshot, callInfo)
	mock.lockInitializePollWithSnapshot.Unlock()
	return mock.InitializePollWithSnapshotFunc(ctx, key, snapshotSeqNo, pollProperties...)
}

// InitializePollWithSnapshotCalls gets all the calls that were made to InitializePollWithSnapshot.
// Check the length with:
//     len(mockedVoter.InitializePollWithSnapshotCalls())
func (mock *VoterMock) InitializePollWithSnapshotCalls() []struct {
	Ctx            github_com_cosmos_cosmos_sdk_types.Context
	Key            exported1.PollKey
	SnapshotSeqNo  int64
	PollProperties []exported1.PollProperty
} {
	var calls []struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		Key            exported1.PollKey
		SnapshotSeqNo  int64
		PollProperties []exported1.PollProperty
	}
	mock.lockInitializePollWithSnapshot.RLock()
	calls = mock.calls.InitializePollWithSnapshot
	mock.lockInitializePollWithSnapshot.RUnlock()
	return calls
}

// Ensure, that StakingKeeperMock does implement types.StakingKeeper.
// If this is not the case, regenerate this file with moq.
var _ types.StakingKeeper = &StakingKeeperMock{}

// StakingKeeperMock is a mock implementation of types.StakingKeeper.
//
// 	func TestSomethingThatUsesStakingKeeper(t *testing.T) {
//
// 		// make and configure a mocked types.StakingKeeper
// 		mockedStakingKeeper := &StakingKeeperMock{
// 			GetLastTotalPowerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) github_com_cosmos_cosmos_sdk_types.Int {
// 				panic("mock out the GetLastTotalPower method")
// 			},
// 			IterateBondedValidatorsByPowerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, fn func(index int64, validator stakingtypes.ValidatorI) (stop bool))  {
// 				panic("mock out the IterateBondedValidatorsByPower method")
// 			},
// 			ValidatorFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, addr github_com_cosmos_cosmos_sdk_types.ValAddress) stakingtypes.ValidatorI {
// 				panic("mock out the Validator method")
// 			},
// 		}
//
// 		// use mockedStakingKeeper in code that requires types.StakingKeeper
// 		// and then make assertions.
//
// 	}
type StakingKeeperMock struct {
	// GetLastTotalPowerFunc mocks the GetLastTotalPower method.
	GetLastTotalPowerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) github_com_cosmos_cosmos_sdk_types.Int

	// IterateBondedValidatorsByPowerFunc mocks the IterateBondedValidatorsByPower method.
	IterateBondedValidatorsByPowerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, fn func(index int64, validator stakingtypes.ValidatorI) (stop bool))

	// ValidatorFunc mocks the Validator method.
	ValidatorFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, addr github_com_cosmos_cosmos_sdk_types.ValAddress) stakingtypes.ValidatorI

	// calls tracks calls to the methods.
	calls struct {
		// GetLastTotalPower holds details about calls to the GetLastTotalPower method.
		GetLastTotalPower []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// IterateBondedValidatorsByPower holds details about calls to the IterateBondedValidatorsByPower method.
		IterateBondedValidatorsByPower []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Fn is the fn argument value.
			Fn func(index int64, validator stakingtypes.ValidatorI) (stop bool)
		}
		// Validator holds details about calls to the Validator method.
		Validator []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Addr is the addr argument value.
			Addr github_com_cosmos_cosmos_sdk_types.ValAddress
		}
	}
	lockGetLastTotalPower              sync.RWMutex
	lockIterateBondedValidatorsByPower sync.RWMutex
	lockValidator                      sync.RWMutex
}

// GetLastTotalPower calls GetLastTotalPowerFunc.
func (mock *StakingKeeperMock) GetLastTotalPower(ctx github_com_cosmos_cosmos_sdk_types.Context) github_com_cosmos_cosmos_sdk_types.Int {
	if mock.GetLastTotalPowerFunc == nil {
		panic("StakingKeeperMock.GetLastTotalPowerFunc: method is nil but StakingKeeper.GetLastTotalPower was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLastTotalPower.Lock()
	mock.calls.GetLastTotalPower = append(mock.calls.GetLastTotalPower, callInfo)
	mock.lockGetLastTotalPower.Unlock()
	return mock.GetLastTotalPowerFunc(ctx)
}

// GetLastTotalPowerCalls gets all the calls that were made to GetLastTotalPower.
// Check the length with:
//     len(mockedStakingKeeper.GetLastTotalPowerCalls())
func (mock *StakingKeeperMock) GetLastTotalPowerCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetLastTotalPower.RLock()
	calls = mock.calls.GetLastTotalPower
	mock.lockGetLastTotalPower.RUnlock()
	return calls
}

// IterateBondedValidatorsByPower calls IterateBondedValidatorsByPowerFunc.
func (mock *StakingKeeperMock) IterateBondedValidatorsByPower(ctx github_com_cosmos_cosmos_sdk_types.Context, fn func(index int64, validator stakingtypes.ValidatorI) (stop bool)) {
	if mock.IterateBondedValidatorsByPowerFunc == nil {
		panic("StakingKeeperMock.IterateBondedValidatorsByPowerFunc: method is nil but StakingKeeper.IterateBondedValidatorsByPower was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Fn  func(index int64, validator stakingtypes.ValidatorI) (stop bool)
	}{
		Ctx: ctx,
		Fn:  fn,
	}
	mock.lockIterateBondedValidatorsByPower.Lock()
	mock.calls.IterateBondedValidatorsByPower = append(mock.calls.IterateBondedValidatorsByPower, callInfo)
	mock.lockIterateBondedValidatorsByPower.Unlock()
	mock.IterateBondedValidatorsByPowerFunc(ctx, fn)
}

// IterateBondedValidatorsByPowerCalls gets all the calls that were made to IterateBondedValidatorsByPower.
// Check the length with:
//     len(mockedStakingKeeper.IterateBondedValidatorsByPowerCalls())
func (mock *StakingKeeperMock) IterateBondedValidatorsByPowerCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	Fn  func(index int64, validator stakingtypes.ValidatorI) (stop bool)
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		Fn  func(index int64, validator stakingtypes.ValidatorI) (stop bool)
	}
	mock.lockIterateBondedValidatorsByPower.RLock()
	calls = mock.calls.IterateBondedValidatorsByPower
	mock.lockIterateBondedValidatorsByPower.RUnlock()
	return calls
}

// Validator calls ValidatorFunc.
func (mock *StakingKeeperMock) Validator(ctx github_com_cosmos_cosmos_sdk_types.Context, addr github_com_cosmos_cosmos_sdk_types.ValAddress) stakingtypes.ValidatorI {
	if mock.ValidatorFunc == nil {
		panic("StakingKeeperMock.ValidatorFunc: method is nil but StakingKeeper.Validator was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Addr github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:  ctx,
		Addr: addr,
	}
	mock.lockValidator.Lock()
	mock.calls.Validator = append(mock.calls.Validator, callInfo)
	mock.lockValidator.Unlock()
	return mock.ValidatorFunc(ctx, addr)
}

// ValidatorCalls gets all the calls that were made to Validator.
// Check the length with:
//     len(mockedStakingKeeper.ValidatorCalls())
func (mock *StakingKeeperMock) ValidatorCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	Addr github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Addr github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockValidator.RLock()
	calls = mock.calls.Validator
	mock.lockValidator.RUnlock()
	return calls
}

// Ensure, that TSSKeeperMock does implement types.TSSKeeper.
// If this is not the case, regenerate this file with moq.
var _ types.TSSKeeper = &TSSKeeperMock{}

// TSSKeeperMock is a mock implementation of types.TSSKeeper.
//
// 	func TestSomethingThatUsesTSSKeeper(t *testing.T) {
//
// 		// make and configure a mocked types.TSSKeeper
// 		mockedTSSKeeper := &TSSKeeperMock{
// 			AssertMatchesRequirementsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
// 				panic("mock out the AssertMatchesRequirements method")
// 			},
// 			AssignNextKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error {
// 				panic("mock out the AssignNextKey method")
// 			},
// 			DeleteAllRecoveryInfosFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)  {
// 				panic("mock out the DeleteAllRecoveryInfos method")
// 			},
// 			DeleteInfoForSigFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string)  {
// 				panic("mock out the DeleteInfoForSig method")
// 			},
// 			DeleteKeygenStartFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)  {
// 				panic("mock out the DeleteKeygenStart method")
// 			},
// 			DeleteMultisigKeygenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)  {
// 				panic("mock out the DeleteMultisigKeygen method")
// 			},
// 			DeleteParticipantsInKeygenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)  {
// 				panic("mock out the DeleteParticipantsInKeygen method")
// 			},
// 			DeleteSnapshotCounterForKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)  {
// 				panic("mock out the DeleteSnapshotCounterForKeyID method")
// 			},
// 			DoesValidatorParticipateInKeygenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
// 				panic("mock out the DoesValidatorParticipateInKeygen method")
// 			},
// 			DoesValidatorParticipateInSignFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
// 				panic("mock out the DoesValidatorParticipateInSign method")
// 			},
// 			GetAvailableOperatorsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyIDs ...github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []github_com_cosmos_cosmos_sdk_types.ValAddress {
// 				panic("mock out the GetAvailableOperators method")
// 			},
// 			GetCurrentKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetCurrentKey method")
// 			},
// 			GetCurrentKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
// 				panic("mock out the GetCurrentKeyID method")
// 			},
// 			GetExternalKeyIDsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
// 				panic("mock out the GetExternalKeyIDs method")
// 			},
// 			GetExternalMultisigThresholdFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) utils.Threshold {
// 				panic("mock out the GetExternalMultisigThreshold method")
// 			},
// 			GetGroupRecoveryInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []byte {
// 				panic("mock out the GetGroupRecoveryInfo method")
// 			},
// 			GetHeartbeatPeriodInBlocksFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
// 				panic("mock out the GetHeartbeatPeriodInBlocks method")
// 			},
// 			GetInfoForSigFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, bool) {
// 				panic("mock out the GetInfoForSig method")
// 			},
// 			GetKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetKey method")
// 			},
// 			GetKeyForSigIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetKeyForSigID method")
// 			},
// 			GetKeyRequirementFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement, bool) {
// 				panic("mock out the GetKeyRequirement method")
// 			},
// 			GetKeyTypeFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType {
// 				panic("mock out the GetKeyType method")
// 			},
// 			GetMaxSimultaneousSignSharesFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
// 				panic("mock out the GetMaxSimultaneousSignShares method")
// 			},
// 			GetMultisigPubKeyCountFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) int64 {
// 				panic("mock out the GetMultisigPubKeyCount method")
// 			},
// 			GetMultisigPubKeyTimeoutFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
// 				panic("mock out the GetMultisigPubKeyTimeout method")
// 			},
// 			GetNextKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
// 				panic("mock out the GetNextKey method")
// 			},
// 			GetNextKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
// 				panic("mock out the GetNextKeyID method")
// 			},
// 			GetOldActiveKeysFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.Key, error) {
// 				panic("mock out the GetOldActiveKeys method")
// 			},
// 			GetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) types.Params {
// 				panic("mock out the GetParams method")
// 			},
// 			GetParticipantsInKeygenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []github_com_cosmos_cosmos_sdk_types.ValAddress {
// 				panic("mock out the GetParticipantsInKeygen method")
// 			},
// 			GetPrivateRecoveryInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []byte {
// 				panic("mock out the GetPrivateRecoveryInfo method")
// 			},
// 			GetRouterFunc: func() types.Router {
// 				panic("mock out the GetRouter method")
// 			},
// 			GetSigFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
// 				panic("mock out the GetSig method")
// 			},
// 			GetSignParticipantsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []string {
// 				panic("mock out the GetSignParticipants method")
// 			},
// 			GetSignParticipantsAsJSONFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []byte {
// 				panic("mock out the GetSignParticipantsAsJSON method")
// 			},
// 			GetSignParticipantsSharesAsJSONFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []byte {
// 				panic("mock out the GetSignParticipantsSharesAsJSON method")
// 			},
// 			GetSnapshotCounterForKeyIDFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
// 				panic("mock out the GetSnapshotCounterForKeyID method")
// 			},
// 			GetTssSuspendedUntilFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_cosmos_cosmos_sdk_types.ValAddress) int64 {
// 				panic("mock out the GetTssSuspendedUntil method")
// 			},
// 			HasPrivateRecoveryInfosFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) bool {
// 				panic("mock out the HasPrivateRecoveryInfos method")
// 			},
// 			HasValidatorSubmittedMultisigPubKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
// 				panic("mock out the HasValidatorSubmittedMultisigPubKey method")
// 			},
// 			IsMultisigKeygenCompletedFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) bool {
// 				panic("mock out the IsMultisigKeygenCompleted method")
// 			},
// 			LoggerFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
// 				panic("mock out the Logger method")
// 			},
// 			PenalizeCriminalFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, criminal github_com_cosmos_cosmos_sdk_types.ValAddress, crimeType tofnd.MessageOut_CriminalList_Criminal_CrimeType)  {
// 				panic("mock out the PenalizeCriminal method")
// 			},
// 			RotateKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
// 				panic("mock out the RotateKey method")
// 			},
// 			SelectSignParticipantsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snap github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot) ([]github_com_axelarnetwork_axelar_core_x_snapshot_exported.Validator, []github_com_axelarnetwork_axelar_core_x_snapshot_exported.Validator, error) {
// 				panic("mock out the SelectSignParticipants method")
// 			},
// 			SetAvailableOperatorFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_cosmos_cosmos_sdk_types.ValAddress, keyIDs ...github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)  {
// 				panic("mock out the SetAvailableOperator method")
// 			},
// 			SetExternalKeyIDsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)  {
// 				panic("mock out the SetExternalKeyIDs method")
// 			},
// 			SetGroupRecoveryInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, recoveryInfo []byte)  {
// 				panic("mock out the SetGroupRecoveryInfo method")
// 			},
// 			SetInfoForSigFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo)  {
// 				panic("mock out the SetInfoForSig method")
// 			},
// 			SetKeyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, key ecdsa.PublicKey)  {
// 				panic("mock out the SetKey method")
// 			},
// 			SetKeyInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, info types.KeyInfo)  {
// 				panic("mock out the SetKeyInfo method")
// 			},
// 			SetParamsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, p types.Params)  {
// 				panic("mock out the SetParams method")
// 			},
// 			SetPrivateRecoveryInfoFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, recoveryInfo []byte)  {
// 				panic("mock out the SetPrivateRecoveryInfo method")
// 			},
// 			SetSigFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, signature []byte)  {
// 				panic("mock out the SetSig method")
// 			},
// 			SetSigStatusFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus)  {
// 				panic("mock out the SetSigStatus method")
// 			},
// 			StartKeygenFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, voter types.Voter, keyInfo types.KeyInfo, snapshot github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot) error {
// 				panic("mock out the StartKeygen method")
// 			},
// 			StartSignFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, voter interface{InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error}) error {
// 				panic("mock out the StartSign method")
// 			},
// 			SubmitPubKeysFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress, pubKeys ...[]byte) bool {
// 				panic("mock out the SubmitPubKeys method")
// 			},
// 		}
//
// 		// use mockedTSSKeeper in code that requires types.TSSKeeper
// 		// and then make assertions.
//
// 	}
type TSSKeeperMock struct {
	// AssertMatchesRequirementsFunc mocks the AssertMatchesRequirements method.
	AssertMatchesRequirementsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error

	// AssignNextKeyFunc mocks the AssignNextKey method.
	AssignNextKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error

	// DeleteAllRecoveryInfosFunc mocks the DeleteAllRecoveryInfos method.
	DeleteAllRecoveryInfosFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)

	// DeleteInfoForSigFunc mocks the DeleteInfoForSig method.
	DeleteInfoForSigFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string)

	// DeleteKeygenStartFunc mocks the DeleteKeygenStart method.
	DeleteKeygenStartFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)

	// DeleteMultisigKeygenFunc mocks the DeleteMultisigKeygen method.
	DeleteMultisigKeygenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)

	// DeleteParticipantsInKeygenFunc mocks the DeleteParticipantsInKeygen method.
	DeleteParticipantsInKeygenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)

	// DeleteSnapshotCounterForKeyIDFunc mocks the DeleteSnapshotCounterForKeyID method.
	DeleteSnapshotCounterForKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)

	// DoesValidatorParticipateInKeygenFunc mocks the DoesValidatorParticipateInKeygen method.
	DoesValidatorParticipateInKeygenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool

	// DoesValidatorParticipateInSignFunc mocks the DoesValidatorParticipateInSign method.
	DoesValidatorParticipateInSignFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool

	// GetAvailableOperatorsFunc mocks the GetAvailableOperators method.
	GetAvailableOperatorsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyIDs ...github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []github_com_cosmos_cosmos_sdk_types.ValAddress

	// GetCurrentKeyFunc mocks the GetCurrentKey method.
	GetCurrentKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetCurrentKeyIDFunc mocks the GetCurrentKeyID method.
	GetCurrentKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool)

	// GetExternalKeyIDsFunc mocks the GetExternalKeyIDs method.
	GetExternalKeyIDsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool)

	// GetExternalMultisigThresholdFunc mocks the GetExternalMultisigThreshold method.
	GetExternalMultisigThresholdFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) utils.Threshold

	// GetGroupRecoveryInfoFunc mocks the GetGroupRecoveryInfo method.
	GetGroupRecoveryInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []byte

	// GetHeartbeatPeriodInBlocksFunc mocks the GetHeartbeatPeriodInBlocks method.
	GetHeartbeatPeriodInBlocksFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64

	// GetInfoForSigFunc mocks the GetInfoForSig method.
	GetInfoForSigFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, bool)

	// GetKeyFunc mocks the GetKey method.
	GetKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetKeyForSigIDFunc mocks the GetKeyForSigID method.
	GetKeyForSigIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetKeyRequirementFunc mocks the GetKeyRequirement method.
	GetKeyRequirementFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement, bool)

	// GetKeyTypeFunc mocks the GetKeyType method.
	GetKeyTypeFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType

	// GetMaxSimultaneousSignSharesFunc mocks the GetMaxSimultaneousSignShares method.
	GetMaxSimultaneousSignSharesFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64

	// GetMultisigPubKeyCountFunc mocks the GetMultisigPubKeyCount method.
	GetMultisigPubKeyCountFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) int64

	// GetMultisigPubKeyTimeoutFunc mocks the GetMultisigPubKeyTimeout method.
	GetMultisigPubKeyTimeoutFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool)

	// GetNextKeyFunc mocks the GetNextKey method.
	GetNextKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool)

	// GetNextKeyIDFunc mocks the GetNextKeyID method.
	GetNextKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool)

	// GetOldActiveKeysFunc mocks the GetOldActiveKeys method.
	GetOldActiveKeysFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.Key, error)

	// GetParamsFunc mocks the GetParams method.
	GetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) types.Params

	// GetParticipantsInKeygenFunc mocks the GetParticipantsInKeygen method.
	GetParticipantsInKeygenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []github_com_cosmos_cosmos_sdk_types.ValAddress

	// GetPrivateRecoveryInfoFunc mocks the GetPrivateRecoveryInfo method.
	GetPrivateRecoveryInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []byte

	// GetRouterFunc mocks the GetRouter method.
	GetRouterFunc func() types.Router

	// GetSigFunc mocks the GetSig method.
	GetSigFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus)

	// GetSignParticipantsFunc mocks the GetSignParticipants method.
	GetSignParticipantsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []string

	// GetSignParticipantsAsJSONFunc mocks the GetSignParticipantsAsJSON method.
	GetSignParticipantsAsJSONFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []byte

	// GetSignParticipantsSharesAsJSONFunc mocks the GetSignParticipantsSharesAsJSON method.
	GetSignParticipantsSharesAsJSONFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []byte

	// GetSnapshotCounterForKeyIDFunc mocks the GetSnapshotCounterForKeyID method.
	GetSnapshotCounterForKeyIDFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool)

	// GetTssSuspendedUntilFunc mocks the GetTssSuspendedUntil method.
	GetTssSuspendedUntilFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_cosmos_cosmos_sdk_types.ValAddress) int64

	// HasPrivateRecoveryInfosFunc mocks the HasPrivateRecoveryInfos method.
	HasPrivateRecoveryInfosFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) bool

	// HasValidatorSubmittedMultisigPubKeyFunc mocks the HasValidatorSubmittedMultisigPubKey method.
	HasValidatorSubmittedMultisigPubKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool

	// IsMultisigKeygenCompletedFunc mocks the IsMultisigKeygenCompleted method.
	IsMultisigKeygenCompletedFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) bool

	// LoggerFunc mocks the Logger method.
	LoggerFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger

	// PenalizeCriminalFunc mocks the PenalizeCriminal method.
	PenalizeCriminalFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, criminal github_com_cosmos_cosmos_sdk_types.ValAddress, crimeType tofnd.MessageOut_CriminalList_Criminal_CrimeType)

	// RotateKeyFunc mocks the RotateKey method.
	RotateKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error

	// SelectSignParticipantsFunc mocks the SelectSignParticipants method.
	SelectSignParticipantsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snap github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot) ([]github_com_axelarnetwork_axelar_core_x_snapshot_exported.Validator, []github_com_axelarnetwork_axelar_core_x_snapshot_exported.Validator, error)

	// SetAvailableOperatorFunc mocks the SetAvailableOperator method.
	SetAvailableOperatorFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_cosmos_cosmos_sdk_types.ValAddress, keyIDs ...github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)

	// SetExternalKeyIDsFunc mocks the SetExternalKeyIDs method.
	SetExternalKeyIDsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID)

	// SetGroupRecoveryInfoFunc mocks the SetGroupRecoveryInfo method.
	SetGroupRecoveryInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, recoveryInfo []byte)

	// SetInfoForSigFunc mocks the SetInfoForSig method.
	SetInfoForSigFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo)

	// SetKeyFunc mocks the SetKey method.
	SetKeyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, key ecdsa.PublicKey)

	// SetKeyInfoFunc mocks the SetKeyInfo method.
	SetKeyInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, info types.KeyInfo)

	// SetParamsFunc mocks the SetParams method.
	SetParamsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, p types.Params)

	// SetPrivateRecoveryInfoFunc mocks the SetPrivateRecoveryInfo method.
	SetPrivateRecoveryInfoFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, recoveryInfo []byte)

	// SetSigFunc mocks the SetSig method.
	SetSigFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, signature []byte)

	// SetSigStatusFunc mocks the SetSigStatus method.
	SetSigStatusFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus)

	// StartKeygenFunc mocks the StartKeygen method.
	StartKeygenFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, voter types.Voter, keyInfo types.KeyInfo, snapshot github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot) error

	// StartSignFunc mocks the StartSign method.
	StartSignFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, voter interface {
		InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error
	}) error

	// SubmitPubKeysFunc mocks the SubmitPubKeys method.
	SubmitPubKeysFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress, pubKeys ...[]byte) bool

	// calls tracks calls to the methods.
	calls struct {
		// AssertMatchesRequirements holds details about calls to the AssertMatchesRequirements method.
		AssertMatchesRequirements []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Snapshotter is the snapshotter argument value.
			Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// AssignNextKey holds details about calls to the AssignNextKey method.
		AssignNextKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// DeleteAllRecoveryInfos holds details about calls to the DeleteAllRecoveryInfos method.
		DeleteAllRecoveryInfos []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// DeleteInfoForSig holds details about calls to the DeleteInfoForSig method.
		DeleteInfoForSig []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// DeleteKeygenStart holds details about calls to the DeleteKeygenStart method.
		DeleteKeygenStart []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// DeleteMultisigKeygen holds details about calls to the DeleteMultisigKeygen method.
		DeleteMultisigKeygen []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// DeleteParticipantsInKeygen holds details about calls to the DeleteParticipantsInKeygen method.
		DeleteParticipantsInKeygen []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// DeleteSnapshotCounterForKeyID holds details about calls to the DeleteSnapshotCounterForKeyID method.
		DeleteSnapshotCounterForKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// DoesValidatorParticipateInKeygen holds details about calls to the DoesValidatorParticipateInKeygen method.
		DoesValidatorParticipateInKeygen []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// DoesValidatorParticipateInSign holds details about calls to the DoesValidatorParticipateInSign method.
		DoesValidatorParticipateInSign []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// GetAvailableOperators holds details about calls to the GetAvailableOperators method.
		GetAvailableOperators []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyIDs is the keyIDs argument value.
			KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetCurrentKey holds details about calls to the GetCurrentKey method.
		GetCurrentKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetCurrentKeyID holds details about calls to the GetCurrentKeyID method.
		GetCurrentKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetExternalKeyIDs holds details about calls to the GetExternalKeyIDs method.
		GetExternalKeyIDs []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
		}
		// GetExternalMultisigThreshold holds details about calls to the GetExternalMultisigThreshold method.
		GetExternalMultisigThreshold []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetGroupRecoveryInfo holds details about calls to the GetGroupRecoveryInfo method.
		GetGroupRecoveryInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetHeartbeatPeriodInBlocks holds details about calls to the GetHeartbeatPeriodInBlocks method.
		GetHeartbeatPeriodInBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetInfoForSig holds details about calls to the GetInfoForSig method.
		GetInfoForSig []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetKey holds details about calls to the GetKey method.
		GetKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetKeyForSigID holds details about calls to the GetKeyForSigID method.
		GetKeyForSigID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetKeyRequirement holds details about calls to the GetKeyRequirement method.
		GetKeyRequirement []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
			// KeyType is the keyType argument value.
			KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
		}
		// GetKeyType holds details about calls to the GetKeyType method.
		GetKeyType []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetMaxSimultaneousSignShares holds details about calls to the GetMaxSimultaneousSignShares method.
		GetMaxSimultaneousSignShares []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetMultisigPubKeyCount holds details about calls to the GetMultisigPubKeyCount method.
		GetMultisigPubKeyCount []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetMultisigPubKeyTimeout holds details about calls to the GetMultisigPubKeyTimeout method.
		GetMultisigPubKeyTimeout []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetNextKey holds details about calls to the GetNextKey method.
		GetNextKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetNextKeyID holds details about calls to the GetNextKeyID method.
		GetNextKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetOldActiveKeys holds details about calls to the GetOldActiveKeys method.
		GetOldActiveKeys []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// GetParams holds details about calls to the GetParams method.
		GetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetParticipantsInKeygen holds details about calls to the GetParticipantsInKeygen method.
		GetParticipantsInKeygen []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetPrivateRecoveryInfo holds details about calls to the GetPrivateRecoveryInfo method.
		GetPrivateRecoveryInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender github_com_cosmos_cosmos_sdk_types.ValAddress
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetRouter holds details about calls to the GetRouter method.
		GetRouter []struct {
		}
		// GetSig holds details about calls to the GetSig method.
		GetSig []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetSignParticipants holds details about calls to the GetSignParticipants method.
		GetSignParticipants []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetSignParticipantsAsJSON holds details about calls to the GetSignParticipantsAsJSON method.
		GetSignParticipantsAsJSON []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetSignParticipantsSharesAsJSON holds details about calls to the GetSignParticipantsSharesAsJSON method.
		GetSignParticipantsSharesAsJSON []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
		}
		// GetSnapshotCounterForKeyID holds details about calls to the GetSnapshotCounterForKeyID method.
		GetSnapshotCounterForKeyID []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// GetTssSuspendedUntil holds details about calls to the GetTssSuspendedUntil method.
		GetTssSuspendedUntil []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// HasPrivateRecoveryInfos holds details about calls to the HasPrivateRecoveryInfos method.
		HasPrivateRecoveryInfos []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender github_com_cosmos_cosmos_sdk_types.ValAddress
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// HasValidatorSubmittedMultisigPubKey holds details about calls to the HasValidatorSubmittedMultisigPubKey method.
		HasValidatorSubmittedMultisigPubKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// IsMultisigKeygenCompleted holds details about calls to the IsMultisigKeygenCompleted method.
		IsMultisigKeygenCompleted []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// Logger holds details about calls to the Logger method.
		Logger []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// PenalizeCriminal holds details about calls to the PenalizeCriminal method.
		PenalizeCriminal []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Criminal is the criminal argument value.
			Criminal github_com_cosmos_cosmos_sdk_types.ValAddress
			// CrimeType is the crimeType argument value.
			CrimeType tofnd.MessageOut_CriminalList_Criminal_CrimeType
		}
		// RotateKey holds details about calls to the RotateKey method.
		RotateKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyRole is the keyRole argument value.
			KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		}
		// SelectSignParticipants holds details about calls to the SelectSignParticipants method.
		SelectSignParticipants []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Snapshotter is the snapshotter argument value.
			Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
			// Info is the info argument value.
			Info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
			// Snap is the snap argument value.
			Snap github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
		}
		// SetAvailableOperator holds details about calls to the SetAvailableOperator method.
		SetAvailableOperator []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
			// KeyIDs is the keyIDs argument value.
			KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// SetExternalKeyIDs holds details about calls to the SetExternalKeyIDs method.
		SetExternalKeyIDs []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain nexus.Chain
			// KeyIDs is the keyIDs argument value.
			KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		}
		// SetGroupRecoveryInfo holds details about calls to the SetGroupRecoveryInfo method.
		SetGroupRecoveryInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// RecoveryInfo is the recoveryInfo argument value.
			RecoveryInfo []byte
		}
		// SetInfoForSig holds details about calls to the SetInfoForSig method.
		SetInfoForSig []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
			// Info is the info argument value.
			Info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		}
		// SetKey holds details about calls to the SetKey method.
		SetKey []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// Key is the key argument value.
			Key ecdsa.PublicKey
		}
		// SetKeyInfo holds details about calls to the SetKeyInfo method.
		SetKeyInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Info is the info argument value.
			Info types.KeyInfo
		}
		// SetParams holds details about calls to the SetParams method.
		SetParams []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// P is the p argument value.
			P types.Params
		}
		// SetPrivateRecoveryInfo holds details about calls to the SetPrivateRecoveryInfo method.
		SetPrivateRecoveryInfo []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Sender is the sender argument value.
			Sender github_com_cosmos_cosmos_sdk_types.ValAddress
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// RecoveryInfo is the recoveryInfo argument value.
			RecoveryInfo []byte
		}
		// SetSig holds details about calls to the SetSig method.
		SetSig []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
			// Signature is the signature argument value.
			Signature []byte
		}
		// SetSigStatus holds details about calls to the SetSigStatus method.
		SetSigStatus []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SigID is the sigID argument value.
			SigID string
			// Status is the status argument value.
			Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
		}
		// StartKeygen holds details about calls to the StartKeygen method.
		StartKeygen []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Voter is the voter argument value.
			Voter types.Voter
			// KeyInfo is the keyInfo argument value.
			KeyInfo types.KeyInfo
			// Snapshot is the snapshot argument value.
			Snapshot github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
		}
		// StartSign holds details about calls to the StartSign method.
		StartSign []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Info is the info argument value.
			Info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
			// Snapshotter is the snapshotter argument value.
			Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
			// Voter is the voter argument value.
			Voter interface {
				InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error
			}
		}
		// SubmitPubKeys holds details about calls to the SubmitPubKeys method.
		SubmitPubKeys []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyID is the keyID argument value.
			KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
			// Validator is the validator argument value.
			Validator github_com_cosmos_cosmos_sdk_types.ValAddress
			// PubKeys is the pubKeys argument value.
			PubKeys [][]byte
		}
	}
	lockAssertMatchesRequirements           sync.RWMutex
	lockAssignNextKey                       sync.RWMutex
	lockDeleteAllRecoveryInfos              sync.RWMutex
	lockDeleteInfoForSig                    sync.RWMutex
	lockDeleteKeygenStart                   sync.RWMutex
	lockDeleteMultisigKeygen                sync.RWMutex
	lockDeleteParticipantsInKeygen          sync.RWMutex
	lockDeleteSnapshotCounterForKeyID       sync.RWMutex
	lockDoesValidatorParticipateInKeygen    sync.RWMutex
	lockDoesValidatorParticipateInSign      sync.RWMutex
	lockGetAvailableOperators               sync.RWMutex
	lockGetCurrentKey                       sync.RWMutex
	lockGetCurrentKeyID                     sync.RWMutex
	lockGetExternalKeyIDs                   sync.RWMutex
	lockGetExternalMultisigThreshold        sync.RWMutex
	lockGetGroupRecoveryInfo                sync.RWMutex
	lockGetHeartbeatPeriodInBlocks          sync.RWMutex
	lockGetInfoForSig                       sync.RWMutex
	lockGetKey                              sync.RWMutex
	lockGetKeyForSigID                      sync.RWMutex
	lockGetKeyRequirement                   sync.RWMutex
	lockGetKeyType                          sync.RWMutex
	lockGetMaxSimultaneousSignShares        sync.RWMutex
	lockGetMultisigPubKeyCount              sync.RWMutex
	lockGetMultisigPubKeyTimeout            sync.RWMutex
	lockGetNextKey                          sync.RWMutex
	lockGetNextKeyID                        sync.RWMutex
	lockGetOldActiveKeys                    sync.RWMutex
	lockGetParams                           sync.RWMutex
	lockGetParticipantsInKeygen             sync.RWMutex
	lockGetPrivateRecoveryInfo              sync.RWMutex
	lockGetRouter                           sync.RWMutex
	lockGetSig                              sync.RWMutex
	lockGetSignParticipants                 sync.RWMutex
	lockGetSignParticipantsAsJSON           sync.RWMutex
	lockGetSignParticipantsSharesAsJSON     sync.RWMutex
	lockGetSnapshotCounterForKeyID          sync.RWMutex
	lockGetTssSuspendedUntil                sync.RWMutex
	lockHasPrivateRecoveryInfos             sync.RWMutex
	lockHasValidatorSubmittedMultisigPubKey sync.RWMutex
	lockIsMultisigKeygenCompleted           sync.RWMutex
	lockLogger                              sync.RWMutex
	lockPenalizeCriminal                    sync.RWMutex
	lockRotateKey                           sync.RWMutex
	lockSelectSignParticipants              sync.RWMutex
	lockSetAvailableOperator                sync.RWMutex
	lockSetExternalKeyIDs                   sync.RWMutex
	lockSetGroupRecoveryInfo                sync.RWMutex
	lockSetInfoForSig                       sync.RWMutex
	lockSetKey                              sync.RWMutex
	lockSetKeyInfo                          sync.RWMutex
	lockSetParams                           sync.RWMutex
	lockSetPrivateRecoveryInfo              sync.RWMutex
	lockSetSig                              sync.RWMutex
	lockSetSigStatus                        sync.RWMutex
	lockStartKeygen                         sync.RWMutex
	lockStartSign                           sync.RWMutex
	lockSubmitPubKeys                       sync.RWMutex
}

// AssertMatchesRequirements calls AssertMatchesRequirementsFunc.
func (mock *TSSKeeperMock) AssertMatchesRequirements(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, chain nexus.Chain, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
	if mock.AssertMatchesRequirementsFunc == nil {
		panic("TSSKeeperMock.AssertMatchesRequirementsFunc: method is nil but TSSKeeper.AssertMatchesRequirements was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
		Chain       nexus.Chain
		KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:         ctx,
		Snapshotter: snapshotter,
		Chain:       chain,
		KeyID:       keyID,
		KeyRole:     keyRole,
	}
	mock.lockAssertMatchesRequirements.Lock()
	mock.calls.AssertMatchesRequirements = append(mock.calls.AssertMatchesRequirements, callInfo)
	mock.lockAssertMatchesRequirements.Unlock()
	return mock.AssertMatchesRequirementsFunc(ctx, snapshotter, chain, keyID, keyRole)
}

// AssertMatchesRequirementsCalls gets all the calls that were made to AssertMatchesRequirements.
// Check the length with:
//     len(mockedTSSKeeper.AssertMatchesRequirementsCalls())
func (mock *TSSKeeperMock) AssertMatchesRequirementsCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
	Chain       nexus.Chain
	KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
		Chain       nexus.Chain
		KeyID       github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		KeyRole     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockAssertMatchesRequirements.RLock()
	calls = mock.calls.AssertMatchesRequirements
	mock.lockAssertMatchesRequirements.RUnlock()
	return calls
}

// AssignNextKey calls AssignNextKeyFunc.
func (mock *TSSKeeperMock) AssignNextKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) error {
	if mock.AssignNextKeyFunc == nil {
		panic("TSSKeeperMock.AssignNextKeyFunc: method is nil but TSSKeeper.AssignNextKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
		KeyID:   keyID,
	}
	mock.lockAssignNextKey.Lock()
	mock.calls.AssignNextKey = append(mock.calls.AssignNextKey, callInfo)
	mock.lockAssignNextKey.Unlock()
	return mock.AssignNextKeyFunc(ctx, chain, keyRole, keyID)
}

// AssignNextKeyCalls gets all the calls that were made to AssignNextKey.
// Check the length with:
//     len(mockedTSSKeeper.AssignNextKeyCalls())
func (mock *TSSKeeperMock) AssignNextKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyID   github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockAssignNextKey.RLock()
	calls = mock.calls.AssignNextKey
	mock.lockAssignNextKey.RUnlock()
	return calls
}

// DeleteAllRecoveryInfos calls DeleteAllRecoveryInfosFunc.
func (mock *TSSKeeperMock) DeleteAllRecoveryInfos(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) {
	if mock.DeleteAllRecoveryInfosFunc == nil {
		panic("TSSKeeperMock.DeleteAllRecoveryInfosFunc: method is nil but TSSKeeper.DeleteAllRecoveryInfos was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockDeleteAllRecoveryInfos.Lock()
	mock.calls.DeleteAllRecoveryInfos = append(mock.calls.DeleteAllRecoveryInfos, callInfo)
	mock.lockDeleteAllRecoveryInfos.Unlock()
	mock.DeleteAllRecoveryInfosFunc(ctx, keyID)
}

// DeleteAllRecoveryInfosCalls gets all the calls that were made to DeleteAllRecoveryInfos.
// Check the length with:
//     len(mockedTSSKeeper.DeleteAllRecoveryInfosCalls())
func (mock *TSSKeeperMock) DeleteAllRecoveryInfosCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockDeleteAllRecoveryInfos.RLock()
	calls = mock.calls.DeleteAllRecoveryInfos
	mock.lockDeleteAllRecoveryInfos.RUnlock()
	return calls
}

// DeleteInfoForSig calls DeleteInfoForSigFunc.
func (mock *TSSKeeperMock) DeleteInfoForSig(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) {
	if mock.DeleteInfoForSigFunc == nil {
		panic("TSSKeeperMock.DeleteInfoForSigFunc: method is nil but TSSKeeper.DeleteInfoForSig was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockDeleteInfoForSig.Lock()
	mock.calls.DeleteInfoForSig = append(mock.calls.DeleteInfoForSig, callInfo)
	mock.lockDeleteInfoForSig.Unlock()
	mock.DeleteInfoForSigFunc(ctx, sigID)
}

// DeleteInfoForSigCalls gets all the calls that were made to DeleteInfoForSig.
// Check the length with:
//     len(mockedTSSKeeper.DeleteInfoForSigCalls())
func (mock *TSSKeeperMock) DeleteInfoForSigCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockDeleteInfoForSig.RLock()
	calls = mock.calls.DeleteInfoForSig
	mock.lockDeleteInfoForSig.RUnlock()
	return calls
}

// DeleteKeygenStart calls DeleteKeygenStartFunc.
func (mock *TSSKeeperMock) DeleteKeygenStart(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) {
	if mock.DeleteKeygenStartFunc == nil {
		panic("TSSKeeperMock.DeleteKeygenStartFunc: method is nil but TSSKeeper.DeleteKeygenStart was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockDeleteKeygenStart.Lock()
	mock.calls.DeleteKeygenStart = append(mock.calls.DeleteKeygenStart, callInfo)
	mock.lockDeleteKeygenStart.Unlock()
	mock.DeleteKeygenStartFunc(ctx, keyID)
}

// DeleteKeygenStartCalls gets all the calls that were made to DeleteKeygenStart.
// Check the length with:
//     len(mockedTSSKeeper.DeleteKeygenStartCalls())
func (mock *TSSKeeperMock) DeleteKeygenStartCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockDeleteKeygenStart.RLock()
	calls = mock.calls.DeleteKeygenStart
	mock.lockDeleteKeygenStart.RUnlock()
	return calls
}

// DeleteMultisigKeygen calls DeleteMultisigKeygenFunc.
func (mock *TSSKeeperMock) DeleteMultisigKeygen(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) {
	if mock.DeleteMultisigKeygenFunc == nil {
		panic("TSSKeeperMock.DeleteMultisigKeygenFunc: method is nil but TSSKeeper.DeleteMultisigKeygen was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockDeleteMultisigKeygen.Lock()
	mock.calls.DeleteMultisigKeygen = append(mock.calls.DeleteMultisigKeygen, callInfo)
	mock.lockDeleteMultisigKeygen.Unlock()
	mock.DeleteMultisigKeygenFunc(ctx, keyID)
}

// DeleteMultisigKeygenCalls gets all the calls that were made to DeleteMultisigKeygen.
// Check the length with:
//     len(mockedTSSKeeper.DeleteMultisigKeygenCalls())
func (mock *TSSKeeperMock) DeleteMultisigKeygenCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockDeleteMultisigKeygen.RLock()
	calls = mock.calls.DeleteMultisigKeygen
	mock.lockDeleteMultisigKeygen.RUnlock()
	return calls
}

// DeleteParticipantsInKeygen calls DeleteParticipantsInKeygenFunc.
func (mock *TSSKeeperMock) DeleteParticipantsInKeygen(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) {
	if mock.DeleteParticipantsInKeygenFunc == nil {
		panic("TSSKeeperMock.DeleteParticipantsInKeygenFunc: method is nil but TSSKeeper.DeleteParticipantsInKeygen was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockDeleteParticipantsInKeygen.Lock()
	mock.calls.DeleteParticipantsInKeygen = append(mock.calls.DeleteParticipantsInKeygen, callInfo)
	mock.lockDeleteParticipantsInKeygen.Unlock()
	mock.DeleteParticipantsInKeygenFunc(ctx, keyID)
}

// DeleteParticipantsInKeygenCalls gets all the calls that were made to DeleteParticipantsInKeygen.
// Check the length with:
//     len(mockedTSSKeeper.DeleteParticipantsInKeygenCalls())
func (mock *TSSKeeperMock) DeleteParticipantsInKeygenCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockDeleteParticipantsInKeygen.RLock()
	calls = mock.calls.DeleteParticipantsInKeygen
	mock.lockDeleteParticipantsInKeygen.RUnlock()
	return calls
}

// DeleteSnapshotCounterForKeyID calls DeleteSnapshotCounterForKeyIDFunc.
func (mock *TSSKeeperMock) DeleteSnapshotCounterForKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) {
	if mock.DeleteSnapshotCounterForKeyIDFunc == nil {
		panic("TSSKeeperMock.DeleteSnapshotCounterForKeyIDFunc: method is nil but TSSKeeper.DeleteSnapshotCounterForKeyID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockDeleteSnapshotCounterForKeyID.Lock()
	mock.calls.DeleteSnapshotCounterForKeyID = append(mock.calls.DeleteSnapshotCounterForKeyID, callInfo)
	mock.lockDeleteSnapshotCounterForKeyID.Unlock()
	mock.DeleteSnapshotCounterForKeyIDFunc(ctx, keyID)
}

// DeleteSnapshotCounterForKeyIDCalls gets all the calls that were made to DeleteSnapshotCounterForKeyID.
// Check the length with:
//     len(mockedTSSKeeper.DeleteSnapshotCounterForKeyIDCalls())
func (mock *TSSKeeperMock) DeleteSnapshotCounterForKeyIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockDeleteSnapshotCounterForKeyID.RLock()
	calls = mock.calls.DeleteSnapshotCounterForKeyID
	mock.lockDeleteSnapshotCounterForKeyID.RUnlock()
	return calls
}

// DoesValidatorParticipateInKeygen calls DoesValidatorParticipateInKeygenFunc.
func (mock *TSSKeeperMock) DoesValidatorParticipateInKeygen(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
	if mock.DoesValidatorParticipateInKeygenFunc == nil {
		panic("TSSKeeperMock.DoesValidatorParticipateInKeygenFunc: method is nil but TSSKeeper.DoesValidatorParticipateInKeygen was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		KeyID:     keyID,
		Validator: validator,
	}
	mock.lockDoesValidatorParticipateInKeygen.Lock()
	mock.calls.DoesValidatorParticipateInKeygen = append(mock.calls.DoesValidatorParticipateInKeygen, callInfo)
	mock.lockDoesValidatorParticipateInKeygen.Unlock()
	return mock.DoesValidatorParticipateInKeygenFunc(ctx, keyID, validator)
}

// DoesValidatorParticipateInKeygenCalls gets all the calls that were made to DoesValidatorParticipateInKeygen.
// Check the length with:
//     len(mockedTSSKeeper.DoesValidatorParticipateInKeygenCalls())
func (mock *TSSKeeperMock) DoesValidatorParticipateInKeygenCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockDoesValidatorParticipateInKeygen.RLock()
	calls = mock.calls.DoesValidatorParticipateInKeygen
	mock.lockDoesValidatorParticipateInKeygen.RUnlock()
	return calls
}

// DoesValidatorParticipateInSign calls DoesValidatorParticipateInSignFunc.
func (mock *TSSKeeperMock) DoesValidatorParticipateInSign(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
	if mock.DoesValidatorParticipateInSignFunc == nil {
		panic("TSSKeeperMock.DoesValidatorParticipateInSignFunc: method is nil but TSSKeeper.DoesValidatorParticipateInSign was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		SigID     string
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		SigID:     sigID,
		Validator: validator,
	}
	mock.lockDoesValidatorParticipateInSign.Lock()
	mock.calls.DoesValidatorParticipateInSign = append(mock.calls.DoesValidatorParticipateInSign, callInfo)
	mock.lockDoesValidatorParticipateInSign.Unlock()
	return mock.DoesValidatorParticipateInSignFunc(ctx, sigID, validator)
}

// DoesValidatorParticipateInSignCalls gets all the calls that were made to DoesValidatorParticipateInSign.
// Check the length with:
//     len(mockedTSSKeeper.DoesValidatorParticipateInSignCalls())
func (mock *TSSKeeperMock) DoesValidatorParticipateInSignCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	SigID     string
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		SigID     string
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockDoesValidatorParticipateInSign.RLock()
	calls = mock.calls.DoesValidatorParticipateInSign
	mock.lockDoesValidatorParticipateInSign.RUnlock()
	return calls
}

// GetAvailableOperators calls GetAvailableOperatorsFunc.
func (mock *TSSKeeperMock) GetAvailableOperators(ctx github_com_cosmos_cosmos_sdk_types.Context, keyIDs ...github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if mock.GetAvailableOperatorsFunc == nil {
		panic("TSSKeeperMock.GetAvailableOperatorsFunc: method is nil but TSSKeeper.GetAvailableOperators was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:    ctx,
		KeyIDs: keyIDs,
	}
	mock.lockGetAvailableOperators.Lock()
	mock.calls.GetAvailableOperators = append(mock.calls.GetAvailableOperators, callInfo)
	mock.lockGetAvailableOperators.Unlock()
	return mock.GetAvailableOperatorsFunc(ctx, keyIDs...)
}

// GetAvailableOperatorsCalls gets all the calls that were made to GetAvailableOperators.
// Check the length with:
//     len(mockedTSSKeeper.GetAvailableOperatorsCalls())
func (mock *TSSKeeperMock) GetAvailableOperatorsCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetAvailableOperators.RLock()
	calls = mock.calls.GetAvailableOperators
	mock.lockGetAvailableOperators.RUnlock()
	return calls
}

// GetCurrentKey calls GetCurrentKeyFunc.
func (mock *TSSKeeperMock) GetCurrentKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetCurrentKeyFunc == nil {
		panic("TSSKeeperMock.GetCurrentKeyFunc: method is nil but TSSKeeper.GetCurrentKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKey.Lock()
	mock.calls.GetCurrentKey = append(mock.calls.GetCurrentKey, callInfo)
	mock.lockGetCurrentKey.Unlock()
	return mock.GetCurrentKeyFunc(ctx, chain, keyRole)
}

// GetCurrentKeyCalls gets all the calls that were made to GetCurrentKey.
// Check the length with:
//     len(mockedTSSKeeper.GetCurrentKeyCalls())
func (mock *TSSKeeperMock) GetCurrentKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetCurrentKey.RLock()
	calls = mock.calls.GetCurrentKey
	mock.lockGetCurrentKey.RUnlock()
	return calls
}

// GetCurrentKeyID calls GetCurrentKeyIDFunc.
func (mock *TSSKeeperMock) GetCurrentKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
	if mock.GetCurrentKeyIDFunc == nil {
		panic("TSSKeeperMock.GetCurrentKeyIDFunc: method is nil but TSSKeeper.GetCurrentKeyID was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetCurrentKeyID.Lock()
	mock.calls.GetCurrentKeyID = append(mock.calls.GetCurrentKeyID, callInfo)
	mock.lockGetCurrentKeyID.Unlock()
	return mock.GetCurrentKeyIDFunc(ctx, chain, keyRole)
}

// GetCurrentKeyIDCalls gets all the calls that were made to GetCurrentKeyID.
// Check the length with:
//     len(mockedTSSKeeper.GetCurrentKeyIDCalls())
func (mock *TSSKeeperMock) GetCurrentKeyIDCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetCurrentKeyID.RLock()
	calls = mock.calls.GetCurrentKeyID
	mock.lockGetCurrentKeyID.RUnlock()
	return calls
}

// GetExternalKeyIDs calls GetExternalKeyIDsFunc.
func (mock *TSSKeeperMock) GetExternalKeyIDs(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
	if mock.GetExternalKeyIDsFunc == nil {
		panic("TSSKeeperMock.GetExternalKeyIDsFunc: method is nil but TSSKeeper.GetExternalKeyIDs was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetExternalKeyIDs.Lock()
	mock.calls.GetExternalKeyIDs = append(mock.calls.GetExternalKeyIDs, callInfo)
	mock.lockGetExternalKeyIDs.Unlock()
	return mock.GetExternalKeyIDsFunc(ctx, chain)
}

// GetExternalKeyIDsCalls gets all the calls that were made to GetExternalKeyIDs.
// Check the length with:
//     len(mockedTSSKeeper.GetExternalKeyIDsCalls())
func (mock *TSSKeeperMock) GetExternalKeyIDsCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain nexus.Chain
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain nexus.Chain
	}
	mock.lockGetExternalKeyIDs.RLock()
	calls = mock.calls.GetExternalKeyIDs
	mock.lockGetExternalKeyIDs.RUnlock()
	return calls
}

// GetExternalMultisigThreshold calls GetExternalMultisigThresholdFunc.
func (mock *TSSKeeperMock) GetExternalMultisigThreshold(ctx github_com_cosmos_cosmos_sdk_types.Context) utils.Threshold {
	if mock.GetExternalMultisigThresholdFunc == nil {
		panic("TSSKeeperMock.GetExternalMultisigThresholdFunc: method is nil but TSSKeeper.GetExternalMultisigThreshold was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetExternalMultisigThreshold.Lock()
	mock.calls.GetExternalMultisigThreshold = append(mock.calls.GetExternalMultisigThreshold, callInfo)
	mock.lockGetExternalMultisigThreshold.Unlock()
	return mock.GetExternalMultisigThresholdFunc(ctx)
}

// GetExternalMultisigThresholdCalls gets all the calls that were made to GetExternalMultisigThreshold.
// Check the length with:
//     len(mockedTSSKeeper.GetExternalMultisigThresholdCalls())
func (mock *TSSKeeperMock) GetExternalMultisigThresholdCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetExternalMultisigThreshold.RLock()
	calls = mock.calls.GetExternalMultisigThreshold
	mock.lockGetExternalMultisigThreshold.RUnlock()
	return calls
}

// GetGroupRecoveryInfo calls GetGroupRecoveryInfoFunc.
func (mock *TSSKeeperMock) GetGroupRecoveryInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []byte {
	if mock.GetGroupRecoveryInfoFunc == nil {
		panic("TSSKeeperMock.GetGroupRecoveryInfoFunc: method is nil but TSSKeeper.GetGroupRecoveryInfo was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetGroupRecoveryInfo.Lock()
	mock.calls.GetGroupRecoveryInfo = append(mock.calls.GetGroupRecoveryInfo, callInfo)
	mock.lockGetGroupRecoveryInfo.Unlock()
	return mock.GetGroupRecoveryInfoFunc(ctx, keyID)
}

// GetGroupRecoveryInfoCalls gets all the calls that were made to GetGroupRecoveryInfo.
// Check the length with:
//     len(mockedTSSKeeper.GetGroupRecoveryInfoCalls())
func (mock *TSSKeeperMock) GetGroupRecoveryInfoCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetGroupRecoveryInfo.RLock()
	calls = mock.calls.GetGroupRecoveryInfo
	mock.lockGetGroupRecoveryInfo.RUnlock()
	return calls
}

// GetHeartbeatPeriodInBlocks calls GetHeartbeatPeriodInBlocksFunc.
func (mock *TSSKeeperMock) GetHeartbeatPeriodInBlocks(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
	if mock.GetHeartbeatPeriodInBlocksFunc == nil {
		panic("TSSKeeperMock.GetHeartbeatPeriodInBlocksFunc: method is nil but TSSKeeper.GetHeartbeatPeriodInBlocks was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetHeartbeatPeriodInBlocks.Lock()
	mock.calls.GetHeartbeatPeriodInBlocks = append(mock.calls.GetHeartbeatPeriodInBlocks, callInfo)
	mock.lockGetHeartbeatPeriodInBlocks.Unlock()
	return mock.GetHeartbeatPeriodInBlocksFunc(ctx)
}

// GetHeartbeatPeriodInBlocksCalls gets all the calls that were made to GetHeartbeatPeriodInBlocks.
// Check the length with:
//     len(mockedTSSKeeper.GetHeartbeatPeriodInBlocksCalls())
func (mock *TSSKeeperMock) GetHeartbeatPeriodInBlocksCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetHeartbeatPeriodInBlocks.RLock()
	calls = mock.calls.GetHeartbeatPeriodInBlocks
	mock.lockGetHeartbeatPeriodInBlocks.RUnlock()
	return calls
}

// GetInfoForSig calls GetInfoForSigFunc.
func (mock *TSSKeeperMock) GetInfoForSig(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, bool) {
	if mock.GetInfoForSigFunc == nil {
		panic("TSSKeeperMock.GetInfoForSigFunc: method is nil but TSSKeeper.GetInfoForSig was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetInfoForSig.Lock()
	mock.calls.GetInfoForSig = append(mock.calls.GetInfoForSig, callInfo)
	mock.lockGetInfoForSig.Unlock()
	return mock.GetInfoForSigFunc(ctx, sigID)
}

// GetInfoForSigCalls gets all the calls that were made to GetInfoForSig.
// Check the length with:
//     len(mockedTSSKeeper.GetInfoForSigCalls())
func (mock *TSSKeeperMock) GetInfoForSigCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetInfoForSig.RLock()
	calls = mock.calls.GetInfoForSig
	mock.lockGetInfoForSig.RUnlock()
	return calls
}

// GetKey calls GetKeyFunc.
func (mock *TSSKeeperMock) GetKey(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetKeyFunc == nil {
		panic("TSSKeeperMock.GetKeyFunc: method is nil but TSSKeeper.GetKey was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetKey.Lock()
	mock.calls.GetKey = append(mock.calls.GetKey, callInfo)
	mock.lockGetKey.Unlock()
	return mock.GetKeyFunc(ctx, keyID)
}

// GetKeyCalls gets all the calls that were made to GetKey.
// Check the length with:
//     len(mockedTSSKeeper.GetKeyCalls())
func (mock *TSSKeeperMock) GetKeyCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetKey.RLock()
	calls = mock.calls.GetKey
	mock.lockGetKey.RUnlock()
	return calls
}

// GetKeyForSigID calls GetKeyForSigIDFunc.
func (mock *TSSKeeperMock) GetKeyForSigID(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetKeyForSigIDFunc == nil {
		panic("TSSKeeperMock.GetKeyForSigIDFunc: method is nil but TSSKeeper.GetKeyForSigID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetKeyForSigID.Lock()
	mock.calls.GetKeyForSigID = append(mock.calls.GetKeyForSigID, callInfo)
	mock.lockGetKeyForSigID.Unlock()
	return mock.GetKeyForSigIDFunc(ctx, sigID)
}

// GetKeyForSigIDCalls gets all the calls that were made to GetKeyForSigID.
// Check the length with:
//     len(mockedTSSKeeper.GetKeyForSigIDCalls())
func (mock *TSSKeeperMock) GetKeyForSigIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetKeyForSigID.RLock()
	calls = mock.calls.GetKeyForSigID
	mock.lockGetKeyForSigID.RUnlock()
	return calls
}

// GetKeyRequirement calls GetKeyRequirementFunc.
func (mock *TSSKeeperMock) GetKeyRequirement(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole, keyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement, bool) {
	if mock.GetKeyRequirementFunc == nil {
		panic("TSSKeeperMock.GetKeyRequirementFunc: method is nil but TSSKeeper.GetKeyRequirement was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
	}{
		Ctx:     ctx,
		KeyRole: keyRole,
		KeyType: keyType,
	}
	mock.lockGetKeyRequirement.Lock()
	mock.calls.GetKeyRequirement = append(mock.calls.GetKeyRequirement, callInfo)
	mock.lockGetKeyRequirement.Unlock()
	return mock.GetKeyRequirementFunc(ctx, keyRole, keyType)
}

// GetKeyRequirementCalls gets all the calls that were made to GetKeyRequirement.
// Check the length with:
//     len(mockedTSSKeeper.GetKeyRequirementCalls())
func (mock *TSSKeeperMock) GetKeyRequirementCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
		KeyType github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType
	}
	mock.lockGetKeyRequirement.RLock()
	calls = mock.calls.GetKeyRequirement
	mock.lockGetKeyRequirement.RUnlock()
	return calls
}

// GetKeyType calls GetKeyTypeFunc.
func (mock *TSSKeeperMock) GetKeyType(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) github_com_axelarnetwork_axelar_core_x_tss_exported.KeyType {
	if mock.GetKeyTypeFunc == nil {
		panic("TSSKeeperMock.GetKeyTypeFunc: method is nil but TSSKeeper.GetKeyType was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetKeyType.Lock()
	mock.calls.GetKeyType = append(mock.calls.GetKeyType, callInfo)
	mock.lockGetKeyType.Unlock()
	return mock.GetKeyTypeFunc(ctx, keyID)
}

// GetKeyTypeCalls gets all the calls that were made to GetKeyType.
// Check the length with:
//     len(mockedTSSKeeper.GetKeyTypeCalls())
func (mock *TSSKeeperMock) GetKeyTypeCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetKeyType.RLock()
	calls = mock.calls.GetKeyType
	mock.lockGetKeyType.RUnlock()
	return calls
}

// GetMaxSimultaneousSignShares calls GetMaxSimultaneousSignSharesFunc.
func (mock *TSSKeeperMock) GetMaxSimultaneousSignShares(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
	if mock.GetMaxSimultaneousSignSharesFunc == nil {
		panic("TSSKeeperMock.GetMaxSimultaneousSignSharesFunc: method is nil but TSSKeeper.GetMaxSimultaneousSignShares was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMaxSimultaneousSignShares.Lock()
	mock.calls.GetMaxSimultaneousSignShares = append(mock.calls.GetMaxSimultaneousSignShares, callInfo)
	mock.lockGetMaxSimultaneousSignShares.Unlock()
	return mock.GetMaxSimultaneousSignSharesFunc(ctx)
}

// GetMaxSimultaneousSignSharesCalls gets all the calls that were made to GetMaxSimultaneousSignShares.
// Check the length with:
//     len(mockedTSSKeeper.GetMaxSimultaneousSignSharesCalls())
func (mock *TSSKeeperMock) GetMaxSimultaneousSignSharesCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetMaxSimultaneousSignShares.RLock()
	calls = mock.calls.GetMaxSimultaneousSignShares
	mock.lockGetMaxSimultaneousSignShares.RUnlock()
	return calls
}

// GetMultisigPubKeyCount calls GetMultisigPubKeyCountFunc.
func (mock *TSSKeeperMock) GetMultisigPubKeyCount(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) int64 {
	if mock.GetMultisigPubKeyCountFunc == nil {
		panic("TSSKeeperMock.GetMultisigPubKeyCountFunc: method is nil but TSSKeeper.GetMultisigPubKeyCount was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetMultisigPubKeyCount.Lock()
	mock.calls.GetMultisigPubKeyCount = append(mock.calls.GetMultisigPubKeyCount, callInfo)
	mock.lockGetMultisigPubKeyCount.Unlock()
	return mock.GetMultisigPubKeyCountFunc(ctx, keyID)
}

// GetMultisigPubKeyCountCalls gets all the calls that were made to GetMultisigPubKeyCount.
// Check the length with:
//     len(mockedTSSKeeper.GetMultisigPubKeyCountCalls())
func (mock *TSSKeeperMock) GetMultisigPubKeyCountCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetMultisigPubKeyCount.RLock()
	calls = mock.calls.GetMultisigPubKeyCount
	mock.lockGetMultisigPubKeyCount.RUnlock()
	return calls
}

// GetMultisigPubKeyTimeout calls GetMultisigPubKeyTimeoutFunc.
func (mock *TSSKeeperMock) GetMultisigPubKeyTimeout(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
	if mock.GetMultisigPubKeyTimeoutFunc == nil {
		panic("TSSKeeperMock.GetMultisigPubKeyTimeoutFunc: method is nil but TSSKeeper.GetMultisigPubKeyTimeout was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetMultisigPubKeyTimeout.Lock()
	mock.calls.GetMultisigPubKeyTimeout = append(mock.calls.GetMultisigPubKeyTimeout, callInfo)
	mock.lockGetMultisigPubKeyTimeout.Unlock()
	return mock.GetMultisigPubKeyTimeoutFunc(ctx, keyID)
}

// GetMultisigPubKeyTimeoutCalls gets all the calls that were made to GetMultisigPubKeyTimeout.
// Check the length with:
//     len(mockedTSSKeeper.GetMultisigPubKeyTimeoutCalls())
func (mock *TSSKeeperMock) GetMultisigPubKeyTimeoutCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetMultisigPubKeyTimeout.RLock()
	calls = mock.calls.GetMultisigPubKeyTimeout
	mock.lockGetMultisigPubKeyTimeout.RUnlock()
	return calls
}

// GetNextKey calls GetNextKeyFunc.
func (mock *TSSKeeperMock) GetNextKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.Key, bool) {
	if mock.GetNextKeyFunc == nil {
		panic("TSSKeeperMock.GetNextKeyFunc: method is nil but TSSKeeper.GetNextKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetNextKey.Lock()
	mock.calls.GetNextKey = append(mock.calls.GetNextKey, callInfo)
	mock.lockGetNextKey.Unlock()
	return mock.GetNextKeyFunc(ctx, chain, keyRole)
}

// GetNextKeyCalls gets all the calls that were made to GetNextKey.
// Check the length with:
//     len(mockedTSSKeeper.GetNextKeyCalls())
func (mock *TSSKeeperMock) GetNextKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetNextKey.RLock()
	calls = mock.calls.GetNextKey
	mock.lockGetNextKey.RUnlock()
	return calls
}

// GetNextKeyID calls GetNextKeyIDFunc.
func (mock *TSSKeeperMock) GetNextKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) (github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, bool) {
	if mock.GetNextKeyIDFunc == nil {
		panic("TSSKeeperMock.GetNextKeyIDFunc: method is nil but TSSKeeper.GetNextKeyID was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetNextKeyID.Lock()
	mock.calls.GetNextKeyID = append(mock.calls.GetNextKeyID, callInfo)
	mock.lockGetNextKeyID.Unlock()
	return mock.GetNextKeyIDFunc(ctx, chain, keyRole)
}

// GetNextKeyIDCalls gets all the calls that were made to GetNextKeyID.
// Check the length with:
//     len(mockedTSSKeeper.GetNextKeyIDCalls())
func (mock *TSSKeeperMock) GetNextKeyIDCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetNextKeyID.RLock()
	calls = mock.calls.GetNextKeyID
	mock.lockGetNextKeyID.RUnlock()
	return calls
}

// GetOldActiveKeys calls GetOldActiveKeysFunc.
func (mock *TSSKeeperMock) GetOldActiveKeys(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) ([]github_com_axelarnetwork_axelar_core_x_tss_exported.Key, error) {
	if mock.GetOldActiveKeysFunc == nil {
		panic("TSSKeeperMock.GetOldActiveKeysFunc: method is nil but TSSKeeper.GetOldActiveKeys was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockGetOldActiveKeys.Lock()
	mock.calls.GetOldActiveKeys = append(mock.calls.GetOldActiveKeys, callInfo)
	mock.lockGetOldActiveKeys.Unlock()
	return mock.GetOldActiveKeysFunc(ctx, chain, keyRole)
}

// GetOldActiveKeysCalls gets all the calls that were made to GetOldActiveKeys.
// Check the length with:
//     len(mockedTSSKeeper.GetOldActiveKeysCalls())
func (mock *TSSKeeperMock) GetOldActiveKeysCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockGetOldActiveKeys.RLock()
	calls = mock.calls.GetOldActiveKeys
	mock.lockGetOldActiveKeys.RUnlock()
	return calls
}

// GetParams calls GetParamsFunc.
func (mock *TSSKeeperMock) GetParams(ctx github_com_cosmos_cosmos_sdk_types.Context) types.Params {
	if mock.GetParamsFunc == nil {
		panic("TSSKeeperMock.GetParamsFunc: method is nil but TSSKeeper.GetParams was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetParams.Lock()
	mock.calls.GetParams = append(mock.calls.GetParams, callInfo)
	mock.lockGetParams.Unlock()
	return mock.GetParamsFunc(ctx)
}

// GetParamsCalls gets all the calls that were made to GetParams.
// Check the length with:
//     len(mockedTSSKeeper.GetParamsCalls())
func (mock *TSSKeeperMock) GetParamsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetParams.RLock()
	calls = mock.calls.GetParams
	mock.lockGetParams.RUnlock()
	return calls
}

// GetParticipantsInKeygen calls GetParticipantsInKeygenFunc.
func (mock *TSSKeeperMock) GetParticipantsInKeygen(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if mock.GetParticipantsInKeygenFunc == nil {
		panic("TSSKeeperMock.GetParticipantsInKeygenFunc: method is nil but TSSKeeper.GetParticipantsInKeygen was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetParticipantsInKeygen.Lock()
	mock.calls.GetParticipantsInKeygen = append(mock.calls.GetParticipantsInKeygen, callInfo)
	mock.lockGetParticipantsInKeygen.Unlock()
	return mock.GetParticipantsInKeygenFunc(ctx, keyID)
}

// GetParticipantsInKeygenCalls gets all the calls that were made to GetParticipantsInKeygen.
// Check the length with:
//     len(mockedTSSKeeper.GetParticipantsInKeygenCalls())
func (mock *TSSKeeperMock) GetParticipantsInKeygenCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetParticipantsInKeygen.RLock()
	calls = mock.calls.GetParticipantsInKeygen
	mock.lockGetParticipantsInKeygen.RUnlock()
	return calls
}

// GetPrivateRecoveryInfo calls GetPrivateRecoveryInfoFunc.
func (mock *TSSKeeperMock) GetPrivateRecoveryInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) []byte {
	if mock.GetPrivateRecoveryInfoFunc == nil {
		panic("TSSKeeperMock.GetPrivateRecoveryInfoFunc: method is nil but TSSKeeper.GetPrivateRecoveryInfo was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:    ctx,
		Sender: sender,
		KeyID:  keyID,
	}
	mock.lockGetPrivateRecoveryInfo.Lock()
	mock.calls.GetPrivateRecoveryInfo = append(mock.calls.GetPrivateRecoveryInfo, callInfo)
	mock.lockGetPrivateRecoveryInfo.Unlock()
	return mock.GetPrivateRecoveryInfoFunc(ctx, sender, keyID)
}

// GetPrivateRecoveryInfoCalls gets all the calls that were made to GetPrivateRecoveryInfo.
// Check the length with:
//     len(mockedTSSKeeper.GetPrivateRecoveryInfoCalls())
func (mock *TSSKeeperMock) GetPrivateRecoveryInfoCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Sender github_com_cosmos_cosmos_sdk_types.ValAddress
	KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetPrivateRecoveryInfo.RLock()
	calls = mock.calls.GetPrivateRecoveryInfo
	mock.lockGetPrivateRecoveryInfo.RUnlock()
	return calls
}

// GetRouter calls GetRouterFunc.
func (mock *TSSKeeperMock) GetRouter() types.Router {
	if mock.GetRouterFunc == nil {
		panic("TSSKeeperMock.GetRouterFunc: method is nil but TSSKeeper.GetRouter was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRouter.Lock()
	mock.calls.GetRouter = append(mock.calls.GetRouter, callInfo)
	mock.lockGetRouter.Unlock()
	return mock.GetRouterFunc()
}

// GetRouterCalls gets all the calls that were made to GetRouter.
// Check the length with:
//     len(mockedTSSKeeper.GetRouterCalls())
func (mock *TSSKeeperMock) GetRouterCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRouter.RLock()
	calls = mock.calls.GetRouter
	mock.lockGetRouter.RUnlock()
	return calls
}

// GetSig calls GetSigFunc.
func (mock *TSSKeeperMock) GetSig(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) (github_com_axelarnetwork_axelar_core_x_tss_exported.Signature, github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
	if mock.GetSigFunc == nil {
		panic("TSSKeeperMock.GetSigFunc: method is nil but TSSKeeper.GetSig was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetSig.Lock()
	mock.calls.GetSig = append(mock.calls.GetSig, callInfo)
	mock.lockGetSig.Unlock()
	return mock.GetSigFunc(ctx, sigID)
}

// GetSigCalls gets all the calls that were made to GetSig.
// Check the length with:
//     len(mockedTSSKeeper.GetSigCalls())
func (mock *TSSKeeperMock) GetSigCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetSig.RLock()
	calls = mock.calls.GetSig
	mock.lockGetSig.RUnlock()
	return calls
}

// GetSignParticipants calls GetSignParticipantsFunc.
func (mock *TSSKeeperMock) GetSignParticipants(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []string {
	if mock.GetSignParticipantsFunc == nil {
		panic("TSSKeeperMock.GetSignParticipantsFunc: method is nil but TSSKeeper.GetSignParticipants was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetSignParticipants.Lock()
	mock.calls.GetSignParticipants = append(mock.calls.GetSignParticipants, callInfo)
	mock.lockGetSignParticipants.Unlock()
	return mock.GetSignParticipantsFunc(ctx, sigID)
}

// GetSignParticipantsCalls gets all the calls that were made to GetSignParticipants.
// Check the length with:
//     len(mockedTSSKeeper.GetSignParticipantsCalls())
func (mock *TSSKeeperMock) GetSignParticipantsCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetSignParticipants.RLock()
	calls = mock.calls.GetSignParticipants
	mock.lockGetSignParticipants.RUnlock()
	return calls
}

// GetSignParticipantsAsJSON calls GetSignParticipantsAsJSONFunc.
func (mock *TSSKeeperMock) GetSignParticipantsAsJSON(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []byte {
	if mock.GetSignParticipantsAsJSONFunc == nil {
		panic("TSSKeeperMock.GetSignParticipantsAsJSONFunc: method is nil but TSSKeeper.GetSignParticipantsAsJSON was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetSignParticipantsAsJSON.Lock()
	mock.calls.GetSignParticipantsAsJSON = append(mock.calls.GetSignParticipantsAsJSON, callInfo)
	mock.lockGetSignParticipantsAsJSON.Unlock()
	return mock.GetSignParticipantsAsJSONFunc(ctx, sigID)
}

// GetSignParticipantsAsJSONCalls gets all the calls that were made to GetSignParticipantsAsJSON.
// Check the length with:
//     len(mockedTSSKeeper.GetSignParticipantsAsJSONCalls())
func (mock *TSSKeeperMock) GetSignParticipantsAsJSONCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetSignParticipantsAsJSON.RLock()
	calls = mock.calls.GetSignParticipantsAsJSON
	mock.lockGetSignParticipantsAsJSON.RUnlock()
	return calls
}

// GetSignParticipantsSharesAsJSON calls GetSignParticipantsSharesAsJSONFunc.
func (mock *TSSKeeperMock) GetSignParticipantsSharesAsJSON(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string) []byte {
	if mock.GetSignParticipantsSharesAsJSONFunc == nil {
		panic("TSSKeeperMock.GetSignParticipantsSharesAsJSONFunc: method is nil but TSSKeeper.GetSignParticipantsSharesAsJSON was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}{
		Ctx:   ctx,
		SigID: sigID,
	}
	mock.lockGetSignParticipantsSharesAsJSON.Lock()
	mock.calls.GetSignParticipantsSharesAsJSON = append(mock.calls.GetSignParticipantsSharesAsJSON, callInfo)
	mock.lockGetSignParticipantsSharesAsJSON.Unlock()
	return mock.GetSignParticipantsSharesAsJSONFunc(ctx, sigID)
}

// GetSignParticipantsSharesAsJSONCalls gets all the calls that were made to GetSignParticipantsSharesAsJSON.
// Check the length with:
//     len(mockedTSSKeeper.GetSignParticipantsSharesAsJSONCalls())
func (mock *TSSKeeperMock) GetSignParticipantsSharesAsJSONCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
	}
	mock.lockGetSignParticipantsSharesAsJSON.RLock()
	calls = mock.calls.GetSignParticipantsSharesAsJSON
	mock.lockGetSignParticipantsSharesAsJSON.RUnlock()
	return calls
}

// GetSnapshotCounterForKeyID calls GetSnapshotCounterForKeyIDFunc.
func (mock *TSSKeeperMock) GetSnapshotCounterForKeyID(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) (int64, bool) {
	if mock.GetSnapshotCounterForKeyIDFunc == nil {
		panic("TSSKeeperMock.GetSnapshotCounterForKeyIDFunc: method is nil but TSSKeeper.GetSnapshotCounterForKeyID was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockGetSnapshotCounterForKeyID.Lock()
	mock.calls.GetSnapshotCounterForKeyID = append(mock.calls.GetSnapshotCounterForKeyID, callInfo)
	mock.lockGetSnapshotCounterForKeyID.Unlock()
	return mock.GetSnapshotCounterForKeyIDFunc(ctx, keyID)
}

// GetSnapshotCounterForKeyIDCalls gets all the calls that were made to GetSnapshotCounterForKeyID.
// Check the length with:
//     len(mockedTSSKeeper.GetSnapshotCounterForKeyIDCalls())
func (mock *TSSKeeperMock) GetSnapshotCounterForKeyIDCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockGetSnapshotCounterForKeyID.RLock()
	calls = mock.calls.GetSnapshotCounterForKeyID
	mock.lockGetSnapshotCounterForKeyID.RUnlock()
	return calls
}

// GetTssSuspendedUntil calls GetTssSuspendedUntilFunc.
func (mock *TSSKeeperMock) GetTssSuspendedUntil(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_cosmos_cosmos_sdk_types.ValAddress) int64 {
	if mock.GetTssSuspendedUntilFunc == nil {
		panic("TSSKeeperMock.GetTssSuspendedUntilFunc: method is nil but TSSKeeper.GetTssSuspendedUntil was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		Validator: validator,
	}
	mock.lockGetTssSuspendedUntil.Lock()
	mock.calls.GetTssSuspendedUntil = append(mock.calls.GetTssSuspendedUntil, callInfo)
	mock.lockGetTssSuspendedUntil.Unlock()
	return mock.GetTssSuspendedUntilFunc(ctx, validator)
}

// GetTssSuspendedUntilCalls gets all the calls that were made to GetTssSuspendedUntil.
// Check the length with:
//     len(mockedTSSKeeper.GetTssSuspendedUntilCalls())
func (mock *TSSKeeperMock) GetTssSuspendedUntilCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockGetTssSuspendedUntil.RLock()
	calls = mock.calls.GetTssSuspendedUntil
	mock.lockGetTssSuspendedUntil.RUnlock()
	return calls
}

// HasPrivateRecoveryInfos calls HasPrivateRecoveryInfosFunc.
func (mock *TSSKeeperMock) HasPrivateRecoveryInfos(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) bool {
	if mock.HasPrivateRecoveryInfosFunc == nil {
		panic("TSSKeeperMock.HasPrivateRecoveryInfosFunc: method is nil but TSSKeeper.HasPrivateRecoveryInfos was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:    ctx,
		Sender: sender,
		KeyID:  keyID,
	}
	mock.lockHasPrivateRecoveryInfos.Lock()
	mock.calls.HasPrivateRecoveryInfos = append(mock.calls.HasPrivateRecoveryInfos, callInfo)
	mock.lockHasPrivateRecoveryInfos.Unlock()
	return mock.HasPrivateRecoveryInfosFunc(ctx, sender, keyID)
}

// HasPrivateRecoveryInfosCalls gets all the calls that were made to HasPrivateRecoveryInfos.
// Check the length with:
//     len(mockedTSSKeeper.HasPrivateRecoveryInfosCalls())
func (mock *TSSKeeperMock) HasPrivateRecoveryInfosCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Sender github_com_cosmos_cosmos_sdk_types.ValAddress
	KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Sender github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyID  github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockHasPrivateRecoveryInfos.RLock()
	calls = mock.calls.HasPrivateRecoveryInfos
	mock.lockHasPrivateRecoveryInfos.RUnlock()
	return calls
}

// HasValidatorSubmittedMultisigPubKey calls HasValidatorSubmittedMultisigPubKeyFunc.
func (mock *TSSKeeperMock) HasValidatorSubmittedMultisigPubKey(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress) bool {
	if mock.HasValidatorSubmittedMultisigPubKeyFunc == nil {
		panic("TSSKeeperMock.HasValidatorSubmittedMultisigPubKeyFunc: method is nil but TSSKeeper.HasValidatorSubmittedMultisigPubKey was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		KeyID:     keyID,
		Validator: validator,
	}
	mock.lockHasValidatorSubmittedMultisigPubKey.Lock()
	mock.calls.HasValidatorSubmittedMultisigPubKey = append(mock.calls.HasValidatorSubmittedMultisigPubKey, callInfo)
	mock.lockHasValidatorSubmittedMultisigPubKey.Unlock()
	return mock.HasValidatorSubmittedMultisigPubKeyFunc(ctx, keyID, validator)
}

// HasValidatorSubmittedMultisigPubKeyCalls gets all the calls that were made to HasValidatorSubmittedMultisigPubKey.
// Check the length with:
//     len(mockedTSSKeeper.HasValidatorSubmittedMultisigPubKeyCalls())
func (mock *TSSKeeperMock) HasValidatorSubmittedMultisigPubKeyCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockHasValidatorSubmittedMultisigPubKey.RLock()
	calls = mock.calls.HasValidatorSubmittedMultisigPubKey
	mock.lockHasValidatorSubmittedMultisigPubKey.RUnlock()
	return calls
}

// IsMultisigKeygenCompleted calls IsMultisigKeygenCompletedFunc.
func (mock *TSSKeeperMock) IsMultisigKeygenCompleted(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) bool {
	if mock.IsMultisigKeygenCompletedFunc == nil {
		panic("TSSKeeperMock.IsMultisigKeygenCompletedFunc: method is nil but TSSKeeper.IsMultisigKeygenCompleted was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:   ctx,
		KeyID: keyID,
	}
	mock.lockIsMultisigKeygenCompleted.Lock()
	mock.calls.IsMultisigKeygenCompleted = append(mock.calls.IsMultisigKeygenCompleted, callInfo)
	mock.lockIsMultisigKeygenCompleted.Unlock()
	return mock.IsMultisigKeygenCompletedFunc(ctx, keyID)
}

// IsMultisigKeygenCompletedCalls gets all the calls that were made to IsMultisigKeygenCompleted.
// Check the length with:
//     len(mockedTSSKeeper.IsMultisigKeygenCompletedCalls())
func (mock *TSSKeeperMock) IsMultisigKeygenCompletedCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockIsMultisigKeygenCompleted.RLock()
	calls = mock.calls.IsMultisigKeygenCompleted
	mock.lockIsMultisigKeygenCompleted.RUnlock()
	return calls
}

// Logger calls LoggerFunc.
func (mock *TSSKeeperMock) Logger(ctx github_com_cosmos_cosmos_sdk_types.Context) log.Logger {
	if mock.LoggerFunc == nil {
		panic("TSSKeeperMock.LoggerFunc: method is nil but TSSKeeper.Logger was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogger.Lock()
	mock.calls.Logger = append(mock.calls.Logger, callInfo)
	mock.lockLogger.Unlock()
	return mock.LoggerFunc(ctx)
}

// LoggerCalls gets all the calls that were made to Logger.
// Check the length with:
//     len(mockedTSSKeeper.LoggerCalls())
func (mock *TSSKeeperMock) LoggerCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockLogger.RLock()
	calls = mock.calls.Logger
	mock.lockLogger.RUnlock()
	return calls
}

// PenalizeCriminal calls PenalizeCriminalFunc.
func (mock *TSSKeeperMock) PenalizeCriminal(ctx github_com_cosmos_cosmos_sdk_types.Context, criminal github_com_cosmos_cosmos_sdk_types.ValAddress, crimeType tofnd.MessageOut_CriminalList_Criminal_CrimeType) {
	if mock.PenalizeCriminalFunc == nil {
		panic("TSSKeeperMock.PenalizeCriminalFunc: method is nil but TSSKeeper.PenalizeCriminal was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Criminal  github_com_cosmos_cosmos_sdk_types.ValAddress
		CrimeType tofnd.MessageOut_CriminalList_Criminal_CrimeType
	}{
		Ctx:       ctx,
		Criminal:  criminal,
		CrimeType: crimeType,
	}
	mock.lockPenalizeCriminal.Lock()
	mock.calls.PenalizeCriminal = append(mock.calls.PenalizeCriminal, callInfo)
	mock.lockPenalizeCriminal.Unlock()
	mock.PenalizeCriminalFunc(ctx, criminal, crimeType)
}

// PenalizeCriminalCalls gets all the calls that were made to PenalizeCriminal.
// Check the length with:
//     len(mockedTSSKeeper.PenalizeCriminalCalls())
func (mock *TSSKeeperMock) PenalizeCriminalCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Criminal  github_com_cosmos_cosmos_sdk_types.ValAddress
	CrimeType tofnd.MessageOut_CriminalList_Criminal_CrimeType
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Criminal  github_com_cosmos_cosmos_sdk_types.ValAddress
		CrimeType tofnd.MessageOut_CriminalList_Criminal_CrimeType
	}
	mock.lockPenalizeCriminal.RLock()
	calls = mock.calls.PenalizeCriminal
	mock.lockPenalizeCriminal.RUnlock()
	return calls
}

// RotateKey calls RotateKeyFunc.
func (mock *TSSKeeperMock) RotateKey(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole) error {
	if mock.RotateKeyFunc == nil {
		panic("TSSKeeperMock.RotateKeyFunc: method is nil but TSSKeeper.RotateKey was just called")
	}
	callInfo := struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}{
		Ctx:     ctx,
		Chain:   chain,
		KeyRole: keyRole,
	}
	mock.lockRotateKey.Lock()
	mock.calls.RotateKey = append(mock.calls.RotateKey, callInfo)
	mock.lockRotateKey.Unlock()
	return mock.RotateKeyFunc(ctx, chain, keyRole)
}

// RotateKeyCalls gets all the calls that were made to RotateKey.
// Check the length with:
//     len(mockedTSSKeeper.RotateKeyCalls())
func (mock *TSSKeeperMock) RotateKeyCalls() []struct {
	Ctx     github_com_cosmos_cosmos_sdk_types.Context
	Chain   nexus.Chain
	KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
} {
	var calls []struct {
		Ctx     github_com_cosmos_cosmos_sdk_types.Context
		Chain   nexus.Chain
		KeyRole github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRole
	}
	mock.lockRotateKey.RLock()
	calls = mock.calls.RotateKey
	mock.lockRotateKey.RUnlock()
	return calls
}

// SelectSignParticipants calls SelectSignParticipantsFunc.
func (mock *TSSKeeperMock) SelectSignParticipants(ctx github_com_cosmos_cosmos_sdk_types.Context, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snap github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot) ([]github_com_axelarnetwork_axelar_core_x_snapshot_exported.Validator, []github_com_axelarnetwork_axelar_core_x_snapshot_exported.Validator, error) {
	if mock.SelectSignParticipantsFunc == nil {
		panic("TSSKeeperMock.SelectSignParticipantsFunc: method is nil but TSSKeeper.SelectSignParticipants was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snap        github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
	}{
		Ctx:         ctx,
		Snapshotter: snapshotter,
		Info:        info,
		Snap:        snap,
	}
	mock.lockSelectSignParticipants.Lock()
	mock.calls.SelectSignParticipants = append(mock.calls.SelectSignParticipants, callInfo)
	mock.lockSelectSignParticipants.Unlock()
	return mock.SelectSignParticipantsFunc(ctx, snapshotter, info, snap)
}

// SelectSignParticipantsCalls gets all the calls that were made to SelectSignParticipants.
// Check the length with:
//     len(mockedTSSKeeper.SelectSignParticipantsCalls())
func (mock *TSSKeeperMock) SelectSignParticipantsCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
	Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	Snap        github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snap        github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
	}
	mock.lockSelectSignParticipants.RLock()
	calls = mock.calls.SelectSignParticipants
	mock.lockSelectSignParticipants.RUnlock()
	return calls
}

// SetAvailableOperator calls SetAvailableOperatorFunc.
func (mock *TSSKeeperMock) SetAvailableOperator(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_cosmos_cosmos_sdk_types.ValAddress, keyIDs ...github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) {
	if mock.SetAvailableOperatorFunc == nil {
		panic("TSSKeeperMock.SetAvailableOperatorFunc: method is nil but TSSKeeper.SetAvailableOperator was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyIDs    []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:       ctx,
		Validator: validator,
		KeyIDs:    keyIDs,
	}
	mock.lockSetAvailableOperator.Lock()
	mock.calls.SetAvailableOperator = append(mock.calls.SetAvailableOperator, callInfo)
	mock.lockSetAvailableOperator.Unlock()
	mock.SetAvailableOperatorFunc(ctx, validator, keyIDs...)
}

// SetAvailableOperatorCalls gets all the calls that were made to SetAvailableOperator.
// Check the length with:
//     len(mockedTSSKeeper.SetAvailableOperatorCalls())
func (mock *TSSKeeperMock) SetAvailableOperatorCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	KeyIDs    []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyIDs    []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockSetAvailableOperator.RLock()
	calls = mock.calls.SetAvailableOperator
	mock.lockSetAvailableOperator.RUnlock()
	return calls
}

// SetExternalKeyIDs calls SetExternalKeyIDsFunc.
func (mock *TSSKeeperMock) SetExternalKeyIDs(ctx github_com_cosmos_cosmos_sdk_types.Context, chain nexus.Chain, keyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID) {
	if mock.SetExternalKeyIDsFunc == nil {
		panic("TSSKeeperMock.SetExternalKeyIDsFunc: method is nil but TSSKeeper.SetExternalKeyIDs was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Chain  nexus.Chain
		KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}{
		Ctx:    ctx,
		Chain:  chain,
		KeyIDs: keyIDs,
	}
	mock.lockSetExternalKeyIDs.Lock()
	mock.calls.SetExternalKeyIDs = append(mock.calls.SetExternalKeyIDs, callInfo)
	mock.lockSetExternalKeyIDs.Unlock()
	mock.SetExternalKeyIDsFunc(ctx, chain, keyIDs)
}

// SetExternalKeyIDsCalls gets all the calls that were made to SetExternalKeyIDs.
// Check the length with:
//     len(mockedTSSKeeper.SetExternalKeyIDsCalls())
func (mock *TSSKeeperMock) SetExternalKeyIDsCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	Chain  nexus.Chain
	KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		Chain  nexus.Chain
		KeyIDs []github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	}
	mock.lockSetExternalKeyIDs.RLock()
	calls = mock.calls.SetExternalKeyIDs
	mock.lockSetExternalKeyIDs.RUnlock()
	return calls
}

// SetGroupRecoveryInfo calls SetGroupRecoveryInfoFunc.
func (mock *TSSKeeperMock) SetGroupRecoveryInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, recoveryInfo []byte) {
	if mock.SetGroupRecoveryInfoFunc == nil {
		panic("TSSKeeperMock.SetGroupRecoveryInfoFunc: method is nil but TSSKeeper.SetGroupRecoveryInfo was just called")
	}
	callInfo := struct {
		Ctx          github_com_cosmos_cosmos_sdk_types.Context
		KeyID        github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		RecoveryInfo []byte
	}{
		Ctx:          ctx,
		KeyID:        keyID,
		RecoveryInfo: recoveryInfo,
	}
	mock.lockSetGroupRecoveryInfo.Lock()
	mock.calls.SetGroupRecoveryInfo = append(mock.calls.SetGroupRecoveryInfo, callInfo)
	mock.lockSetGroupRecoveryInfo.Unlock()
	mock.SetGroupRecoveryInfoFunc(ctx, keyID, recoveryInfo)
}

// SetGroupRecoveryInfoCalls gets all the calls that were made to SetGroupRecoveryInfo.
// Check the length with:
//     len(mockedTSSKeeper.SetGroupRecoveryInfoCalls())
func (mock *TSSKeeperMock) SetGroupRecoveryInfoCalls() []struct {
	Ctx          github_com_cosmos_cosmos_sdk_types.Context
	KeyID        github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	RecoveryInfo []byte
} {
	var calls []struct {
		Ctx          github_com_cosmos_cosmos_sdk_types.Context
		KeyID        github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		RecoveryInfo []byte
	}
	mock.lockSetGroupRecoveryInfo.RLock()
	calls = mock.calls.SetGroupRecoveryInfo
	mock.lockSetGroupRecoveryInfo.RUnlock()
	return calls
}

// SetInfoForSig calls SetInfoForSigFunc.
func (mock *TSSKeeperMock) SetInfoForSig(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo) {
	if mock.SetInfoForSigFunc == nil {
		panic("TSSKeeperMock.SetInfoForSigFunc: method is nil but TSSKeeper.SetInfoForSig was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
		Info  github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	}{
		Ctx:   ctx,
		SigID: sigID,
		Info:  info,
	}
	mock.lockSetInfoForSig.Lock()
	mock.calls.SetInfoForSig = append(mock.calls.SetInfoForSig, callInfo)
	mock.lockSetInfoForSig.Unlock()
	mock.SetInfoForSigFunc(ctx, sigID, info)
}

// SetInfoForSigCalls gets all the calls that were made to SetInfoForSig.
// Check the length with:
//     len(mockedTSSKeeper.SetInfoForSigCalls())
func (mock *TSSKeeperMock) SetInfoForSigCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SigID string
	Info  github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SigID string
		Info  github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	}
	mock.lockSetInfoForSig.RLock()
	calls = mock.calls.SetInfoForSig
	mock.lockSetInfoForSig.RUnlock()
	return calls
}

// SetKey calls SetKeyFunc.
func (mock *TSSKeeperMock) SetKey(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, key ecdsa.PublicKey) {
	if mock.SetKeyFunc == nil {
		panic("TSSKeeperMock.SetKeyFunc: method is nil but TSSKeeper.SetKey was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Key   ecdsa.PublicKey
	}{
		Ctx:   ctx,
		KeyID: keyID,
		Key:   key,
	}
	mock.lockSetKey.Lock()
	mock.calls.SetKey = append(mock.calls.SetKey, callInfo)
	mock.lockSetKey.Unlock()
	mock.SetKeyFunc(ctx, keyID, key)
}

// SetKeyCalls gets all the calls that were made to SetKey.
// Check the length with:
//     len(mockedTSSKeeper.SetKeyCalls())
func (mock *TSSKeeperMock) SetKeyCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	Key   ecdsa.PublicKey
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		KeyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Key   ecdsa.PublicKey
	}
	mock.lockSetKey.RLock()
	calls = mock.calls.SetKey
	mock.lockSetKey.RUnlock()
	return calls
}

// SetKeyInfo calls SetKeyInfoFunc.
func (mock *TSSKeeperMock) SetKeyInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, info types.KeyInfo) {
	if mock.SetKeyInfoFunc == nil {
		panic("TSSKeeperMock.SetKeyInfoFunc: method is nil but TSSKeeper.SetKeyInfo was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Info types.KeyInfo
	}{
		Ctx:  ctx,
		Info: info,
	}
	mock.lockSetKeyInfo.Lock()
	mock.calls.SetKeyInfo = append(mock.calls.SetKeyInfo, callInfo)
	mock.lockSetKeyInfo.Unlock()
	mock.SetKeyInfoFunc(ctx, info)
}

// SetKeyInfoCalls gets all the calls that were made to SetKeyInfo.
// Check the length with:
//     len(mockedTSSKeeper.SetKeyInfoCalls())
func (mock *TSSKeeperMock) SetKeyInfoCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	Info types.KeyInfo
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Info types.KeyInfo
	}
	mock.lockSetKeyInfo.RLock()
	calls = mock.calls.SetKeyInfo
	mock.lockSetKeyInfo.RUnlock()
	return calls
}

// SetParams calls SetParamsFunc.
func (mock *TSSKeeperMock) SetParams(ctx github_com_cosmos_cosmos_sdk_types.Context, p types.Params) {
	if mock.SetParamsFunc == nil {
		panic("TSSKeeperMock.SetParamsFunc: method is nil but TSSKeeper.SetParams was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		P   types.Params
	}{
		Ctx: ctx,
		P:   p,
	}
	mock.lockSetParams.Lock()
	mock.calls.SetParams = append(mock.calls.SetParams, callInfo)
	mock.lockSetParams.Unlock()
	mock.SetParamsFunc(ctx, p)
}

// SetParamsCalls gets all the calls that were made to SetParams.
// Check the length with:
//     len(mockedTSSKeeper.SetParamsCalls())
func (mock *TSSKeeperMock) SetParamsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
	P   types.Params
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
		P   types.Params
	}
	mock.lockSetParams.RLock()
	calls = mock.calls.SetParams
	mock.lockSetParams.RUnlock()
	return calls
}

// SetPrivateRecoveryInfo calls SetPrivateRecoveryInfoFunc.
func (mock *TSSKeeperMock) SetPrivateRecoveryInfo(ctx github_com_cosmos_cosmos_sdk_types.Context, sender github_com_cosmos_cosmos_sdk_types.ValAddress, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, recoveryInfo []byte) {
	if mock.SetPrivateRecoveryInfoFunc == nil {
		panic("TSSKeeperMock.SetPrivateRecoveryInfoFunc: method is nil but TSSKeeper.SetPrivateRecoveryInfo was just called")
	}
	callInfo := struct {
		Ctx          github_com_cosmos_cosmos_sdk_types.Context
		Sender       github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyID        github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		RecoveryInfo []byte
	}{
		Ctx:          ctx,
		Sender:       sender,
		KeyID:        keyID,
		RecoveryInfo: recoveryInfo,
	}
	mock.lockSetPrivateRecoveryInfo.Lock()
	mock.calls.SetPrivateRecoveryInfo = append(mock.calls.SetPrivateRecoveryInfo, callInfo)
	mock.lockSetPrivateRecoveryInfo.Unlock()
	mock.SetPrivateRecoveryInfoFunc(ctx, sender, keyID, recoveryInfo)
}

// SetPrivateRecoveryInfoCalls gets all the calls that were made to SetPrivateRecoveryInfo.
// Check the length with:
//     len(mockedTSSKeeper.SetPrivateRecoveryInfoCalls())
func (mock *TSSKeeperMock) SetPrivateRecoveryInfoCalls() []struct {
	Ctx          github_com_cosmos_cosmos_sdk_types.Context
	Sender       github_com_cosmos_cosmos_sdk_types.ValAddress
	KeyID        github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	RecoveryInfo []byte
} {
	var calls []struct {
		Ctx          github_com_cosmos_cosmos_sdk_types.Context
		Sender       github_com_cosmos_cosmos_sdk_types.ValAddress
		KeyID        github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		RecoveryInfo []byte
	}
	mock.lockSetPrivateRecoveryInfo.RLock()
	calls = mock.calls.SetPrivateRecoveryInfo
	mock.lockSetPrivateRecoveryInfo.RUnlock()
	return calls
}

// SetSig calls SetSigFunc.
func (mock *TSSKeeperMock) SetSig(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, signature []byte) {
	if mock.SetSigFunc == nil {
		panic("TSSKeeperMock.SetSigFunc: method is nil but TSSKeeper.SetSig was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		SigID     string
		Signature []byte
	}{
		Ctx:       ctx,
		SigID:     sigID,
		Signature: signature,
	}
	mock.lockSetSig.Lock()
	mock.calls.SetSig = append(mock.calls.SetSig, callInfo)
	mock.lockSetSig.Unlock()
	mock.SetSigFunc(ctx, sigID, signature)
}

// SetSigCalls gets all the calls that were made to SetSig.
// Check the length with:
//     len(mockedTSSKeeper.SetSigCalls())
func (mock *TSSKeeperMock) SetSigCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	SigID     string
	Signature []byte
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		SigID     string
		Signature []byte
	}
	mock.lockSetSig.RLock()
	calls = mock.calls.SetSig
	mock.lockSetSig.RUnlock()
	return calls
}

// SetSigStatus calls SetSigStatusFunc.
func (mock *TSSKeeperMock) SetSigStatus(ctx github_com_cosmos_cosmos_sdk_types.Context, sigID string, status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus) {
	if mock.SetSigStatusFunc == nil {
		panic("TSSKeeperMock.SetSigStatusFunc: method is nil but TSSKeeper.SetSigStatus was just called")
	}
	callInfo := struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		SigID  string
		Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
	}{
		Ctx:    ctx,
		SigID:  sigID,
		Status: status,
	}
	mock.lockSetSigStatus.Lock()
	mock.calls.SetSigStatus = append(mock.calls.SetSigStatus, callInfo)
	mock.lockSetSigStatus.Unlock()
	mock.SetSigStatusFunc(ctx, sigID, status)
}

// SetSigStatusCalls gets all the calls that were made to SetSigStatus.
// Check the length with:
//     len(mockedTSSKeeper.SetSigStatusCalls())
func (mock *TSSKeeperMock) SetSigStatusCalls() []struct {
	Ctx    github_com_cosmos_cosmos_sdk_types.Context
	SigID  string
	Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
} {
	var calls []struct {
		Ctx    github_com_cosmos_cosmos_sdk_types.Context
		SigID  string
		Status github_com_axelarnetwork_axelar_core_x_tss_exported.SigStatus
	}
	mock.lockSetSigStatus.RLock()
	calls = mock.calls.SetSigStatus
	mock.lockSetSigStatus.RUnlock()
	return calls
}

// StartKeygen calls StartKeygenFunc.
func (mock *TSSKeeperMock) StartKeygen(ctx github_com_cosmos_cosmos_sdk_types.Context, voter types.Voter, keyInfo types.KeyInfo, snapshot github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot) error {
	if mock.StartKeygenFunc == nil {
		panic("TSSKeeperMock.StartKeygenFunc: method is nil but TSSKeeper.StartKeygen was just called")
	}
	callInfo := struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Voter    types.Voter
		KeyInfo  types.KeyInfo
		Snapshot github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
	}{
		Ctx:      ctx,
		Voter:    voter,
		KeyInfo:  keyInfo,
		Snapshot: snapshot,
	}
	mock.lockStartKeygen.Lock()
	mock.calls.StartKeygen = append(mock.calls.StartKeygen, callInfo)
	mock.lockStartKeygen.Unlock()
	return mock.StartKeygenFunc(ctx, voter, keyInfo, snapshot)
}

// StartKeygenCalls gets all the calls that were made to StartKeygen.
// Check the length with:
//     len(mockedTSSKeeper.StartKeygenCalls())
func (mock *TSSKeeperMock) StartKeygenCalls() []struct {
	Ctx      github_com_cosmos_cosmos_sdk_types.Context
	Voter    types.Voter
	KeyInfo  types.KeyInfo
	Snapshot github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
} {
	var calls []struct {
		Ctx      github_com_cosmos_cosmos_sdk_types.Context
		Voter    types.Voter
		KeyInfo  types.KeyInfo
		Snapshot github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot
	}
	mock.lockStartKeygen.RLock()
	calls = mock.calls.StartKeygen
	mock.lockStartKeygen.RUnlock()
	return calls
}

// StartSign calls StartSignFunc.
func (mock *TSSKeeperMock) StartSign(ctx github_com_cosmos_cosmos_sdk_types.Context, info github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo, snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter, voter interface {
	InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error
}) error {
	if mock.StartSignFunc == nil {
		panic("TSSKeeperMock.StartSignFunc: method is nil but TSSKeeper.StartSign was just called")
	}
	callInfo := struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
		Voter       interface {
			InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error
		}
	}{
		Ctx:         ctx,
		Info:        info,
		Snapshotter: snapshotter,
		Voter:       voter,
	}
	mock.lockStartSign.Lock()
	mock.calls.StartSign = append(mock.calls.StartSign, callInfo)
	mock.lockStartSign.Unlock()
	return mock.StartSignFunc(ctx, info, snapshotter, voter)
}

// StartSignCalls gets all the calls that were made to StartSign.
// Check the length with:
//     len(mockedTSSKeeper.StartSignCalls())
func (mock *TSSKeeperMock) StartSignCalls() []struct {
	Ctx         github_com_cosmos_cosmos_sdk_types.Context
	Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
	Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
	Voter       interface {
		InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error
	}
} {
	var calls []struct {
		Ctx         github_com_cosmos_cosmos_sdk_types.Context
		Info        github_com_axelarnetwork_axelar_core_x_tss_exported.SignInfo
		Snapshotter github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshotter
		Voter       interface {
			InitializePollWithSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, key exported1.PollKey, snapshotSeqNo int64, pollProperties ...exported1.PollProperty) error
		}
	}
	mock.lockStartSign.RLock()
	calls = mock.calls.StartSign
	mock.lockStartSign.RUnlock()
	return calls
}

// SubmitPubKeys calls SubmitPubKeysFunc.
func (mock *TSSKeeperMock) SubmitPubKeys(ctx github_com_cosmos_cosmos_sdk_types.Context, keyID github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID, validator github_com_cosmos_cosmos_sdk_types.ValAddress, pubKeys ...[]byte) bool {
	if mock.SubmitPubKeysFunc == nil {
		panic("TSSKeeperMock.SubmitPubKeysFunc: method is nil but TSSKeeper.SubmitPubKeys was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		PubKeys   [][]byte
	}{
		Ctx:       ctx,
		KeyID:     keyID,
		Validator: validator,
		PubKeys:   pubKeys,
	}
	mock.lockSubmitPubKeys.Lock()
	mock.calls.SubmitPubKeys = append(mock.calls.SubmitPubKeys, callInfo)
	mock.lockSubmitPubKeys.Unlock()
	return mock.SubmitPubKeysFunc(ctx, keyID, validator, pubKeys...)
}

// SubmitPubKeysCalls gets all the calls that were made to SubmitPubKeys.
// Check the length with:
//     len(mockedTSSKeeper.SubmitPubKeysCalls())
func (mock *TSSKeeperMock) SubmitPubKeysCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
	Validator github_com_cosmos_cosmos_sdk_types.ValAddress
	PubKeys   [][]byte
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		KeyID     github_com_axelarnetwork_axelar_core_x_tss_exported.KeyID
		Validator github_com_cosmos_cosmos_sdk_types.ValAddress
		PubKeys   [][]byte
	}
	mock.lockSubmitPubKeys.RLock()
	calls = mock.calls.SubmitPubKeys
	mock.lockSubmitPubKeys.RUnlock()
	return calls
}

// Ensure, that SnapshotterMock does implement types.Snapshotter.
// If this is not the case, regenerate this file with moq.
var _ types.Snapshotter = &SnapshotterMock{}

// SnapshotterMock is a mock implementation of types.Snapshotter.
//
// 	func TestSomethingThatUsesSnapshotter(t *testing.T) {
//
// 		// make and configure a mocked types.Snapshotter
// 		mockedSnapshotter := &SnapshotterMock{
// 			GetLatestCounterFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
// 				panic("mock out the GetLatestCounter method")
// 			},
// 			GetLatestSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, bool) {
// 				panic("mock out the GetLatestSnapshot method")
// 			},
// 			GetOperatorFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress {
// 				panic("mock out the GetOperator method")
// 			},
// 			GetProxyFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, principal github_com_cosmos_cosmos_sdk_types.ValAddress) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool) {
// 				panic("mock out the GetProxy method")
// 			},
// 			GetSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, seqNo int64) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, bool) {
// 				panic("mock out the GetSnapshot method")
// 			},
// 			GetValidatorIllegibilityFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_axelarnetwork_axelar_core_x_snapshot_exported.SDKValidator) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.ValidatorIllegibility, error) {
// 				panic("mock out the GetValidatorIllegibility method")
// 			},
// 			TakeSnapshotFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, error) {
// 				panic("mock out the TakeSnapshot method")
// 			},
// 		}
//
// 		// use mockedSnapshotter in code that requires types.Snapshotter
// 		// and then make assertions.
//
// 	}
type SnapshotterMock struct {
	// GetLatestCounterFunc mocks the GetLatestCounter method.
	GetLatestCounterFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) int64

	// GetLatestSnapshotFunc mocks the GetLatestSnapshot method.
	GetLatestSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, bool)

	// GetOperatorFunc mocks the GetOperator method.
	GetOperatorFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress

	// GetProxyFunc mocks the GetProxy method.
	GetProxyFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, principal github_com_cosmos_cosmos_sdk_types.ValAddress) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool)

	// GetSnapshotFunc mocks the GetSnapshot method.
	GetSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, seqNo int64) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, bool)

	// GetValidatorIllegibilityFunc mocks the GetValidatorIllegibility method.
	GetValidatorIllegibilityFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_axelarnetwork_axelar_core_x_snapshot_exported.SDKValidator) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.ValidatorIllegibility, error)

	// TakeSnapshotFunc mocks the TakeSnapshot method.
	TakeSnapshotFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLatestCounter holds details about calls to the GetLatestCounter method.
		GetLatestCounter []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetLatestSnapshot holds details about calls to the GetLatestSnapshot method.
		GetLatestSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
		// GetOperator holds details about calls to the GetOperator method.
		GetOperator []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Proxy is the proxy argument value.
			Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
		}
		// GetProxy holds details about calls to the GetProxy method.
		GetProxy []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Principal is the principal argument value.
			Principal github_com_cosmos_cosmos_sdk_types.ValAddress
		}
		// GetSnapshot holds details about calls to the GetSnapshot method.
		GetSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// SeqNo is the seqNo argument value.
			SeqNo int64
		}
		// GetValidatorIllegibility holds details about calls to the GetValidatorIllegibility method.
		GetValidatorIllegibility []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Validator is the validator argument value.
			Validator github_com_axelarnetwork_axelar_core_x_snapshot_exported.SDKValidator
		}
		// TakeSnapshot holds details about calls to the TakeSnapshot method.
		TakeSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// KeyRequirement is the keyRequirement argument value.
			KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
		}
	}
	lockGetLatestCounter         sync.RWMutex
	lockGetLatestSnapshot        sync.RWMutex
	lockGetOperator              sync.RWMutex
	lockGetProxy                 sync.RWMutex
	lockGetSnapshot              sync.RWMutex
	lockGetValidatorIllegibility sync.RWMutex
	lockTakeSnapshot             sync.RWMutex
}

// GetLatestCounter calls GetLatestCounterFunc.
func (mock *SnapshotterMock) GetLatestCounter(ctx github_com_cosmos_cosmos_sdk_types.Context) int64 {
	if mock.GetLatestCounterFunc == nil {
		panic("SnapshotterMock.GetLatestCounterFunc: method is nil but Snapshotter.GetLatestCounter was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestCounter.Lock()
	mock.calls.GetLatestCounter = append(mock.calls.GetLatestCounter, callInfo)
	mock.lockGetLatestCounter.Unlock()
	return mock.GetLatestCounterFunc(ctx)
}

// GetLatestCounterCalls gets all the calls that were made to GetLatestCounter.
// Check the length with:
//     len(mockedSnapshotter.GetLatestCounterCalls())
func (mock *SnapshotterMock) GetLatestCounterCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetLatestCounter.RLock()
	calls = mock.calls.GetLatestCounter
	mock.lockGetLatestCounter.RUnlock()
	return calls
}

// GetLatestSnapshot calls GetLatestSnapshotFunc.
func (mock *SnapshotterMock) GetLatestSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, bool) {
	if mock.GetLatestSnapshotFunc == nil {
		panic("SnapshotterMock.GetLatestSnapshotFunc: method is nil but Snapshotter.GetLatestSnapshot was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLatestSnapshot.Lock()
	mock.calls.GetLatestSnapshot = append(mock.calls.GetLatestSnapshot, callInfo)
	mock.lockGetLatestSnapshot.Unlock()
	return mock.GetLatestSnapshotFunc(ctx)
}

// GetLatestSnapshotCalls gets all the calls that were made to GetLatestSnapshot.
// Check the length with:
//     len(mockedSnapshotter.GetLatestSnapshotCalls())
func (mock *SnapshotterMock) GetLatestSnapshotCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetLatestSnapshot.RLock()
	calls = mock.calls.GetLatestSnapshot
	mock.lockGetLatestSnapshot.RUnlock()
	return calls
}

// GetOperator calls GetOperatorFunc.
func (mock *SnapshotterMock) GetOperator(ctx github_com_cosmos_cosmos_sdk_types.Context, proxy github_com_cosmos_cosmos_sdk_types.AccAddress) github_com_cosmos_cosmos_sdk_types.ValAddress {
	if mock.GetOperatorFunc == nil {
		panic("SnapshotterMock.GetOperatorFunc: method is nil but Snapshotter.GetOperator was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
	}{
		Ctx:   ctx,
		Proxy: proxy,
	}
	mock.lockGetOperator.Lock()
	mock.calls.GetOperator = append(mock.calls.GetOperator, callInfo)
	mock.lockGetOperator.Unlock()
	return mock.GetOperatorFunc(ctx, proxy)
}

// GetOperatorCalls gets all the calls that were made to GetOperator.
// Check the length with:
//     len(mockedSnapshotter.GetOperatorCalls())
func (mock *SnapshotterMock) GetOperatorCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Proxy github_com_cosmos_cosmos_sdk_types.AccAddress
	}
	mock.lockGetOperator.RLock()
	calls = mock.calls.GetOperator
	mock.lockGetOperator.RUnlock()
	return calls
}

// GetProxy calls GetProxyFunc.
func (mock *SnapshotterMock) GetProxy(ctx github_com_cosmos_cosmos_sdk_types.Context, principal github_com_cosmos_cosmos_sdk_types.ValAddress) (github_com_cosmos_cosmos_sdk_types.AccAddress, bool) {
	if mock.GetProxyFunc == nil {
		panic("SnapshotterMock.GetProxyFunc: method is nil but Snapshotter.GetProxy was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Principal github_com_cosmos_cosmos_sdk_types.ValAddress
	}{
		Ctx:       ctx,
		Principal: principal,
	}
	mock.lockGetProxy.Lock()
	mock.calls.GetProxy = append(mock.calls.GetProxy, callInfo)
	mock.lockGetProxy.Unlock()
	return mock.GetProxyFunc(ctx, principal)
}

// GetProxyCalls gets all the calls that were made to GetProxy.
// Check the length with:
//     len(mockedSnapshotter.GetProxyCalls())
func (mock *SnapshotterMock) GetProxyCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Principal github_com_cosmos_cosmos_sdk_types.ValAddress
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Principal github_com_cosmos_cosmos_sdk_types.ValAddress
	}
	mock.lockGetProxy.RLock()
	calls = mock.calls.GetProxy
	mock.lockGetProxy.RUnlock()
	return calls
}

// GetSnapshot calls GetSnapshotFunc.
func (mock *SnapshotterMock) GetSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, seqNo int64) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, bool) {
	if mock.GetSnapshotFunc == nil {
		panic("SnapshotterMock.GetSnapshotFunc: method is nil but Snapshotter.GetSnapshot was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SeqNo int64
	}{
		Ctx:   ctx,
		SeqNo: seqNo,
	}
	mock.lockGetSnapshot.Lock()
	mock.calls.GetSnapshot = append(mock.calls.GetSnapshot, callInfo)
	mock.lockGetSnapshot.Unlock()
	return mock.GetSnapshotFunc(ctx, seqNo)
}

// GetSnapshotCalls gets all the calls that were made to GetSnapshot.
// Check the length with:
//     len(mockedSnapshotter.GetSnapshotCalls())
func (mock *SnapshotterMock) GetSnapshotCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	SeqNo int64
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		SeqNo int64
	}
	mock.lockGetSnapshot.RLock()
	calls = mock.calls.GetSnapshot
	mock.lockGetSnapshot.RUnlock()
	return calls
}

// GetValidatorIllegibility calls GetValidatorIllegibilityFunc.
func (mock *SnapshotterMock) GetValidatorIllegibility(ctx github_com_cosmos_cosmos_sdk_types.Context, validator github_com_axelarnetwork_axelar_core_x_snapshot_exported.SDKValidator) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.ValidatorIllegibility, error) {
	if mock.GetValidatorIllegibilityFunc == nil {
		panic("SnapshotterMock.GetValidatorIllegibilityFunc: method is nil but Snapshotter.GetValidatorIllegibility was just called")
	}
	callInfo := struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator github_com_axelarnetwork_axelar_core_x_snapshot_exported.SDKValidator
	}{
		Ctx:       ctx,
		Validator: validator,
	}
	mock.lockGetValidatorIllegibility.Lock()
	mock.calls.GetValidatorIllegibility = append(mock.calls.GetValidatorIllegibility, callInfo)
	mock.lockGetValidatorIllegibility.Unlock()
	return mock.GetValidatorIllegibilityFunc(ctx, validator)
}

// GetValidatorIllegibilityCalls gets all the calls that were made to GetValidatorIllegibility.
// Check the length with:
//     len(mockedSnapshotter.GetValidatorIllegibilityCalls())
func (mock *SnapshotterMock) GetValidatorIllegibilityCalls() []struct {
	Ctx       github_com_cosmos_cosmos_sdk_types.Context
	Validator github_com_axelarnetwork_axelar_core_x_snapshot_exported.SDKValidator
} {
	var calls []struct {
		Ctx       github_com_cosmos_cosmos_sdk_types.Context
		Validator github_com_axelarnetwork_axelar_core_x_snapshot_exported.SDKValidator
	}
	mock.lockGetValidatorIllegibility.RLock()
	calls = mock.calls.GetValidatorIllegibility
	mock.lockGetValidatorIllegibility.RUnlock()
	return calls
}

// TakeSnapshot calls TakeSnapshotFunc.
func (mock *SnapshotterMock) TakeSnapshot(ctx github_com_cosmos_cosmos_sdk_types.Context, keyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement) (github_com_axelarnetwork_axelar_core_x_snapshot_exported.Snapshot, error) {
	if mock.TakeSnapshotFunc == nil {
		panic("SnapshotterMock.TakeSnapshotFunc: method is nil but Snapshotter.TakeSnapshot was just called")
	}
	callInfo := struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
	}{
		Ctx:            ctx,
		KeyRequirement: keyRequirement,
	}
	mock.lockTakeSnapshot.Lock()
	mock.calls.TakeSnapshot = append(mock.calls.TakeSnapshot, callInfo)
	mock.lockTakeSnapshot.Unlock()
	return mock.TakeSnapshotFunc(ctx, keyRequirement)
}

// TakeSnapshotCalls gets all the calls that were made to TakeSnapshot.
// Check the length with:
//     len(mockedSnapshotter.TakeSnapshotCalls())
func (mock *SnapshotterMock) TakeSnapshotCalls() []struct {
	Ctx            github_com_cosmos_cosmos_sdk_types.Context
	KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
} {
	var calls []struct {
		Ctx            github_com_cosmos_cosmos_sdk_types.Context
		KeyRequirement github_com_axelarnetwork_axelar_core_x_tss_exported.KeyRequirement
	}
	mock.lockTakeSnapshot.RLock()
	calls = mock.calls.TakeSnapshot
	mock.lockTakeSnapshot.RUnlock()
	return calls
}

// Ensure, that NexusMock does implement types.Nexus.
// If this is not the case, regenerate this file with moq.
var _ types.Nexus = &NexusMock{}

// NexusMock is a mock implementation of types.Nexus.
//
// 	func TestSomethingThatUsesNexus(t *testing.T) {
//
// 		// make and configure a mocked types.Nexus
// 		mockedNexus := &NexusMock{
// 			GetChainFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
// 				panic("mock out the GetChain method")
// 			},
// 			GetChainsFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context) []nexus.Chain {
// 				panic("mock out the GetChains method")
// 			},
// 		}
//
// 		// use mockedNexus in code that requires types.Nexus
// 		// and then make assertions.
//
// 	}
type NexusMock struct {
	// GetChainFunc mocks the GetChain method.
	GetChainFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool)

	// GetChainsFunc mocks the GetChains method.
	GetChainsFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context) []nexus.Chain

	// calls tracks calls to the methods.
	calls struct {
		// GetChain holds details about calls to the GetChain method.
		GetChain []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Chain is the chain argument value.
			Chain string
		}
		// GetChains holds details about calls to the GetChains method.
		GetChains []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
		}
	}
	lockGetChain  sync.RWMutex
	lockGetChains sync.RWMutex
}

// GetChain calls GetChainFunc.
func (mock *NexusMock) GetChain(ctx github_com_cosmos_cosmos_sdk_types.Context, chain string) (nexus.Chain, bool) {
	if mock.GetChainFunc == nil {
		panic("NexusMock.GetChainFunc: method is nil but Nexus.GetChain was just called")
	}
	callInfo := struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}{
		Ctx:   ctx,
		Chain: chain,
	}
	mock.lockGetChain.Lock()
	mock.calls.GetChain = append(mock.calls.GetChain, callInfo)
	mock.lockGetChain.Unlock()
	return mock.GetChainFunc(ctx, chain)
}

// GetChainCalls gets all the calls that were made to GetChain.
// Check the length with:
//     len(mockedNexus.GetChainCalls())
func (mock *NexusMock) GetChainCalls() []struct {
	Ctx   github_com_cosmos_cosmos_sdk_types.Context
	Chain string
} {
	var calls []struct {
		Ctx   github_com_cosmos_cosmos_sdk_types.Context
		Chain string
	}
	mock.lockGetChain.RLock()
	calls = mock.calls.GetChain
	mock.lockGetChain.RUnlock()
	return calls
}

// GetChains calls GetChainsFunc.
func (mock *NexusMock) GetChains(ctx github_com_cosmos_cosmos_sdk_types.Context) []nexus.Chain {
	if mock.GetChainsFunc == nil {
		panic("NexusMock.GetChainsFunc: method is nil but Nexus.GetChains was just called")
	}
	callInfo := struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetChains.Lock()
	mock.calls.GetChains = append(mock.calls.GetChains, callInfo)
	mock.lockGetChains.Unlock()
	return mock.GetChainsFunc(ctx)
}

// GetChainsCalls gets all the calls that were made to GetChains.
// Check the length with:
//     len(mockedNexus.GetChainsCalls())
func (mock *NexusMock) GetChainsCalls() []struct {
	Ctx github_com_cosmos_cosmos_sdk_types.Context
} {
	var calls []struct {
		Ctx github_com_cosmos_cosmos_sdk_types.Context
	}
	mock.lockGetChains.RLock()
	calls = mock.calls.GetChains
	mock.lockGetChains.RUnlock()
	return calls
}

// Ensure, that RewarderMock does implement types.Rewarder.
// If this is not the case, regenerate this file with moq.
var _ types.Rewarder = &RewarderMock{}

// RewarderMock is a mock implementation of types.Rewarder.
//
// 	func TestSomethingThatUsesRewarder(t *testing.T) {
//
// 		// make and configure a mocked types.Rewarder
// 		mockedRewarder := &RewarderMock{
// 			GetPoolFunc: func(ctx github_com_cosmos_cosmos_sdk_types.Context, name string) reward.RewardPool {
// 				panic("mock out the GetPool method")
// 			},
// 		}
//
// 		// use mockedRewarder in code that requires types.Rewarder
// 		// and then make assertions.
//
// 	}
type RewarderMock struct {
	// GetPoolFunc mocks the GetPool method.
	GetPoolFunc func(ctx github_com_cosmos_cosmos_sdk_types.Context, name string) reward.RewardPool

	// calls tracks calls to the methods.
	calls struct {
		// GetPool holds details about calls to the GetPool method.
		GetPool []struct {
			// Ctx is the ctx argument value.
			Ctx github_com_cosmos_cosmos_sdk_types.Context
			// Name is the name argument value.
			Name string
		}
	}
	lockGetPool sync.RWMutex
}

// GetPool calls GetPoolFunc.
func (mock *RewarderMock) GetPool(ctx github_com_cosmos_cosmos_sdk_types.Context, name string) reward.RewardPool {
	if mock.GetPoolFunc == nil {
		panic("RewarderMock.GetPoolFunc: method is nil but Rewarder.GetPool was just called")
	}
	callInfo := struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetPool.Lock()
	mock.calls.GetPool = append(mock.calls.GetPool, callInfo)
	mock.lockGetPool.Unlock()
	return mock.GetPoolFunc(ctx, name)
}

// GetPoolCalls gets all the calls that were made to GetPool.
// Check the length with:
//     len(mockedRewarder.GetPoolCalls())
func (mock *RewarderMock) GetPoolCalls() []struct {
	Ctx  github_com_cosmos_cosmos_sdk_types.Context
	Name string
} {
	var calls []struct {
		Ctx  github_com_cosmos_cosmos_sdk_types.Context
		Name string
	}
	mock.lockGetPool.RLock()
	calls = mock.calls.GetPool
	mock.lockGetPool.RUnlock()
	return calls
}
