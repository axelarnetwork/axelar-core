// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tss/v1beta1/params.proto

package types

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params is the parameter set for this module
type Params struct {
	// KeyRequirements defines the requirement for each key role
	KeyRequirements []exported.KeyRequirement `protobuf:"bytes,1,rep,name=key_requirements,json=keyRequirements,proto3" json:"key_requirements"`
	// SuspendDurationInBlocks defines the number of blocks a
	// validator is disallowed to participate in any TSS ceremony after
	// committing a malicious behaviour during signing
	SuspendDurationInBlocks int64 `protobuf:"varint,2,opt,name=suspend_duration_in_blocks,json=suspendDurationInBlocks,proto3" json:"suspend_duration_in_blocks,omitempty"`
	// HeartBeatPeriodInBlocks defines the time period in blocks for tss to
	// emit the event asking validators to send their heartbeats
	HeartbeatPeriodInBlocks          int64           `protobuf:"varint,3,opt,name=heartbeat_period_in_blocks,json=heartbeatPeriodInBlocks,proto3" json:"heartbeat_period_in_blocks,omitempty"`
	MaxMissedBlocksPerWindow         utils.Threshold `protobuf:"bytes,4,opt,name=max_missed_blocks_per_window,json=maxMissedBlocksPerWindow,proto3" json:"max_missed_blocks_per_window"`
	UnbondingLockingKeyRotationCount int64           `protobuf:"varint,5,opt,name=unbonding_locking_key_rotation_count,json=unbondingLockingKeyRotationCount,proto3" json:"unbonding_locking_key_rotation_count,omitempty"`
	ExternalMultisigThreshold        utils.Threshold `protobuf:"bytes,6,opt,name=external_multisig_threshold,json=externalMultisigThreshold,proto3" json:"external_multisig_threshold"`
	MaxSignQueueSize                 int64           `protobuf:"varint,7,opt,name=max_sign_queue_size,json=maxSignQueueSize,proto3" json:"max_sign_queue_size,omitempty"`
	MaxSimultaneousSignShares        int64           `protobuf:"varint,8,opt,name=max_simultaneous_sign_shares,json=maxSimultaneousSignShares,proto3" json:"max_simultaneous_sign_shares,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c9a42e8b26dfec, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "tss.v1beta1.Params")
}

func init() { proto.RegisterFile("tss/v1beta1/params.proto", fileDescriptor_67c9a42e8b26dfec) }

var fileDescriptor_67c9a42e8b26dfec = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x1c, 0xc5, 0x1b, 0x56, 0x0a, 0x4a, 0x0f, 0x4c, 0x01, 0x89, 0xac, 0x40, 0xa8, 0xd0, 0x0e, 0xbd,
	0x2c, 0x61, 0xe3, 0xc8, 0x01, 0xa9, 0x70, 0x41, 0xb0, 0xa9, 0xb4, 0x20, 0x24, 0x0e, 0xb3, 0x9c,
	0xe6, 0xaf, 0xc4, 0x6a, 0x62, 0x67, 0xfe, 0xdb, 0x34, 0xdd, 0xa7, 0xe0, 0x63, 0xf5, 0xb8, 0x23,
	0x5c, 0x10, 0xb4, 0x5f, 0x04, 0xd9, 0x49, 0x53, 0xb8, 0x71, 0x4a, 0xe2, 0xff, 0xef, 0x3d, 0x3f,
	0xbf, 0xd8, 0xf5, 0x15, 0x62, 0xf4, 0xf5, 0x34, 0x06, 0x45, 0x4f, 0xa3, 0x92, 0x4a, 0x5a, 0x60,
	0x58, 0x4a, 0xa1, 0x84, 0xd7, 0x57, 0x88, 0x61, 0x33, 0x19, 0x3c, 0x48, 0x45, 0x2a, 0xec, 0x7a,
	0x64, 0xde, 0x6a, 0x64, 0xf0, 0x44, 0x2b, 0x96, 0xef, 0xe5, 0x2a, 0x93, 0x80, 0x99, 0xc8, 0x93,
	0x66, 0x3c, 0x34, 0xde, 0x50, 0x95, 0x42, 0x2a, 0x48, 0xf6, 0xd4, 0xaa, 0x84, 0x66, 0x8f, 0x67,
	0x3f, 0xba, 0x6e, 0x6f, 0x62, 0x37, 0xf5, 0x3e, 0xb9, 0x87, 0x0b, 0x58, 0x11, 0x09, 0x57, 0x9a,
	0x49, 0x28, 0x80, 0x2b, 0xf4, 0x9d, 0xe1, 0xc1, 0xa8, 0x7f, 0x76, 0x1c, 0x9a, 0x24, 0x3b, 0x9f,
	0x5d, 0xa4, 0xf0, 0x1d, 0xac, 0xa6, 0x7b, 0x78, 0xdc, 0x5d, 0xff, 0x7c, 0xda, 0x99, 0xde, 0x5b,
	0xfc, 0xb3, 0x8a, 0xde, 0x4b, 0x77, 0x80, 0x1a, 0x4b, 0xe0, 0x09, 0x49, 0xb4, 0xa4, 0x8a, 0x09,
	0x4e, 0x18, 0x27, 0x71, 0x2e, 0xe6, 0x0b, 0xf4, 0x6f, 0x0d, 0x9d, 0xd1, 0xc1, 0xf4, 0x61, 0x43,
	0xbc, 0x69, 0x80, 0xb7, 0x7c, 0x6c, 0xc7, 0x46, 0x9c, 0x01, 0x95, 0x2a, 0x06, 0xaa, 0x48, 0x09,
	0x92, 0x89, 0xe4, 0x2f, 0xf1, 0x41, 0x2d, 0x6e, 0x89, 0x89, 0x05, 0x5a, 0xf1, 0xa5, 0xfb, 0xb8,
	0xa0, 0x15, 0x29, 0x18, 0x22, 0x24, 0x8d, 0xc6, 0x98, 0x90, 0x25, 0xe3, 0x89, 0x58, 0xfa, 0xdd,
	0xa1, 0x33, 0xea, 0x9f, 0xf9, 0xa1, 0xed, 0xb0, 0x3d, 0xd5, 0xc7, 0x5d, 0x87, 0xcd, 0x81, 0xfc,
	0x82, 0x56, 0xe7, 0xd6, 0xa2, 0xb6, 0x9d, 0x80, 0xfc, 0x6c, 0xf5, 0xde, 0x85, 0x7b, 0xac, 0x79,
	0x2c, 0x78, 0xc2, 0x78, 0x4a, 0xcc, 0xcc, 0x3c, 0x6d, 0x85, 0x42, 0xd5, 0xe7, 0x9c, 0x0b, 0xcd,
	0x95, 0x7f, 0xdb, 0xc6, 0x1c, 0xb6, 0xec, 0xfb, 0x1a, 0x35, 0xf5, 0x35, 0xe0, 0x6b, 0xc3, 0x79,
	0x97, 0xee, 0x23, 0xa8, 0x14, 0x48, 0x4e, 0x73, 0x52, 0xe8, 0x5c, 0x31, 0x64, 0x29, 0x69, 0x7f,
	0xa9, 0xdf, 0xfb, 0xaf, 0xb8, 0x47, 0x3b, 0x8b, 0xf3, 0xc6, 0xa1, 0x05, 0xbc, 0x13, 0xf7, 0xbe,
	0xe9, 0x03, 0x59, 0xca, 0xc9, 0x95, 0x06, 0x0d, 0x04, 0xd9, 0x35, 0xf8, 0x77, 0x6c, 0xbc, 0xc3,
	0x82, 0x56, 0x33, 0x96, 0xf2, 0x0f, 0x66, 0x30, 0x63, 0xd7, 0xe0, 0xbd, 0xaa, 0xeb, 0x43, 0x66,
	0xb2, 0x50, 0x0e, 0x42, 0x63, 0xad, 0xc5, 0x8c, 0x4a, 0x40, 0xff, 0xae, 0xd5, 0x1d, 0x59, 0xdd,
	0x1e, 0x31, 0x1e, 0x33, 0x0b, 0x8c, 0x2f, 0xd6, 0xbf, 0x83, 0xce, 0x7a, 0x13, 0x38, 0x37, 0x9b,
	0xc0, 0xf9, 0xb5, 0x09, 0x9c, 0x6f, 0xdb, 0xa0, 0x73, 0xb3, 0x0d, 0x3a, 0xdf, 0xb7, 0x41, 0xe7,
	0xcb, 0xf3, 0x94, 0xa9, 0x4c, 0xc7, 0xe1, 0x5c, 0x14, 0x11, 0xad, 0x20, 0xa7, 0x92, 0x83, 0x5a,
	0x0a, 0xb9, 0x68, 0xbe, 0x4e, 0xe6, 0x42, 0x42, 0x54, 0x45, 0xe6, 0x0a, 0xdb, 0x1b, 0x1b, 0xf7,
	0xec, 0x95, 0x7d, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x68, 0xb1, 0xfc, 0x32, 0x03, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSimultaneousSignShares != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSimultaneousSignShares))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxSignQueueSize != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSignQueueSize))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.ExternalMultisigThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.UnbondingLockingKeyRotationCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnbondingLockingKeyRotationCount))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.MaxMissedBlocksPerWindow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.HeartbeatPeriodInBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.HeartbeatPeriodInBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.SuspendDurationInBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SuspendDurationInBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KeyRequirements) > 0 {
		for iNdEx := len(m.KeyRequirements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyRequirements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyRequirements) > 0 {
		for _, e := range m.KeyRequirements {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.SuspendDurationInBlocks != 0 {
		n += 1 + sovParams(uint64(m.SuspendDurationInBlocks))
	}
	if m.HeartbeatPeriodInBlocks != 0 {
		n += 1 + sovParams(uint64(m.HeartbeatPeriodInBlocks))
	}
	l = m.MaxMissedBlocksPerWindow.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.UnbondingLockingKeyRotationCount != 0 {
		n += 1 + sovParams(uint64(m.UnbondingLockingKeyRotationCount))
	}
	l = m.ExternalMultisigThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxSignQueueSize != 0 {
		n += 1 + sovParams(uint64(m.MaxSignQueueSize))
	}
	if m.MaxSimultaneousSignShares != 0 {
		n += 1 + sovParams(uint64(m.MaxSimultaneousSignShares))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRequirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRequirements = append(m.KeyRequirements, exported.KeyRequirement{})
			if err := m.KeyRequirements[len(m.KeyRequirements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspendDurationInBlocks", wireType)
			}
			m.SuspendDurationInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuspendDurationInBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatPeriodInBlocks", wireType)
			}
			m.HeartbeatPeriodInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatPeriodInBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMissedBlocksPerWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxMissedBlocksPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingLockingKeyRotationCount", wireType)
			}
			m.UnbondingLockingKeyRotationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingLockingKeyRotationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalMultisigThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalMultisigThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSignQueueSize", wireType)
			}
			m.MaxSignQueueSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSignQueueSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSimultaneousSignShares", wireType)
			}
			m.MaxSimultaneousSignShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSimultaneousSignShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
