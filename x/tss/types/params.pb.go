// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tss/v1beta1/params.proto

package types

import (
	fmt "fmt"
	utils "github.com/axelarnetwork/axelar-core/utils"
	exported "github.com/axelarnetwork/axelar-core/x/tss/exported"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params is the parameter set for this module
type Params struct {
	LockingPeriod int64 `protobuf:"varint,1,opt,name=locking_period,json=lockingPeriod,proto3" json:"locking_period,omitempty"` // Deprecated: Do not use.
	// MinKeygenThreshold defines the minimum % of stake that must be online
	// to authorize generation of a new key in the system.
	MinKeygenThreshold utils.Threshold `protobuf:"bytes,2,opt,name=min_keygen_threshold,json=minKeygenThreshold,proto3" json:"min_keygen_threshold"`
	// CorruptionThreshold defines the corruption threshold with which
	// we'll run keygen protocol.
	CorruptionThreshold utils.Threshold `protobuf:"bytes,3,opt,name=corruption_threshold,json=corruptionThreshold,proto3" json:"corruption_threshold"`
	// KeyRequirements defines the requirement of each key for each chain
	KeyRequirements []exported.KeyRequirement `protobuf:"bytes,4,rep,name=key_requirements,json=keyRequirements,proto3" json:"key_requirements"`
	// MinBondFractionPerShare defines the % of stake validators have to bond per
	// key share
	MinBondFractionPerShare utils.Threshold `protobuf:"bytes,5,opt,name=min_bond_fraction_per_share,json=minBondFractionPerShare,proto3" json:"min_bond_fraction_per_share"`
	// SuspendPeriodBlockNumberSignMalicious defines the number of blocks a
	// validator is disallowed to participate in any TSS ceremony after committing
	// a malicious behaviour during signing
	SuspendPeriodBlockNumberSignMalicious int64 `protobuf:"varint,6,opt,name=suspend_period_block_number_sign_malicious,json=suspendPeriodBlockNumberSignMalicious,proto3" json:"suspend_period_block_number_sign_malicious,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c9a42e8b26dfec, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "tss.v1beta1.Params")
}

func init() { proto.RegisterFile("tss/v1beta1/params.proto", fileDescriptor_67c9a42e8b26dfec) }

var fileDescriptor_67c9a42e8b26dfec = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x9b, 0x92, 0x83, 0x23, 0x7e, 0x64, 0x22, 0x61, 0x15, 0x61, 0x22, 0x04, 0x52, 0x40,
	0xc2, 0xa6, 0xe5, 0x0d, 0x7c, 0xe0, 0x52, 0x51, 0x85, 0x14, 0x0e, 0x20, 0xa4, 0x95, 0x7f, 0x06,
	0x67, 0x65, 0x7b, 0xc7, 0xcc, 0xae, 0x21, 0x79, 0x0b, 0x1e, 0x2b, 0xc7, 0x1e, 0x39, 0x21, 0x48,
	0x2e, 0x3c, 0x06, 0xda, 0xed, 0x26, 0xa6, 0xb7, 0xdc, 0xec, 0xf9, 0x7e, 0xe6, 0xdb, 0x99, 0xf1,
	0x02, 0x25, 0x65, 0xfc, 0xed, 0x34, 0x03, 0x95, 0x9e, 0xc6, 0x6d, 0x4a, 0x69, 0x23, 0xa3, 0x96,
	0x50, 0xa1, 0x3f, 0x52, 0x52, 0x46, 0x16, 0x39, 0x19, 0x97, 0x58, 0xa2, 0xa9, 0xc7, 0xfa, 0xeb,
	0x9a, 0x72, 0xf2, 0xa8, 0x53, 0xbc, 0xee, 0xe5, 0x6a, 0x41, 0x20, 0x17, 0x58, 0x17, 0x16, 0x9e,
	0x68, 0x6f, 0x58, 0xb6, 0x48, 0x0a, 0x8a, 0x9e, 0xb5, 0x6a, 0xc1, 0xf6, 0x78, 0xf2, 0x77, 0xe0,
	0x0d, 0x67, 0xa6, 0xa9, 0xff, 0xdc, 0xbb, 0x53, 0x63, 0x5e, 0x71, 0x51, 0xb2, 0x16, 0x88, 0x63,
	0x11, 0xb8, 0x13, 0x77, 0x3a, 0x48, 0x8e, 0x02, 0x77, 0x7e, 0xdb, 0x22, 0x33, 0x03, 0xf8, 0x33,
	0x6f, 0xdc, 0x70, 0xc1, 0x2a, 0x58, 0x95, 0x20, 0xd8, 0xbe, 0x6b, 0x70, 0x34, 0x71, 0xa7, 0xa3,
	0xb3, 0x20, 0x32, 0xa9, 0x76, 0xd1, 0xa3, 0xf7, 0x3b, 0x3c, 0x39, 0x5e, 0xff, 0x7a, 0xec, 0xcc,
	0xfd, 0x86, 0x8b, 0x73, 0x23, 0xdd, 0x23, 0xfe, 0x3b, 0x6f, 0x9c, 0x23, 0x51, 0xd7, 0x2a, 0x8e,
	0xff, 0x3b, 0x0e, 0x0e, 0x72, 0xbc, 0xdf, 0x6b, 0x7b, 0xcb, 0x0f, 0xde, 0xbd, 0x0a, 0x56, 0x8c,
	0xe0, 0x6b, 0xc7, 0x09, 0x1a, 0x10, 0x4a, 0x06, 0xc7, 0x93, 0xc1, 0x74, 0x74, 0xf6, 0x34, 0xd2,
	0x93, 0xdd, 0xcd, 0x65, 0xef, 0x7a, 0x0e, 0xab, 0x79, 0x4f, 0xb6, 0xd6, 0x77, 0xab, 0x1b, 0x55,
	0xe9, 0x7f, 0xf6, 0x1e, 0xea, 0xb7, 0x67, 0x28, 0x0a, 0xf6, 0x85, 0xd2, 0xdc, 0x04, 0x6e, 0x81,
	0x98, 0x5c, 0xa4, 0x04, 0xc1, 0xad, 0x83, 0x02, 0x3f, 0x68, 0xb8, 0x48, 0x50, 0x14, 0x6f, 0xac,
	0xc1, 0x0c, 0xe8, 0x52, 0xcb, 0xfd, 0x8f, 0xde, 0x0b, 0xd9, 0xc9, 0x16, 0x44, 0x61, 0x97, 0xc0,
	0x32, 0x3d, 0x7a, 0x26, 0xba, 0x26, 0xd3, 0x3d, 0x78, 0x29, 0x58, 0x93, 0xd6, 0x3c, 0xe7, 0xd8,
	0xc9, 0x60, 0xa8, 0x17, 0x34, 0x7f, 0x66, 0x15, 0xd7, 0xcb, 0x49, 0x34, 0xff, 0xc2, 0xd0, 0x2f,
	0x79, 0x29, 0xde, 0xee, 0xc8, 0xc9, 0xc5, 0xfa, 0x4f, 0xe8, 0xac, 0x37, 0xa1, 0x7b, 0xb5, 0x09,
	0xdd, 0xdf, 0x9b, 0xd0, 0xfd, 0xb1, 0x0d, 0x9d, 0xab, 0x6d, 0xe8, 0xfc, 0xdc, 0x86, 0xce, 0xa7,
	0x57, 0x25, 0x57, 0x8b, 0x2e, 0x8b, 0x72, 0x6c, 0xe2, 0x74, 0x09, 0x75, 0x4a, 0x02, 0xd4, 0x77,
	0xa4, 0xca, 0xfe, 0xbd, 0xcc, 0x91, 0x20, 0x5e, 0xc6, 0xfa, 0xa2, 0xcc, 0x01, 0x65, 0x43, 0x73,
	0x41, 0xaf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xe9, 0x45, 0x15, 0xc1, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuspendPeriodBlockNumberSignMalicious != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SuspendPeriodBlockNumberSignMalicious))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.MinBondFractionPerShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.KeyRequirements) > 0 {
		for iNdEx := len(m.KeyRequirements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyRequirements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.CorruptionThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MinKeygenThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.LockingPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LockingPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockingPeriod != 0 {
		n += 1 + sovParams(uint64(m.LockingPeriod))
	}
	l = m.MinKeygenThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CorruptionThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.KeyRequirements) > 0 {
		for _, e := range m.KeyRequirements {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.MinBondFractionPerShare.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.SuspendPeriodBlockNumberSignMalicious != 0 {
		n += 1 + sovParams(uint64(m.SuspendPeriodBlockNumberSignMalicious))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockingPeriod", wireType)
			}
			m.LockingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinKeygenThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinKeygenThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorruptionThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CorruptionThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRequirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRequirements = append(m.KeyRequirements, exported.KeyRequirement{})
			if err := m.KeyRequirements[len(m.KeyRequirements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBondFractionPerShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBondFractionPerShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspendPeriodBlockNumberSignMalicious", wireType)
			}
			m.SuspendPeriodBlockNumberSignMalicious = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuspendPeriodBlockNumberSignMalicious |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
