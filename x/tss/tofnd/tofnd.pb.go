// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tss/tofnd/v1beta1/tofnd.proto

package tofnd

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageIn struct {
	// Types that are valid to be assigned to Data:
	//	*MessageIn_KeygenInit
	//	*MessageIn_SignInit
	//	*MessageIn_Traffic
	Data isMessageIn_Data `protobuf_oneof:"data"`
}

func (m *MessageIn) Reset()         { *m = MessageIn{} }
func (m *MessageIn) String() string { return proto.CompactTextString(m) }
func (*MessageIn) ProtoMessage()    {}
func (*MessageIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{0}
}
func (m *MessageIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageIn.Merge(m, src)
}
func (m *MessageIn) XXX_Size() int {
	return m.Size()
}
func (m *MessageIn) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageIn.DiscardUnknown(m)
}

var xxx_messageInfo_MessageIn proto.InternalMessageInfo

type isMessageIn_Data interface {
	isMessageIn_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MessageIn_KeygenInit struct {
	KeygenInit *KeygenInit `protobuf:"bytes,1,opt,name=keygen_init,json=keygenInit,proto3,oneof" json:"keygen_init,omitempty"`
}
type MessageIn_SignInit struct {
	SignInit *SignInit `protobuf:"bytes,2,opt,name=sign_init,json=signInit,proto3,oneof" json:"sign_init,omitempty"`
}
type MessageIn_Traffic struct {
	Traffic *TrafficIn `protobuf:"bytes,3,opt,name=traffic,proto3,oneof" json:"traffic,omitempty"`
}

func (*MessageIn_KeygenInit) isMessageIn_Data() {}
func (*MessageIn_SignInit) isMessageIn_Data()   {}
func (*MessageIn_Traffic) isMessageIn_Data()    {}

func (m *MessageIn) GetData() isMessageIn_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MessageIn) GetKeygenInit() *KeygenInit {
	if x, ok := m.GetData().(*MessageIn_KeygenInit); ok {
		return x.KeygenInit
	}
	return nil
}

func (m *MessageIn) GetSignInit() *SignInit {
	if x, ok := m.GetData().(*MessageIn_SignInit); ok {
		return x.SignInit
	}
	return nil
}

func (m *MessageIn) GetTraffic() *TrafficIn {
	if x, ok := m.GetData().(*MessageIn_Traffic); ok {
		return x.Traffic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MessageIn) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MessageIn_KeygenInit)(nil),
		(*MessageIn_SignInit)(nil),
		(*MessageIn_Traffic)(nil),
	}
}

type MessageOut struct {
	// Types that are valid to be assigned to Data:
	//	*MessageOut_Traffic
	//	*MessageOut_KeygenResult
	//	*MessageOut_SignResult
	Data isMessageOut_Data `protobuf_oneof:"data"`
}

func (m *MessageOut) Reset()         { *m = MessageOut{} }
func (m *MessageOut) String() string { return proto.CompactTextString(m) }
func (*MessageOut) ProtoMessage()    {}
func (*MessageOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{1}
}
func (m *MessageOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageOut.Merge(m, src)
}
func (m *MessageOut) XXX_Size() int {
	return m.Size()
}
func (m *MessageOut) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageOut.DiscardUnknown(m)
}

var xxx_messageInfo_MessageOut proto.InternalMessageInfo

type isMessageOut_Data interface {
	isMessageOut_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MessageOut_Traffic struct {
	Traffic *TrafficOut `protobuf:"bytes,1,opt,name=traffic,proto3,oneof" json:"traffic,omitempty"`
}
type MessageOut_KeygenResult struct {
	KeygenResult []byte `protobuf:"bytes,2,opt,name=keygen_result,json=keygenResult,proto3,oneof" json:"keygen_result,omitempty"`
}
type MessageOut_SignResult struct {
	SignResult []byte `protobuf:"bytes,3,opt,name=sign_result,json=signResult,proto3,oneof" json:"sign_result,omitempty"`
}

func (*MessageOut_Traffic) isMessageOut_Data()      {}
func (*MessageOut_KeygenResult) isMessageOut_Data() {}
func (*MessageOut_SignResult) isMessageOut_Data()   {}

func (m *MessageOut) GetData() isMessageOut_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MessageOut) GetTraffic() *TrafficOut {
	if x, ok := m.GetData().(*MessageOut_Traffic); ok {
		return x.Traffic
	}
	return nil
}

func (m *MessageOut) GetKeygenResult() []byte {
	if x, ok := m.GetData().(*MessageOut_KeygenResult); ok {
		return x.KeygenResult
	}
	return nil
}

func (m *MessageOut) GetSignResult() []byte {
	if x, ok := m.GetData().(*MessageOut_SignResult); ok {
		return x.SignResult
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MessageOut) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MessageOut_Traffic)(nil),
		(*MessageOut_KeygenResult)(nil),
		(*MessageOut_SignResult)(nil),
	}
}

type TrafficIn struct {
	FromPartyUid string `protobuf:"bytes,1,opt,name=from_party_uid,json=fromPartyUid,proto3" json:"from_party_uid,omitempty"`
	Payload      []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	IsBroadcast  bool   `protobuf:"varint,3,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
}

func (m *TrafficIn) Reset()         { *m = TrafficIn{} }
func (m *TrafficIn) String() string { return proto.CompactTextString(m) }
func (*TrafficIn) ProtoMessage()    {}
func (*TrafficIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{2}
}
func (m *TrafficIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficIn.Merge(m, src)
}
func (m *TrafficIn) XXX_Size() int {
	return m.Size()
}
func (m *TrafficIn) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficIn.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficIn proto.InternalMessageInfo

func (m *TrafficIn) GetFromPartyUid() string {
	if m != nil {
		return m.FromPartyUid
	}
	return ""
}

func (m *TrafficIn) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TrafficIn) GetIsBroadcast() bool {
	if m != nil {
		return m.IsBroadcast
	}
	return false
}

type TrafficOut struct {
	ToPartyUid  string `protobuf:"bytes,1,opt,name=to_party_uid,json=toPartyUid,proto3" json:"to_party_uid,omitempty"`
	Payload     []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	IsBroadcast bool   `protobuf:"varint,3,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
}

func (m *TrafficOut) Reset()         { *m = TrafficOut{} }
func (m *TrafficOut) String() string { return proto.CompactTextString(m) }
func (*TrafficOut) ProtoMessage()    {}
func (*TrafficOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{3}
}
func (m *TrafficOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficOut.Merge(m, src)
}
func (m *TrafficOut) XXX_Size() int {
	return m.Size()
}
func (m *TrafficOut) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficOut.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficOut proto.InternalMessageInfo

func (m *TrafficOut) GetToPartyUid() string {
	if m != nil {
		return m.ToPartyUid
	}
	return ""
}

func (m *TrafficOut) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TrafficOut) GetIsBroadcast() bool {
	if m != nil {
		return m.IsBroadcast
	}
	return false
}

type KeygenInit struct {
	NewKeyUid    string   `protobuf:"bytes,1,opt,name=new_key_uid,json=newKeyUid,proto3" json:"new_key_uid,omitempty"`
	PartyUids    []string `protobuf:"bytes,2,rep,name=party_uids,json=partyUids,proto3" json:"party_uids,omitempty"`
	MyPartyIndex int32    `protobuf:"varint,3,opt,name=my_party_index,json=myPartyIndex,proto3" json:"my_party_index,omitempty"`
	Threshold    int32    `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (m *KeygenInit) Reset()         { *m = KeygenInit{} }
func (m *KeygenInit) String() string { return proto.CompactTextString(m) }
func (*KeygenInit) ProtoMessage()    {}
func (*KeygenInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{4}
}
func (m *KeygenInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenInit.Merge(m, src)
}
func (m *KeygenInit) XXX_Size() int {
	return m.Size()
}
func (m *KeygenInit) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenInit.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenInit proto.InternalMessageInfo

func (m *KeygenInit) GetNewKeyUid() string {
	if m != nil {
		return m.NewKeyUid
	}
	return ""
}

func (m *KeygenInit) GetPartyUids() []string {
	if m != nil {
		return m.PartyUids
	}
	return nil
}

func (m *KeygenInit) GetMyPartyIndex() int32 {
	if m != nil {
		return m.MyPartyIndex
	}
	return 0
}

func (m *KeygenInit) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

type SignInit struct {
	NewSigUid     string   `protobuf:"bytes,1,opt,name=new_sig_uid,json=newSigUid,proto3" json:"new_sig_uid,omitempty"`
	KeyUid        string   `protobuf:"bytes,2,opt,name=key_uid,json=keyUid,proto3" json:"key_uid,omitempty"`
	PartyUids     []string `protobuf:"bytes,3,rep,name=party_uids,json=partyUids,proto3" json:"party_uids,omitempty"`
	MessageToSign []byte   `protobuf:"bytes,4,opt,name=message_to_sign,json=messageToSign,proto3" json:"message_to_sign,omitempty"`
}

func (m *SignInit) Reset()         { *m = SignInit{} }
func (m *SignInit) String() string { return proto.CompactTextString(m) }
func (*SignInit) ProtoMessage()    {}
func (*SignInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{5}
}
func (m *SignInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInit.Merge(m, src)
}
func (m *SignInit) XXX_Size() int {
	return m.Size()
}
func (m *SignInit) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInit.DiscardUnknown(m)
}

var xxx_messageInfo_SignInit proto.InternalMessageInfo

func (m *SignInit) GetNewSigUid() string {
	if m != nil {
		return m.NewSigUid
	}
	return ""
}

func (m *SignInit) GetKeyUid() string {
	if m != nil {
		return m.KeyUid
	}
	return ""
}

func (m *SignInit) GetPartyUids() []string {
	if m != nil {
		return m.PartyUids
	}
	return nil
}

func (m *SignInit) GetMessageToSign() []byte {
	if m != nil {
		return m.MessageToSign
	}
	return nil
}

type Uid struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *Uid) Reset()         { *m = Uid{} }
func (m *Uid) String() string { return proto.CompactTextString(m) }
func (*Uid) ProtoMessage()    {}
func (*Uid) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{6}
}
func (m *Uid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Uid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uid.Merge(m, src)
}
func (m *Uid) XXX_Size() int {
	return m.Size()
}
func (m *Uid) XXX_DiscardUnknown() {
	xxx_messageInfo_Uid.DiscardUnknown(m)
}

var xxx_messageInfo_Uid proto.InternalMessageInfo

func (m *Uid) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type Bytes struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Bytes) Reset()         { *m = Bytes{} }
func (m *Bytes) String() string { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()    {}
func (*Bytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_762181cc22940332, []int{7}
}
func (m *Bytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bytes.Merge(m, src)
}
func (m *Bytes) XXX_Size() int {
	return m.Size()
}
func (m *Bytes) XXX_DiscardUnknown() {
	xxx_messageInfo_Bytes.DiscardUnknown(m)
}

var xxx_messageInfo_Bytes proto.InternalMessageInfo

func (m *Bytes) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageIn)(nil), "tss.tofnd.v1beta1.MessageIn")
	proto.RegisterType((*MessageOut)(nil), "tss.tofnd.v1beta1.MessageOut")
	proto.RegisterType((*TrafficIn)(nil), "tss.tofnd.v1beta1.TrafficIn")
	proto.RegisterType((*TrafficOut)(nil), "tss.tofnd.v1beta1.TrafficOut")
	proto.RegisterType((*KeygenInit)(nil), "tss.tofnd.v1beta1.KeygenInit")
	proto.RegisterType((*SignInit)(nil), "tss.tofnd.v1beta1.SignInit")
	proto.RegisterType((*Uid)(nil), "tss.tofnd.v1beta1.Uid")
	proto.RegisterType((*Bytes)(nil), "tss.tofnd.v1beta1.Bytes")
}

func init() { proto.RegisterFile("tss/tofnd/v1beta1/tofnd.proto", fileDescriptor_762181cc22940332) }

var fileDescriptor_762181cc22940332 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x6f, 0xd3, 0x3e,
	0x14, 0xc7, 0x93, 0x65, 0x5b, 0x9b, 0xd7, 0xec, 0xf7, 0x03, 0x5f, 0x56, 0x89, 0x35, 0x6a, 0x23,
	0x40, 0x5c, 0x68, 0x19, 0x5c, 0x80, 0x13, 0xea, 0xa9, 0x65, 0x42, 0x43, 0xd9, 0xb8, 0x70, 0x89,
	0xdc, 0xc6, 0x4d, 0xad, 0xb4, 0x76, 0x15, 0xbb, 0xb4, 0xf9, 0x17, 0xb8, 0xc0, 0x95, 0xff, 0x08,
	0x89, 0xcb, 0x8e, 0x1c, 0x51, 0xfb, 0x8f, 0x20, 0x3b, 0x4e, 0x5b, 0xb6, 0x72, 0xe3, 0xe6, 0xf7,
	0xf5, 0x7b, 0xef, 0xfb, 0x79, 0x4f, 0x96, 0xa1, 0x21, 0x85, 0xe8, 0x48, 0x3e, 0x62, 0x71, 0xe7,
	0xd3, 0xf9, 0x80, 0x48, 0x7c, 0x5e, 0x44, 0xed, 0x59, 0xc6, 0x25, 0x47, 0xf7, 0xa5, 0x10, 0xed,
	0x42, 0x30, 0xd7, 0xc1, 0x0f, 0x1b, 0xdc, 0x77, 0x44, 0x08, 0x9c, 0x90, 0x3e, 0x43, 0x6f, 0xa0,
	0x96, 0x92, 0x3c, 0x21, 0x2c, 0xa2, 0x8c, 0xca, 0xba, 0xdd, 0xb4, 0x9f, 0xd4, 0x9e, 0x37, 0xda,
	0x77, 0xca, 0xda, 0x17, 0x3a, 0xab, 0xcf, 0xa8, 0xec, 0x59, 0x21, 0xa4, 0x9b, 0x08, 0xbd, 0x06,
	0x57, 0xd0, 0xc4, 0xd4, 0x1f, 0xe8, 0xfa, 0x07, 0x7b, 0xea, 0xaf, 0x68, 0x52, 0x56, 0x57, 0x85,
	0x39, 0xa3, 0x97, 0x50, 0x91, 0x19, 0x1e, 0x8d, 0xe8, 0xb0, 0xee, 0xe8, 0xca, 0xb3, 0x3d, 0x95,
	0xd7, 0x45, 0x46, 0x9f, 0xf5, 0xac, 0xb0, 0x4c, 0xef, 0x1e, 0xc3, 0x61, 0x8c, 0x25, 0x0e, 0xbe,
	0xd9, 0x00, 0x66, 0x9a, 0xcb, 0xb9, 0x44, 0xaf, 0xb6, 0x0d, 0xff, 0x3e, 0x8a, 0x69, 0x78, 0x39,
	0x97, 0x3b, 0x1d, 0xd1, 0x23, 0x38, 0x31, 0x9b, 0xc8, 0x88, 0x98, 0x4f, 0x8a, 0x59, 0xbc, 0x9e,
	0x15, 0x7a, 0x85, 0x1c, 0x6a, 0x15, 0xb5, 0xa0, 0xa6, 0xc7, 0x35, 0x49, 0x8e, 0x49, 0x02, 0x25,
	0x16, 0x29, 0x1b, 0x36, 0x06, 0xee, 0x86, 0x1d, 0x3d, 0x84, 0xff, 0x46, 0x19, 0x9f, 0x46, 0x33,
	0x9c, 0xc9, 0x3c, 0x9a, 0xd3, 0x58, 0x03, 0xba, 0xa1, 0xa7, 0xd4, 0xf7, 0x4a, 0xfc, 0x40, 0x63,
	0x54, 0x87, 0xca, 0x0c, 0xe7, 0x13, 0x8e, 0xe3, 0xc2, 0x3e, 0x2c, 0x43, 0xd4, 0x02, 0x8f, 0x8a,
	0x68, 0x90, 0x71, 0x1c, 0x0f, 0xb1, 0x28, 0x8c, 0xab, 0x61, 0x8d, 0x8a, 0x6e, 0x29, 0x05, 0x29,
	0xc0, 0x76, 0x34, 0xd4, 0x04, 0x4f, 0xf2, 0x3b, 0x76, 0x20, 0xf9, 0xbf, 0x31, 0xfb, 0x62, 0x03,
	0x6c, 0xdf, 0x04, 0xf2, 0xa1, 0xc6, 0xc8, 0x22, 0x4a, 0xc9, 0xae, 0x99, 0xcb, 0xc8, 0xe2, 0x82,
	0x68, 0xaf, 0x06, 0xc0, 0x06, 0x45, 0xd4, 0x0f, 0x9a, 0x8e, 0xba, 0x9e, 0x19, 0x12, 0xa1, 0xb6,
	0x33, 0xcd, 0x0d, 0x2c, 0x65, 0x31, 0x59, 0x6a, 0xcb, 0xa3, 0xd0, 0x9b, 0xe6, 0x1a, 0xb7, 0xaf,
	0x34, 0x74, 0x06, 0xae, 0x1c, 0x67, 0x44, 0x8c, 0xf9, 0x24, 0xae, 0x1f, 0xea, 0x84, 0xad, 0x10,
	0x7c, 0xb6, 0xa1, 0x5a, 0xbe, 0xb2, 0x92, 0x47, 0xd0, 0xe4, 0x16, 0xcf, 0x15, 0x4d, 0x14, 0xcf,
	0x29, 0x54, 0x4a, 0xd6, 0x03, 0x7d, 0x77, 0x9c, 0xee, 0x03, 0x75, 0x6e, 0x83, 0x3e, 0x86, 0xff,
	0xa7, 0xc5, 0x73, 0x8b, 0x24, 0x57, 0xed, 0x99, 0x06, 0xf1, 0xc2, 0x13, 0x23, 0x5f, 0x73, 0xc5,
	0x10, 0x9c, 0x82, 0xa3, 0xba, 0xdd, 0x03, 0x67, 0x6b, 0xaf, 0x8e, 0x41, 0x0b, 0x8e, 0xba, 0xb9,
	0x24, 0x62, 0x77, 0xfb, 0xf6, 0x1f, 0xdb, 0xef, 0xbe, 0xfd, 0xbe, 0xf2, 0xed, 0x9b, 0x95, 0x6f,
	0xff, 0x5a, 0xf9, 0xf6, 0xd7, 0xb5, 0x6f, 0xdd, 0xac, 0x7d, 0xeb, 0xe7, 0xda, 0xb7, 0x3e, 0x3e,
	0x4b, 0xa8, 0x1c, 0xcf, 0x07, 0xed, 0x21, 0x9f, 0x76, 0xf0, 0x92, 0x4c, 0x70, 0xc6, 0x88, 0x5c,
	0xf0, 0x2c, 0x35, 0xd1, 0xd3, 0x21, 0xcf, 0x48, 0x67, 0xd9, 0xd9, 0x7c, 0x0a, 0x83, 0x63, 0xfd,
	0x0f, 0xbc, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x56, 0x23, 0xf1, 0x70, 0x28, 0x04, 0x00, 0x00,
}

func (m *MessageIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageIn_KeygenInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageIn_KeygenInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeygenInit != nil {
		{
			size, err := m.KeygenInit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTofnd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MessageIn_SignInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageIn_SignInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignInit != nil {
		{
			size, err := m.SignInit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTofnd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MessageIn_Traffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageIn_Traffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Traffic != nil {
		{
			size, err := m.Traffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTofnd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MessageOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageOut_Traffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageOut_Traffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Traffic != nil {
		{
			size, err := m.Traffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTofnd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MessageOut_KeygenResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageOut_KeygenResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KeygenResult != nil {
		i -= len(m.KeygenResult)
		copy(dAtA[i:], m.KeygenResult)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.KeygenResult)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MessageOut_SignResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageOut_SignResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignResult != nil {
		i -= len(m.SignResult)
		copy(dAtA[i:], m.SignResult)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.SignResult)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TrafficIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBroadcast {
		i--
		if m.IsBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromPartyUid) > 0 {
		i -= len(m.FromPartyUid)
		copy(dAtA[i:], m.FromPartyUid)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.FromPartyUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrafficOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBroadcast {
		i--
		if m.IsBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToPartyUid) > 0 {
		i -= len(m.ToPartyUid)
		copy(dAtA[i:], m.ToPartyUid)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.ToPartyUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintTofnd(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if m.MyPartyIndex != 0 {
		i = encodeVarintTofnd(dAtA, i, uint64(m.MyPartyIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PartyUids) > 0 {
		for iNdEx := len(m.PartyUids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PartyUids[iNdEx])
			copy(dAtA[i:], m.PartyUids[iNdEx])
			i = encodeVarintTofnd(dAtA, i, uint64(len(m.PartyUids[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NewKeyUid) > 0 {
		i -= len(m.NewKeyUid)
		copy(dAtA[i:], m.NewKeyUid)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.NewKeyUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageToSign) > 0 {
		i -= len(m.MessageToSign)
		copy(dAtA[i:], m.MessageToSign)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.MessageToSign)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PartyUids) > 0 {
		for iNdEx := len(m.PartyUids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PartyUids[iNdEx])
			copy(dAtA[i:], m.PartyUids[iNdEx])
			i = encodeVarintTofnd(dAtA, i, uint64(len(m.PartyUids[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.KeyUid) > 0 {
		i -= len(m.KeyUid)
		copy(dAtA[i:], m.KeyUid)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.KeyUid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewSigUid) > 0 {
		i -= len(m.NewSigUid)
		copy(dAtA[i:], m.NewSigUid)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.NewSigUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Uid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Uid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTofnd(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTofnd(dAtA []byte, offset int, v uint64) int {
	offset -= sovTofnd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *MessageIn_KeygenInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeygenInit != nil {
		l = m.KeygenInit.Size()
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}
func (m *MessageIn_SignInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignInit != nil {
		l = m.SignInit.Size()
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}
func (m *MessageIn_Traffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Traffic != nil {
		l = m.Traffic.Size()
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}
func (m *MessageOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *MessageOut_Traffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Traffic != nil {
		l = m.Traffic.Size()
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}
func (m *MessageOut_KeygenResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeygenResult != nil {
		l = len(m.KeygenResult)
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}
func (m *MessageOut_SignResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignResult != nil {
		l = len(m.SignResult)
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}
func (m *TrafficIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromPartyUid)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	if m.IsBroadcast {
		n += 2
	}
	return n
}

func (m *TrafficOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToPartyUid)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	if m.IsBroadcast {
		n += 2
	}
	return n
}

func (m *KeygenInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewKeyUid)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	if len(m.PartyUids) > 0 {
		for _, s := range m.PartyUids {
			l = len(s)
			n += 1 + l + sovTofnd(uint64(l))
		}
	}
	if m.MyPartyIndex != 0 {
		n += 1 + sovTofnd(uint64(m.MyPartyIndex))
	}
	if m.Threshold != 0 {
		n += 1 + sovTofnd(uint64(m.Threshold))
	}
	return n
}

func (m *SignInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewSigUid)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	l = len(m.KeyUid)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	if len(m.PartyUids) > 0 {
		for _, s := range m.PartyUids {
			l = len(s)
			n += 1 + l + sovTofnd(uint64(l))
		}
	}
	l = len(m.MessageToSign)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}

func (m *Uid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}

func (m *Bytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTofnd(uint64(l))
	}
	return n
}

func sovTofnd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTofnd(x uint64) (n int) {
	return sovTofnd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenInit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeygenInit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &MessageIn_KeygenInit{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignInit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignInit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &MessageIn_SignInit{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrafficIn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &MessageIn_Traffic{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrafficOut{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &MessageOut_Traffic{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &MessageOut_KeygenResult{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &MessageOut_SignResult{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPartyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPartyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBroadcast = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPartyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPartyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBroadcast = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewKeyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewKeyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyUids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyUids = append(m.PartyUids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyPartyIndex", wireType)
			}
			m.MyPartyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyPartyIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSigUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewSigUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyUids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyUids = append(m.PartyUids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageToSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageToSign = append(m.MessageToSign[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageToSign == nil {
				m.MessageToSign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Uid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTofnd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTofnd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTofnd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTofnd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTofnd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTofnd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTofnd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTofnd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTofnd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTofnd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTofnd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTofnd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTofnd = fmt.Errorf("proto: unexpected end of group")
)
