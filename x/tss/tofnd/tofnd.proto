// File copied from golang tofnd with minor tweaks
syntax = "proto3";

option go_package = "tofnd;tofnd";

package tofnd;

// GG20 is the protocol https://eprint.iacr.org/2020/540
// rpc definitions intended to wrap the API for this library: https://github.com/axelarnetwork/tofn
service GG20 {
    rpc Keygen(stream MessageIn) returns (stream MessageOut);
    rpc Sign(stream MessageIn) returns (stream MessageOut);
    rpc GetKey(Uid) returns (Bytes);
    rpc GetSig(Uid) returns (Bytes);
}

// generic message types shared by Keygen, Sign

message MessageIn {
    oneof data {
        KeygenInit keygen_init = 1; // first message only, Keygen
        SignInit sign_init = 2;     // first message only, Sign
        TrafficIn traffic = 3;      // all subsequent messages
    }
}

message MessageOut {
    oneof data {
        TrafficOut traffic = 1;  // all but final message
        bytes keygen_result = 2; // final message only, Keygen
        bytes sign_result = 3;   // final message only, Sign
    }
}

message TrafficIn {
    string from_party_uid = 1;
    bytes payload = 2;
    bool is_broadcast = 3;
}

message TrafficOut {
    string to_party_uid = 1;
    bytes payload = 2;
    bool is_broadcast = 3;
}

// Keygen specific message types

message KeygenInit {
    string new_key_uid = 1;
    repeated string party_uids = 2;
    int32 my_party_index = 3; // parties[my_party_index] belongs to the server
    int32 threshold = 4;
}

// Sign specific message types

message SignInit {
    string new_sig_uid = 1;
    string key_uid = 2;
    repeated string party_uids = 3; // TODO replace this with a subset of indices?
    bytes message_to_sign = 4;
}

// Generic message types shared by GetKey, GetSig.
// Used only because rpc args cannot be scalar types,
// so we need to wrap scalar types inside message types.

message Uid {
    string uid = 1;
}

message Bytes {
    bytes payload = 1;
}