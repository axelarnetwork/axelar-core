// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/axelarnetwork/axelar-core/x/broadcast/exported"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"sync"
)

// Ensure, that BroadcasterMock does implement exported.Broadcaster.
// If this is not the case, regenerate this file with moq.
var _ exported.Broadcaster = &BroadcasterMock{}

// BroadcasterMock is a mock implementation of exported.Broadcaster.
//
//     func TestSomethingThatUsesBroadcaster(t *testing.T) {
//
//         // make and configure a mocked exported.Broadcaster
//         mockedBroadcaster := &BroadcasterMock{
//             BroadcastFunc: func(ctx sdk.Context, msgs []exported.MsgWithSenderSetter) error {
// 	               panic("mock out the Broadcast method")
//             },
//             GetLocalPrincipalFunc: func(ctx sdk.Context) sdk.ValAddress {
// 	               panic("mock out the GetLocalPrincipal method")
//             },
//             GetPrincipalFunc: func(ctx sdk.Context, proxy sdk.AccAddress) sdk.ValAddress {
// 	               panic("mock out the GetPrincipal method")
//             },
//             GetProxyFunc: func(ctx sdk.Context, principal sdk.ValAddress) sdk.AccAddress {
// 	               panic("mock out the GetProxy method")
//             },
//             RegisterProxyFunc: func(ctx sdk.Context, principal sdk.ValAddress, proxy sdk.AccAddress) error {
// 	               panic("mock out the RegisterProxy method")
//             },
//         }
//
//         // use mockedBroadcaster in code that requires exported.Broadcaster
//         // and then make assertions.
//
//     }
type BroadcasterMock struct {
	// BroadcastFunc mocks the Broadcast method.
	BroadcastFunc func(ctx sdk.Context, msgs []exported.MsgWithSenderSetter) error

	// GetLocalPrincipalFunc mocks the GetLocalPrincipal method.
	GetLocalPrincipalFunc func(ctx sdk.Context) sdk.ValAddress

	// GetPrincipalFunc mocks the GetPrincipal method.
	GetPrincipalFunc func(ctx sdk.Context, proxy sdk.AccAddress) sdk.ValAddress

	// GetProxyFunc mocks the GetProxy method.
	GetProxyFunc func(ctx sdk.Context, principal sdk.ValAddress) sdk.AccAddress

	// RegisterProxyFunc mocks the RegisterProxy method.
	RegisterProxyFunc func(ctx sdk.Context, principal sdk.ValAddress, proxy sdk.AccAddress) error

	// calls tracks calls to the methods.
	calls struct {
		// Broadcast holds details about calls to the Broadcast method.
		Broadcast []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Msgs is the msgs argument value.
			Msgs []exported.MsgWithSenderSetter
		}
		// GetLocalPrincipal holds details about calls to the GetLocalPrincipal method.
		GetLocalPrincipal []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
		}
		// GetPrincipal holds details about calls to the GetPrincipal method.
		GetPrincipal []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Proxy is the proxy argument value.
			Proxy sdk.AccAddress
		}
		// GetProxy holds details about calls to the GetProxy method.
		GetProxy []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Principal is the principal argument value.
			Principal sdk.ValAddress
		}
		// RegisterProxy holds details about calls to the RegisterProxy method.
		RegisterProxy []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Principal is the principal argument value.
			Principal sdk.ValAddress
			// Proxy is the proxy argument value.
			Proxy sdk.AccAddress
		}
	}
	lockBroadcast         sync.RWMutex
	lockGetLocalPrincipal sync.RWMutex
	lockGetPrincipal      sync.RWMutex
	lockGetProxy          sync.RWMutex
	lockRegisterProxy     sync.RWMutex
}

// Broadcast calls BroadcastFunc.
func (mock *BroadcasterMock) Broadcast(ctx sdk.Context, msgs []exported.MsgWithSenderSetter) error {
	if mock.BroadcastFunc == nil {
		panic("BroadcasterMock.BroadcastFunc: method is nil but Broadcaster.Broadcast was just called")
	}
	callInfo := struct {
		Ctx  sdk.Context
		Msgs []exported.MsgWithSenderSetter
	}{
		Ctx:  ctx,
		Msgs: msgs,
	}
	mock.lockBroadcast.Lock()
	mock.calls.Broadcast = append(mock.calls.Broadcast, callInfo)
	mock.lockBroadcast.Unlock()
	return mock.BroadcastFunc(ctx, msgs)
}

// BroadcastCalls gets all the calls that were made to Broadcast.
// Check the length with:
//     len(mockedBroadcaster.BroadcastCalls())
func (mock *BroadcasterMock) BroadcastCalls() []struct {
	Ctx  sdk.Context
	Msgs []exported.MsgWithSenderSetter
} {
	var calls []struct {
		Ctx  sdk.Context
		Msgs []exported.MsgWithSenderSetter
	}
	mock.lockBroadcast.RLock()
	calls = mock.calls.Broadcast
	mock.lockBroadcast.RUnlock()
	return calls
}

// GetLocalPrincipal calls GetLocalPrincipalFunc.
func (mock *BroadcasterMock) GetLocalPrincipal(ctx sdk.Context) sdk.ValAddress {
	if mock.GetLocalPrincipalFunc == nil {
		panic("BroadcasterMock.GetLocalPrincipalFunc: method is nil but Broadcaster.GetLocalPrincipal was just called")
	}
	callInfo := struct {
		Ctx sdk.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLocalPrincipal.Lock()
	mock.calls.GetLocalPrincipal = append(mock.calls.GetLocalPrincipal, callInfo)
	mock.lockGetLocalPrincipal.Unlock()
	return mock.GetLocalPrincipalFunc(ctx)
}

// GetLocalPrincipalCalls gets all the calls that were made to GetLocalPrincipal.
// Check the length with:
//     len(mockedBroadcaster.GetLocalPrincipalCalls())
func (mock *BroadcasterMock) GetLocalPrincipalCalls() []struct {
	Ctx sdk.Context
} {
	var calls []struct {
		Ctx sdk.Context
	}
	mock.lockGetLocalPrincipal.RLock()
	calls = mock.calls.GetLocalPrincipal
	mock.lockGetLocalPrincipal.RUnlock()
	return calls
}

// GetPrincipal calls GetPrincipalFunc.
func (mock *BroadcasterMock) GetPrincipal(ctx sdk.Context, proxy sdk.AccAddress) sdk.ValAddress {
	if mock.GetPrincipalFunc == nil {
		panic("BroadcasterMock.GetPrincipalFunc: method is nil but Broadcaster.GetPrincipal was just called")
	}
	callInfo := struct {
		Ctx   sdk.Context
		Proxy sdk.AccAddress
	}{
		Ctx:   ctx,
		Proxy: proxy,
	}
	mock.lockGetPrincipal.Lock()
	mock.calls.GetPrincipal = append(mock.calls.GetPrincipal, callInfo)
	mock.lockGetPrincipal.Unlock()
	return mock.GetPrincipalFunc(ctx, proxy)
}

// GetPrincipalCalls gets all the calls that were made to GetPrincipal.
// Check the length with:
//     len(mockedBroadcaster.GetPrincipalCalls())
func (mock *BroadcasterMock) GetPrincipalCalls() []struct {
	Ctx   sdk.Context
	Proxy sdk.AccAddress
} {
	var calls []struct {
		Ctx   sdk.Context
		Proxy sdk.AccAddress
	}
	mock.lockGetPrincipal.RLock()
	calls = mock.calls.GetPrincipal
	mock.lockGetPrincipal.RUnlock()
	return calls
}

// GetProxy calls GetProxyFunc.
func (mock *BroadcasterMock) GetProxy(ctx sdk.Context, principal sdk.ValAddress) sdk.AccAddress {
	if mock.GetProxyFunc == nil {
		panic("BroadcasterMock.GetProxyFunc: method is nil but Broadcaster.GetProxy was just called")
	}
	callInfo := struct {
		Ctx       sdk.Context
		Principal sdk.ValAddress
	}{
		Ctx:       ctx,
		Principal: principal,
	}
	mock.lockGetProxy.Lock()
	mock.calls.GetProxy = append(mock.calls.GetProxy, callInfo)
	mock.lockGetProxy.Unlock()
	return mock.GetProxyFunc(ctx, principal)
}

// GetProxyCalls gets all the calls that were made to GetProxy.
// Check the length with:
//     len(mockedBroadcaster.GetProxyCalls())
func (mock *BroadcasterMock) GetProxyCalls() []struct {
	Ctx       sdk.Context
	Principal sdk.ValAddress
} {
	var calls []struct {
		Ctx       sdk.Context
		Principal sdk.ValAddress
	}
	mock.lockGetProxy.RLock()
	calls = mock.calls.GetProxy
	mock.lockGetProxy.RUnlock()
	return calls
}

// RegisterProxy calls RegisterProxyFunc.
func (mock *BroadcasterMock) RegisterProxy(ctx sdk.Context, principal sdk.ValAddress, proxy sdk.AccAddress) error {
	if mock.RegisterProxyFunc == nil {
		panic("BroadcasterMock.RegisterProxyFunc: method is nil but Broadcaster.RegisterProxy was just called")
	}
	callInfo := struct {
		Ctx       sdk.Context
		Principal sdk.ValAddress
		Proxy     sdk.AccAddress
	}{
		Ctx:       ctx,
		Principal: principal,
		Proxy:     proxy,
	}
	mock.lockRegisterProxy.Lock()
	mock.calls.RegisterProxy = append(mock.calls.RegisterProxy, callInfo)
	mock.lockRegisterProxy.Unlock()
	return mock.RegisterProxyFunc(ctx, principal, proxy)
}

// RegisterProxyCalls gets all the calls that were made to RegisterProxy.
// Check the length with:
//     len(mockedBroadcaster.RegisterProxyCalls())
func (mock *BroadcasterMock) RegisterProxyCalls() []struct {
	Ctx       sdk.Context
	Principal sdk.ValAddress
	Proxy     sdk.AccAddress
} {
	var calls []struct {
		Ctx       sdk.Context
		Principal sdk.ValAddress
		Proxy     sdk.AccAddress
	}
	mock.lockRegisterProxy.RLock()
	calls = mock.calls.RegisterProxy
	mock.lockRegisterProxy.RUnlock()
	return calls
}
