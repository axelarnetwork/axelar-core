// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/axelarnet/v1beta1/query.proto

package types

import (
	fmt "fmt"
	_ "github.com/axelarnetwork/axelar-core/x/nexus/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PendingIBCTransferCountRequest struct {
}

func (m *PendingIBCTransferCountRequest) Reset()         { *m = PendingIBCTransferCountRequest{} }
func (m *PendingIBCTransferCountRequest) String() string { return proto.CompactTextString(m) }
func (*PendingIBCTransferCountRequest) ProtoMessage()    {}
func (*PendingIBCTransferCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef850a4433bf2f6, []int{0}
}
func (m *PendingIBCTransferCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingIBCTransferCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingIBCTransferCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingIBCTransferCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingIBCTransferCountRequest.Merge(m, src)
}
func (m *PendingIBCTransferCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *PendingIBCTransferCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingIBCTransferCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PendingIBCTransferCountRequest proto.InternalMessageInfo

type PendingIBCTransferCountResponse struct {
	TransfersByChain map[string]uint32 `protobuf:"bytes,1,rep,name=transfers_by_chain,json=transfersByChain,proto3" json:"transfers_by_chain" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *PendingIBCTransferCountResponse) Reset()         { *m = PendingIBCTransferCountResponse{} }
func (m *PendingIBCTransferCountResponse) String() string { return proto.CompactTextString(m) }
func (*PendingIBCTransferCountResponse) ProtoMessage()    {}
func (*PendingIBCTransferCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ef850a4433bf2f6, []int{1}
}
func (m *PendingIBCTransferCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingIBCTransferCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingIBCTransferCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingIBCTransferCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingIBCTransferCountResponse.Merge(m, src)
}
func (m *PendingIBCTransferCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *PendingIBCTransferCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingIBCTransferCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PendingIBCTransferCountResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PendingIBCTransferCountRequest)(nil), "axelar.axelarnet.v1beta1.PendingIBCTransferCountRequest")
	proto.RegisterType((*PendingIBCTransferCountResponse)(nil), "axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse")
	proto.RegisterMapType((map[string]uint32)(nil), "axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse.TransfersByChainEntry")
}

func init() {
	proto.RegisterFile("axelar/axelarnet/v1beta1/query.proto", fileDescriptor_5ef850a4433bf2f6)
}

var fileDescriptor_5ef850a4433bf2f6 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x9b, 0x4d, 0x05, 0x23, 0xc2, 0x28, 0x13, 0xca, 0x0e, 0x59, 0x19, 0x1e, 0x86, 0x60,
	0xca, 0x14, 0x44, 0x3c, 0xb6, 0x78, 0xf0, 0xa4, 0x94, 0x9d, 0xbc, 0x8c, 0xb4, 0x3e, 0xbb, 0xb2,
	0x2d, 0xe9, 0x92, 0x74, 0xae, 0x67, 0xbf, 0x80, 0x1f, 0x6b, 0xc7, 0x1d, 0x3d, 0x89, 0x6e, 0x57,
	0x3f, 0x84, 0x6c, 0xad, 0x53, 0x64, 0xc5, 0x53, 0xde, 0xcb, 0xff, 0x97, 0x7f, 0x1e, 0xef, 0x8f,
	0x8f, 0xd9, 0x14, 0x86, 0x4c, 0x3a, 0xf9, 0xc1, 0x41, 0x3b, 0x93, 0x4e, 0x00, 0x9a, 0x75, 0x9c,
	0x71, 0x0a, 0x32, 0xa3, 0x89, 0x14, 0x5a, 0x98, 0x56, 0x2e, 0xd3, 0x0d, 0x45, 0x0b, 0xaa, 0x51,
	0x8f, 0x44, 0x24, 0xd6, 0x90, 0xb3, 0xaa, 0x72, 0xbe, 0x51, 0xee, 0xaa, 0xb3, 0x04, 0x54, 0x41,
	0x9d, 0x84, 0x42, 0x8d, 0x84, 0x72, 0x02, 0xa6, 0x20, 0xff, 0x6e, 0x83, 0x25, 0x2c, 0x8a, 0x39,
	0xd3, 0xb1, 0xe0, 0x05, 0x6b, 0x17, 0x8e, 0x1c, 0xa6, 0xa9, 0xda, 0x36, 0x63, 0xcb, 0xc6, 0xe4,
	0x0e, 0xf8, 0x43, 0xcc, 0xa3, 0x1b, 0xd7, 0xeb, 0x4a, 0xc6, 0xd5, 0x23, 0x48, 0x4f, 0xa4, 0x5c,
	0xfb, 0x30, 0x4e, 0x41, 0xe9, 0xd6, 0x27, 0xc2, 0xcd, 0x52, 0x44, 0x25, 0x82, 0x2b, 0x30, 0x9f,
	0x11, 0x36, 0x75, 0xa1, 0xa8, 0x5e, 0x90, 0xf5, 0xc2, 0x3e, 0x8b, 0xb9, 0x85, 0xec, 0x6a, 0xfb,
	0xe0, 0xec, 0x96, 0x96, 0xed, 0x81, 0xfe, 0xe3, 0x4b, 0xbf, 0x6f, 0x95, 0x9b, 0x79, 0x2b, 0xc7,
	0x6b, 0xae, 0x65, 0xe6, 0xee, 0xcc, 0xde, 0x9a, 0x86, 0x5f, 0xd3, 0x7f, 0xc4, 0x86, 0x87, 0x8f,
	0xb6, 0x3e, 0x30, 0x6b, 0xb8, 0x3a, 0x80, 0xcc, 0x42, 0x36, 0x6a, 0xef, 0xfb, 0xab, 0xd2, 0xac,
	0xe3, 0xdd, 0x09, 0x1b, 0xa6, 0x60, 0x55, 0x6c, 0xd4, 0x3e, 0xf4, 0xf3, 0xe6, 0xaa, 0x72, 0x89,
	0xdc, 0xee, 0xec, 0x83, 0x18, 0xb3, 0x05, 0x41, 0xf3, 0x05, 0x41, 0xef, 0x0b, 0x82, 0x5e, 0x96,
	0xc4, 0x98, 0x2f, 0x89, 0xf1, 0xba, 0x24, 0xc6, 0xfd, 0x45, 0x14, 0xeb, 0x7e, 0x1a, 0xd0, 0x50,
	0x8c, 0x7e, 0x62, 0x7a, 0x12, 0x72, 0x50, 0x74, 0xa7, 0xa1, 0x90, 0xe0, 0x4c, 0x7f, 0x45, 0xb8,
	0x8e, 0x2e, 0xd8, 0x5b, 0x6f, 0xfb, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xe7, 0xb4, 0xcf,
	0x39, 0x02, 0x00, 0x00,
}

func (m *PendingIBCTransferCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingIBCTransferCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingIBCTransferCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PendingIBCTransferCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingIBCTransferCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingIBCTransferCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransfersByChain) > 0 {
		for k := range m.TransfersByChain {
			v := m.TransfersByChain[k]
			baseI := i
			i = encodeVarintQuery(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingIBCTransferCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PendingIBCTransferCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransfersByChain) > 0 {
		for k, v := range m.TransfersByChain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + sovQuery(uint64(v))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingIBCTransferCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingIBCTransferCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingIBCTransferCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingIBCTransferCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingIBCTransferCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingIBCTransferCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersByChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransfersByChain == nil {
				m.TransfersByChain = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TransfersByChain[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
