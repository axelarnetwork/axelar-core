// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/axelarnet/v1beta1/events.proto

package types

import (
	fmt "fmt"
	github_com_axelarnetwork_axelar_core_x_nexus_exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IBCTransferSent struct {
	ID         github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" json:"id,omitempty"`
	Receipient string                                                           `protobuf:"bytes,2,opt,name=receipient,proto3" json:"receipient,omitempty"`
	Asset      types.Coin                                                       `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
	Sequence   uint64                                                           `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	PortID     string                                                           `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelID  string                                                           `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *IBCTransferSent) Reset()         { *m = IBCTransferSent{} }
func (m *IBCTransferSent) String() string { return proto.CompactTextString(m) }
func (*IBCTransferSent) ProtoMessage()    {}
func (*IBCTransferSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e862d506c60b5a3, []int{0}
}
func (m *IBCTransferSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCTransferSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCTransferSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCTransferSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCTransferSent.Merge(m, src)
}
func (m *IBCTransferSent) XXX_Size() int {
	return m.Size()
}
func (m *IBCTransferSent) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCTransferSent.DiscardUnknown(m)
}

var xxx_messageInfo_IBCTransferSent proto.InternalMessageInfo

func (m *IBCTransferSent) GetID() github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *IBCTransferSent) GetReceipient() string {
	if m != nil {
		return m.Receipient
	}
	return ""
}

func (m *IBCTransferSent) GetAsset() types.Coin {
	if m != nil {
		return m.Asset
	}
	return types.Coin{}
}

func (m *IBCTransferSent) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *IBCTransferSent) GetPortID() string {
	if m != nil {
		return m.PortID
	}
	return ""
}

func (m *IBCTransferSent) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

type IBCTransferCompleted struct {
	ID        github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" json:"id,omitempty"`
	Sequence  uint64                                                           `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	PortID    string                                                           `protobuf:"bytes,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelID string                                                           `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *IBCTransferCompleted) Reset()         { *m = IBCTransferCompleted{} }
func (m *IBCTransferCompleted) String() string { return proto.CompactTextString(m) }
func (*IBCTransferCompleted) ProtoMessage()    {}
func (*IBCTransferCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e862d506c60b5a3, []int{1}
}
func (m *IBCTransferCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCTransferCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCTransferCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCTransferCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCTransferCompleted.Merge(m, src)
}
func (m *IBCTransferCompleted) XXX_Size() int {
	return m.Size()
}
func (m *IBCTransferCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCTransferCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_IBCTransferCompleted proto.InternalMessageInfo

func (m *IBCTransferCompleted) GetID() github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *IBCTransferCompleted) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *IBCTransferCompleted) GetPortID() string {
	if m != nil {
		return m.PortID
	}
	return ""
}

func (m *IBCTransferCompleted) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

type IBCTransferFailed struct {
	ID        github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" json:"id,omitempty"`
	Sequence  uint64                                                           `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	PortID    string                                                           `protobuf:"bytes,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelID string                                                           `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *IBCTransferFailed) Reset()         { *m = IBCTransferFailed{} }
func (m *IBCTransferFailed) String() string { return proto.CompactTextString(m) }
func (*IBCTransferFailed) ProtoMessage()    {}
func (*IBCTransferFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e862d506c60b5a3, []int{2}
}
func (m *IBCTransferFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCTransferFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCTransferFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCTransferFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCTransferFailed.Merge(m, src)
}
func (m *IBCTransferFailed) XXX_Size() int {
	return m.Size()
}
func (m *IBCTransferFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCTransferFailed.DiscardUnknown(m)
}

var xxx_messageInfo_IBCTransferFailed proto.InternalMessageInfo

func (m *IBCTransferFailed) GetID() github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *IBCTransferFailed) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *IBCTransferFailed) GetPortID() string {
	if m != nil {
		return m.PortID
	}
	return ""
}

func (m *IBCTransferFailed) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

type IBCTransferRetry struct {
	ID         github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" json:"id,omitempty"`
	Receipient string                                                           `protobuf:"bytes,2,opt,name=receipient,proto3" json:"receipient,omitempty"`
	Asset      types.Coin                                                       `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
	Sequence   uint64                                                           `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	PortID     string                                                           `protobuf:"bytes,5,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelID  string                                                           `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *IBCTransferRetry) Reset()         { *m = IBCTransferRetry{} }
func (m *IBCTransferRetry) String() string { return proto.CompactTextString(m) }
func (*IBCTransferRetry) ProtoMessage()    {}
func (*IBCTransferRetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e862d506c60b5a3, []int{3}
}
func (m *IBCTransferRetry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCTransferRetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCTransferRetry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCTransferRetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCTransferRetry.Merge(m, src)
}
func (m *IBCTransferRetry) XXX_Size() int {
	return m.Size()
}
func (m *IBCTransferRetry) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCTransferRetry.DiscardUnknown(m)
}

var xxx_messageInfo_IBCTransferRetry proto.InternalMessageInfo

func (m *IBCTransferRetry) GetID() github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *IBCTransferRetry) GetReceipient() string {
	if m != nil {
		return m.Receipient
	}
	return ""
}

func (m *IBCTransferRetry) GetAsset() types.Coin {
	if m != nil {
		return m.Asset
	}
	return types.Coin{}
}

func (m *IBCTransferRetry) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *IBCTransferRetry) GetPortID() string {
	if m != nil {
		return m.PortID
	}
	return ""
}

func (m *IBCTransferRetry) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

type AxelarTransferCompleted struct {
	ID         github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" json:"id,omitempty"`
	Receipient string                                                           `protobuf:"bytes,2,opt,name=receipient,proto3" json:"receipient,omitempty"`
	Asset      types.Coin                                                       `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
}

func (m *AxelarTransferCompleted) Reset()         { *m = AxelarTransferCompleted{} }
func (m *AxelarTransferCompleted) String() string { return proto.CompactTextString(m) }
func (*AxelarTransferCompleted) ProtoMessage()    {}
func (*AxelarTransferCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e862d506c60b5a3, []int{4}
}
func (m *AxelarTransferCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AxelarTransferCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AxelarTransferCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AxelarTransferCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxelarTransferCompleted.Merge(m, src)
}
func (m *AxelarTransferCompleted) XXX_Size() int {
	return m.Size()
}
func (m *AxelarTransferCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_AxelarTransferCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_AxelarTransferCompleted proto.InternalMessageInfo

func (m *AxelarTransferCompleted) GetID() github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AxelarTransferCompleted) GetReceipient() string {
	if m != nil {
		return m.Receipient
	}
	return ""
}

func (m *AxelarTransferCompleted) GetAsset() types.Coin {
	if m != nil {
		return m.Asset
	}
	return types.Coin{}
}

type FeeCollected struct {
	Collector github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=collector,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"collector,omitempty"`
	Fee       types.Coin                                    `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee"`
}

func (m *FeeCollected) Reset()         { *m = FeeCollected{} }
func (m *FeeCollected) String() string { return proto.CompactTextString(m) }
func (*FeeCollected) ProtoMessage()    {}
func (*FeeCollected) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e862d506c60b5a3, []int{5}
}
func (m *FeeCollected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeCollected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeCollected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeCollected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeCollected.Merge(m, src)
}
func (m *FeeCollected) XXX_Size() int {
	return m.Size()
}
func (m *FeeCollected) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeCollected.DiscardUnknown(m)
}

var xxx_messageInfo_FeeCollected proto.InternalMessageInfo

func (m *FeeCollected) GetCollector() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Collector
	}
	return nil
}

func (m *FeeCollected) GetFee() types.Coin {
	if m != nil {
		return m.Fee
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*IBCTransferSent)(nil), "axelar.axelarnet.v1beta1.IBCTransferSent")
	proto.RegisterType((*IBCTransferCompleted)(nil), "axelar.axelarnet.v1beta1.IBCTransferCompleted")
	proto.RegisterType((*IBCTransferFailed)(nil), "axelar.axelarnet.v1beta1.IBCTransferFailed")
	proto.RegisterType((*IBCTransferRetry)(nil), "axelar.axelarnet.v1beta1.IBCTransferRetry")
	proto.RegisterType((*AxelarTransferCompleted)(nil), "axelar.axelarnet.v1beta1.AxelarTransferCompleted")
	proto.RegisterType((*FeeCollected)(nil), "axelar.axelarnet.v1beta1.FeeCollected")
}

func init() {
	proto.RegisterFile("axelar/axelarnet/v1beta1/events.proto", fileDescriptor_7e862d506c60b5a3)
}

var fileDescriptor_7e862d506c60b5a3 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x4e, 0x1a, 0xc8, 0x51, 0x04, 0x58, 0x95, 0x30, 0x19, 0xec, 0x28, 0x08, 0x29,
	0x03, 0xb1, 0x15, 0x10, 0xcc, 0xc4, 0x89, 0x2a, 0x99, 0x85, 0xca, 0x30, 0x75, 0x41, 0xce, 0xdd,
	0x6b, 0x6a, 0xd5, 0xb9, 0x33, 0x77, 0x97, 0x92, 0x7e, 0x0b, 0xc4, 0x57, 0x81, 0x0f, 0xd1, 0x81,
	0xa1, 0x23, 0x93, 0x05, 0xce, 0xb7, 0xe8, 0x84, 0xec, 0x4b, 0x13, 0x2f, 0xa8, 0x59, 0xca, 0x80,
	0x3a, 0x9d, 0xdf, 0xbd, 0xbf, 0x9e, 0xff, 0xbf, 0xa7, 0xa7, 0x77, 0xf8, 0x59, 0xb4, 0x80, 0x24,
	0x12, 0x9e, 0x3e, 0x18, 0x28, 0xef, 0x74, 0x30, 0x01, 0x15, 0x0d, 0x3c, 0x38, 0x05, 0xa6, 0xa4,
	0x9b, 0x0a, 0xae, 0xb8, 0x69, 0xe9, 0xbc, 0xbb, 0x96, 0xb9, 0x2b, 0x59, 0x7b, 0x6f, 0xca, 0xa7,
	0xbc, 0x14, 0x79, 0xc5, 0x97, 0xd6, 0xb7, 0x6d, 0xc2, 0xe5, 0x8c, 0x4b, 0x6f, 0x12, 0x49, 0x58,
	0x57, 0x24, 0x3c, 0x66, 0x3a, 0xdf, 0xfd, 0x66, 0xe0, 0x07, 0x81, 0x3f, 0xfa, 0x20, 0x22, 0x26,
	0x8f, 0x40, 0xbc, 0x07, 0xa6, 0xcc, 0x43, 0x6c, 0xc4, 0xd4, 0x42, 0x1d, 0xd4, 0x6b, 0xf8, 0x6f,
	0xf3, 0xcc, 0x31, 0x82, 0xf1, 0x65, 0xe6, 0xbc, 0x99, 0xc6, 0xea, 0x78, 0x3e, 0x71, 0x09, 0x9f,
	0x6d, 0x4c, 0x7e, 0xe6, 0xe2, 0x64, 0x15, 0xf5, 0x09, 0x17, 0xe0, 0x2d, 0x3c, 0x06, 0x8b, 0xb9,
	0xf4, 0x60, 0x91, 0x72, 0xa1, 0x80, 0xba, 0x57, 0x95, 0x83, 0x71, 0x68, 0xc4, 0xd4, 0xb4, 0x31,
	0x16, 0x40, 0x20, 0x4e, 0x63, 0x60, 0xca, 0x32, 0x3a, 0xa8, 0xd7, 0x0a, 0x2b, 0x37, 0xe6, 0x2b,
	0xbc, 0x13, 0x49, 0x09, 0xca, 0xaa, 0x77, 0x50, 0xef, 0xde, 0x8b, 0x27, 0xae, 0xf6, 0xef, 0x16,
	0xfe, 0xaf, 0x50, 0xdd, 0x11, 0x8f, 0x99, 0xdf, 0x38, 0xcf, 0x9c, 0x5a, 0xa8, 0xd5, 0x66, 0x1b,
	0xdf, 0x95, 0xf0, 0x69, 0x0e, 0x8c, 0x80, 0xd5, 0x28, 0x8c, 0x87, 0xeb, 0xd8, 0x7c, 0x8a, 0xef,
	0x14, 0x5e, 0x3e, 0xc6, 0xd4, 0xda, 0x29, 0xfe, 0xe7, 0xe3, 0x3c, 0x73, 0x9a, 0x07, 0x5c, 0xa8,
	0x60, 0x1c, 0x36, 0x8b, 0x54, 0x40, 0xcd, 0xe7, 0x18, 0x93, 0xe3, 0x88, 0x31, 0x48, 0x0a, 0x5d,
	0xb3, 0xd4, 0xdd, 0xcf, 0x33, 0xa7, 0x35, 0xd2, 0xb7, 0xc1, 0x38, 0x6c, 0xad, 0x04, 0x01, 0xed,
	0xfe, 0x46, 0x78, 0xaf, 0xd2, 0xb5, 0x11, 0x9f, 0xa5, 0x09, 0x28, 0xa0, 0x37, 0xda, 0xba, 0x2a,
	0xa3, 0xf1, 0x77, 0xc6, 0xfa, 0x96, 0x8c, 0x8d, 0x6b, 0x18, 0x33, 0x84, 0x1f, 0x55, 0x18, 0xf7,
	0xa3, 0x38, 0xf9, 0xbf, 0x00, 0xbf, 0x1b, 0xf8, 0x61, 0x05, 0x30, 0x04, 0x25, 0xce, 0x6e, 0x67,
	0xff, 0xda, 0xd9, 0xff, 0x81, 0xf0, 0xe3, 0x61, 0x49, 0xfd, 0x6f, 0xc7, 0xff, 0x66, 0xba, 0xd7,
	0xfd, 0x8a, 0xf0, 0xee, 0x3e, 0xc0, 0x88, 0x27, 0x09, 0x90, 0x82, 0xe1, 0x1d, 0x6e, 0x11, 0x1d,
	0x70, 0x51, 0xa2, 0xec, 0xfa, 0x83, 0xcb, 0xcc, 0xe9, 0x57, 0x20, 0x56, 0x3b, 0x55, 0x1f, 0x7d,
	0x49, 0x4f, 0x3c, 0x75, 0x96, 0x82, 0x74, 0x87, 0x84, 0x0c, 0x29, 0x15, 0x20, 0x65, 0xb8, 0xa9,
	0x61, 0x0e, 0x70, 0xfd, 0x08, 0xf4, 0x44, 0x6f, 0x61, 0xab, 0xd0, 0xfa, 0x07, 0xe7, 0xb9, 0x8d,
	0x2e, 0x72, 0x1b, 0xfd, 0xca, 0x6d, 0xf4, 0x65, 0x69, 0xd7, 0x2e, 0x96, 0x76, 0xed, 0xe7, 0xd2,
	0xae, 0x1d, 0xbe, 0xde, 0xb2, 0x97, 0x9b, 0x67, 0xa4, 0xb4, 0x36, 0x69, 0x96, 0xeb, 0xfe, 0xe5,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x02, 0x5b, 0x42, 0x67, 0x06, 0x00, 0x00,
}

func (m *IBCTransferSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCTransferSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCTransferSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receipient) > 0 {
		i -= len(m.Receipient)
		copy(dAtA[i:], m.Receipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IBCTransferCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCTransferCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCTransferCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IBCTransferFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCTransferFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCTransferFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IBCTransferRetry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCTransferRetry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCTransferRetry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receipient) > 0 {
		i -= len(m.Receipient)
		copy(dAtA[i:], m.Receipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AxelarTransferCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AxelarTransferCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AxelarTransferCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receipient) > 0 {
		i -= len(m.Receipient)
		copy(dAtA[i:], m.Receipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeCollected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeCollected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeCollected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Collector) > 0 {
		i -= len(m.Collector)
		copy(dAtA[i:], m.Collector)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Collector)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IBCTransferSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEvents(uint64(m.ID))
	}
	l = len(m.Receipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.Sequence != 0 {
		n += 1 + sovEvents(uint64(m.Sequence))
	}
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *IBCTransferCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEvents(uint64(m.ID))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvents(uint64(m.Sequence))
	}
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *IBCTransferFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEvents(uint64(m.ID))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvents(uint64(m.Sequence))
	}
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *IBCTransferRetry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEvents(uint64(m.ID))
	}
	l = len(m.Receipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.Sequence != 0 {
		n += 1 + sovEvents(uint64(m.Sequence))
	}
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *AxelarTransferCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEvents(uint64(m.ID))
	}
	l = len(m.Receipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *FeeCollected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Collector)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Fee.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IBCTransferSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCTransferSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCTransferSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCTransferCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCTransferCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCTransferCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCTransferFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCTransferFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCTransferFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCTransferRetry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCTransferRetry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCTransferRetry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AxelarTransferCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AxelarTransferCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AxelarTransferCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeCollected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeCollected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeCollected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collector = append(m.Collector[:0], dAtA[iNdEx:postIndex]...)
			if m.Collector == nil {
				m.Collector = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
