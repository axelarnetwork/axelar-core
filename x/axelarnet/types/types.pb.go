// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/axelarnet/v1beta1/types.proto

package types

import (
	fmt "fmt"
	github_com_axelarnetwork_axelar_core_x_nexus_exported "github.com/axelarnetwork/axelar-core/x/nexus/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IBCTransfer_Status int32

const (
	TransferNonExistent IBCTransfer_Status = 0
	TransferPending     IBCTransfer_Status = 1
	TransferCompleted   IBCTransfer_Status = 2
	TransferFailed      IBCTransfer_Status = 3
)

var IBCTransfer_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PENDING",
	2: "STATUS_COMPLETED",
	3: "STATUS_FAILED",
}

var IBCTransfer_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_PENDING":     1,
	"STATUS_COMPLETED":   2,
	"STATUS_FAILED":      3,
}

func (x IBCTransfer_Status) String() string {
	return proto.EnumName(IBCTransfer_Status_name, int32(x))
}

func (IBCTransfer_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b93b0b029e93a08b, []int{0, 0}
}

type IBCTransfer struct {
	Sender    github_com_cosmos_cosmos_sdk_types.AccAddress                    `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	Receiver  string                                                           `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token     types.Coin                                                       `protobuf:"bytes,3,opt,name=token,proto3" json:"token"`
	PortID    string                                                           `protobuf:"bytes,4,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelID string                                                           `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence  uint64                                                           `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"` // Deprecated: Do not use.
	ID        github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID `protobuf:"varint,7,opt,name=id,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" json:"id,omitempty"`
	Status    IBCTransfer_Status                                               `protobuf:"varint,8,opt,name=status,proto3,enum=axelar.axelarnet.v1beta1.IBCTransfer_Status" json:"status,omitempty"`
}

func (m *IBCTransfer) Reset()         { *m = IBCTransfer{} }
func (m *IBCTransfer) String() string { return proto.CompactTextString(m) }
func (*IBCTransfer) ProtoMessage()    {}
func (*IBCTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b93b0b029e93a08b, []int{0}
}
func (m *IBCTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCTransfer.Merge(m, src)
}
func (m *IBCTransfer) XXX_Size() int {
	return m.Size()
}
func (m *IBCTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_IBCTransfer proto.InternalMessageInfo

type CosmosChain struct {
	Name       github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName `protobuf:"bytes,1,opt,name=name,proto3,casttype=github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" json:"name,omitempty"`
	IBCPath    string                                                          `protobuf:"bytes,2,opt,name=ibc_path,json=ibcPath,proto3" json:"ibc_path,omitempty"`
	Assets     []Asset                                                         `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets"` // Deprecated: Do not use.
	AddrPrefix string                                                          `protobuf:"bytes,4,opt,name=addr_prefix,json=addrPrefix,proto3" json:"addr_prefix,omitempty"`
}

func (m *CosmosChain) Reset()         { *m = CosmosChain{} }
func (m *CosmosChain) String() string { return proto.CompactTextString(m) }
func (*CosmosChain) ProtoMessage()    {}
func (*CosmosChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_b93b0b029e93a08b, []int{1}
}
func (m *CosmosChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosChain.Merge(m, src)
}
func (m *CosmosChain) XXX_Size() int {
	return m.Size()
}
func (m *CosmosChain) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosChain.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosChain proto.InternalMessageInfo

// Deprecated: Do not use.
type Asset struct {
	Denom     string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	MinAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=min_amount,json=minAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_amount"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b93b0b029e93a08b, []int{2}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

type Fee struct {
	Amount          types.Coin                                    `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
	Recipient       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=recipient,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"recipient,omitempty"`
	RefundRecipient github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=refund_recipient,json=refundRecipient,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"refund_recipient,omitempty"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_b93b0b029e93a08b, []int{3}
}
func (m *Fee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return m.Size()
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("axelar.axelarnet.v1beta1.IBCTransfer_Status", IBCTransfer_Status_name, IBCTransfer_Status_value)
	proto.RegisterType((*IBCTransfer)(nil), "axelar.axelarnet.v1beta1.IBCTransfer")
	proto.RegisterType((*CosmosChain)(nil), "axelar.axelarnet.v1beta1.CosmosChain")
	proto.RegisterType((*Asset)(nil), "axelar.axelarnet.v1beta1.Asset")
	proto.RegisterType((*Fee)(nil), "axelar.axelarnet.v1beta1.Fee")
}

func init() {
	proto.RegisterFile("axelar/axelarnet/v1beta1/types.proto", fileDescriptor_b93b0b029e93a08b)
}

var fileDescriptor_b93b0b029e93a08b = []byte{
	// 810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0x49, 0xe3, 0x26, 0x93, 0xdd, 0x6e, 0x98, 0x5d, 0x84, 0xc9, 0xc1, 0xb6, 0x02,
	0x2c, 0x91, 0xd8, 0xda, 0x6a, 0x11, 0x20, 0x71, 0x59, 0x62, 0x3b, 0x45, 0x46, 0xbb, 0xd9, 0xc8,
	0xcd, 0x0a, 0x69, 0x85, 0x14, 0x39, 0xf6, 0x6b, 0x33, 0x6a, 0x3d, 0x13, 0x3c, 0x93, 0x25, 0x9c,
	0xb9, 0xa0, 0x9e, 0xf8, 0x07, 0x7a, 0x82, 0x03, 0x7f, 0x06, 0xc7, 0x1e, 0xf7, 0x88, 0x38, 0x58,
	0x90, 0x9e, 0x91, 0x38, 0xf7, 0x84, 0xfc, 0x23, 0xe9, 0x5e, 0x2a, 0x55, 0x3d, 0xcd, 0xcc, 0x7b,
	0x9f, 0xf7, 0x9d, 0x37, 0xf3, 0xde, 0x0c, 0xfe, 0x30, 0x58, 0xc2, 0x69, 0x90, 0x58, 0xc5, 0xc0,
	0x40, 0x5a, 0xaf, 0xf7, 0xa6, 0x20, 0x83, 0x3d, 0x4b, 0xfe, 0x38, 0x07, 0x61, 0xce, 0x13, 0x2e,
	0x39, 0x51, 0x0b, 0xb7, 0xb9, 0xa1, 0xcc, 0x92, 0xea, 0x3c, 0x3a, 0xe6, 0xc7, 0x3c, 0x87, 0xac,
	0x6c, 0x56, 0xf0, 0x1d, 0x2d, 0xe4, 0x22, 0xe6, 0xc2, 0x9a, 0x06, 0x02, 0x36, 0x82, 0x21, 0xa7,
	0xac, 0xf0, 0x77, 0x7f, 0xaa, 0xe3, 0x96, 0x67, 0x3b, 0xe3, 0x24, 0x60, 0xe2, 0x08, 0x12, 0xe2,
	0x61, 0x45, 0x00, 0x8b, 0x20, 0x51, 0x91, 0x81, 0x7a, 0xf7, 0xec, 0xbd, 0xab, 0x54, 0xdf, 0x3d,
	0xa6, 0x72, 0xb6, 0x98, 0x9a, 0x21, 0x8f, 0xad, 0x52, 0xae, 0x18, 0x76, 0x45, 0x74, 0x52, 0x66,
	0xd7, 0x0f, 0xc3, 0x7e, 0x14, 0x25, 0x20, 0x84, 0x5f, 0x0a, 0x90, 0x0e, 0x6e, 0x24, 0x10, 0x02,
	0x7d, 0x0d, 0x89, 0x5a, 0x35, 0x50, 0xaf, 0xe9, 0x6f, 0xd6, 0xe4, 0x33, 0x5c, 0x97, 0xfc, 0x04,
	0x98, 0x5a, 0x33, 0x50, 0xaf, 0xb5, 0xff, 0xbe, 0x59, 0x08, 0x9a, 0x59, 0x9a, 0xeb, 0x13, 0x99,
	0x0e, 0xa7, 0xcc, 0xde, 0xba, 0x48, 0xf5, 0x8a, 0x5f, 0xd0, 0xe4, 0x03, 0xbc, 0x3d, 0xe7, 0x89,
	0x9c, 0xd0, 0x48, 0xdd, 0xca, 0x14, 0x6d, 0xbc, 0x4a, 0x75, 0x65, 0xc4, 0x13, 0xe9, 0xb9, 0xbe,
	0x92, 0xb9, 0xbc, 0x88, 0x3c, 0xc1, 0x38, 0x9c, 0x05, 0x8c, 0xc1, 0x69, 0xc6, 0xd5, 0x73, 0xee,
	0xfe, 0x2a, 0xd5, 0x9b, 0x4e, 0x61, 0xf5, 0x5c, 0xbf, 0x59, 0x02, 0x5e, 0x44, 0x34, 0xdc, 0x10,
	0xf0, 0xfd, 0x02, 0x58, 0x08, 0xaa, 0x62, 0xa0, 0xde, 0x96, 0x5d, 0x55, 0x91, 0xbf, 0xb1, 0x91,
	0x57, 0xb8, 0x4a, 0x23, 0x75, 0x3b, 0xf7, 0x7c, 0xb3, 0x4a, 0xf5, 0xaa, 0xe7, 0x5e, 0xa5, 0xfa,
	0x57, 0x6f, 0x5d, 0xc9, 0xa6, 0x14, 0x3f, 0xf0, 0xe4, 0xa4, 0x5c, 0xed, 0x86, 0x3c, 0x01, 0x6b,
	0x69, 0x31, 0x58, 0x2e, 0x84, 0x05, 0xcb, 0x2c, 0x35, 0x88, 0xcc, 0xf5, 0x35, 0x7b, 0xae, 0x5f,
	0xa5, 0x11, 0x71, 0xb1, 0x22, 0x64, 0x20, 0x17, 0x42, 0x6d, 0x18, 0xa8, 0xb7, 0xb3, 0xff, 0xc4,
	0xbc, 0xa9, 0xba, 0xe6, 0x5b, 0x35, 0x32, 0x0f, 0xf3, 0x18, 0xbf, 0x8c, 0xed, 0xfe, 0x81, 0xb0,
	0x52, 0x98, 0x88, 0x85, 0xc9, 0xe1, 0xb8, 0x3f, 0x7e, 0x79, 0x38, 0x79, 0x39, 0x3c, 0x1c, 0x0d,
	0x1c, 0xef, 0xc0, 0x1b, 0xb8, 0xed, 0x4a, 0xe7, 0xbd, 0xb3, 0x73, 0xe3, 0xe1, 0x3a, 0x7e, 0xc8,
	0xd9, 0x60, 0x49, 0x85, 0x04, 0x26, 0xc9, 0xc7, 0x78, 0xa7, 0x0c, 0x18, 0x0d, 0x86, 0xae, 0x37,
	0xfc, 0xba, 0x8d, 0x3a, 0x0f, 0xcf, 0xce, 0x8d, 0x07, 0x6b, 0x78, 0x04, 0x2c, 0xa2, 0xec, 0x98,
	0x7c, 0x82, 0xdb, 0x25, 0xe8, 0xbc, 0x78, 0x3e, 0x7a, 0x36, 0x18, 0x0f, 0xdc, 0x76, 0xb5, 0xf3,
	0xee, 0xd9, 0xb9, 0xf1, 0xce, 0x1a, 0x75, 0x78, 0x3c, 0x3f, 0x05, 0x09, 0x11, 0xf9, 0x08, 0xdf,
	0x2f, 0xe1, 0x83, 0xbe, 0xf7, 0x6c, 0xe0, 0xb6, 0x6b, 0x1d, 0x72, 0x76, 0x6e, 0xec, 0xac, 0xc9,
	0x83, 0x80, 0x9e, 0x42, 0xd4, 0x69, 0xfc, 0xfc, 0xab, 0x56, 0xf9, 0xfd, 0x37, 0x0d, 0x75, 0xff,
	0x43, 0xb8, 0xe5, 0xe4, 0x1d, 0xe0, 0xcc, 0x02, 0xca, 0xc8, 0xb7, 0x78, 0x8b, 0x05, 0x31, 0xe4,
	0x3d, 0xd8, 0xb4, 0x9d, 0xab, 0x54, 0x7f, 0x7a, 0xb7, 0x0b, 0xcf, 0xe5, 0x86, 0x41, 0x0c, 0x7e,
	0x2e, 0x48, 0x1e, 0xe3, 0x06, 0x9d, 0x86, 0x93, 0x79, 0x20, 0x67, 0x45, 0x4f, 0xda, 0xad, 0x55,
	0xaa, 0x6f, 0x7b, 0xb6, 0x33, 0x0a, 0xe4, 0xcc, 0xdf, 0xa6, 0xd3, 0x30, 0x9b, 0x90, 0xa7, 0x58,
	0x09, 0x84, 0x00, 0x29, 0xd4, 0x9a, 0x51, 0xeb, 0xb5, 0xf6, 0xf5, 0x9b, 0x2b, 0xd3, 0xcf, 0x38,
	0x5b, 0xc9, 0xda, 0x54, 0x45, 0x7e, 0x19, 0x46, 0x74, 0xdc, 0x0a, 0xa2, 0x28, 0x99, 0xcc, 0x13,
	0x38, 0xa2, 0xcb, 0xa2, 0x5b, 0x7d, 0x9c, 0x99, 0x46, 0xb9, 0xa5, 0x3b, 0xc7, 0xf5, 0x3c, 0x92,
	0x3c, 0xc2, 0xf5, 0x08, 0x18, 0x8f, 0x8b, 0xc3, 0xfa, 0xc5, 0x82, 0x3c, 0xc7, 0x38, 0xa6, 0x6c,
	0x12, 0xc4, 0x7c, 0xc1, 0x64, 0x9e, 0xea, 0x3d, 0xdb, 0xcc, 0xf6, 0xf8, 0x2b, 0xd5, 0x1f, 0xdf,
	0xe2, 0x3d, 0x7a, 0x4c, 0xfa, 0xcd, 0x98, 0xb2, 0x7e, 0x2e, 0xf0, 0x65, 0x55, 0x45, 0xdd, 0x7f,
	0x11, 0xae, 0x1d, 0x00, 0x90, 0x2f, 0xb0, 0x52, 0xca, 0xa2, 0xdb, 0x3d, 0xbe, 0x12, 0x27, 0x2f,
	0x70, 0x33, 0x81, 0x90, 0xce, 0x29, 0x6c, 0x52, 0xba, 0xc3, 0xf7, 0x70, 0xad, 0x41, 0xbe, 0xc3,
	0xed, 0x04, 0x8e, 0x16, 0x2c, 0x9a, 0x5c, 0xeb, 0xd6, 0xee, 0xaa, 0xfb, 0xa0, 0x90, 0xf2, 0xd7,
	0x4a, 0xf6, 0xf8, 0xe2, 0x1f, 0xad, 0x72, 0xb1, 0xd2, 0xd0, 0x9b, 0x95, 0x86, 0xfe, 0x5e, 0x69,
	0xe8, 0x97, 0x4b, 0xad, 0xf2, 0xe6, 0x52, 0xab, 0xfc, 0x79, 0xa9, 0x55, 0x5e, 0x7d, 0x7e, 0xcb,
	0x86, 0xba, 0xfe, 0x8e, 0xf3, 0x1d, 0xa7, 0x4a, 0xfe, 0x6f, 0x7e, 0xfa, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc9, 0x90, 0xcb, 0x47, 0xaf, 0x05, 0x00, 0x00,
}

func (m *IBCTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.ID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x38
	}
	if m.Sequence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CosmosChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddrPrefix) > 0 {
		i -= len(m.AddrPrefix)
		copy(dAtA[i:], m.AddrPrefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AddrPrefix)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IBCPath) > 0 {
		i -= len(m.IBCPath)
		copy(dAtA[i:], m.IBCPath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IBCPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinAmount.Size()
		i -= size
		if _, err := m.MinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundRecipient) > 0 {
		i -= len(m.RefundRecipient)
		copy(dAtA[i:], m.RefundRecipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RefundRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IBCTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Token.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovTypes(uint64(m.Sequence))
	}
	if m.ID != 0 {
		n += 1 + sovTypes(uint64(m.ID))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *CosmosChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IBCPath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AddrPrefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.MinAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Fee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RefundRecipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IBCTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_axelarnetwork_axelar_core_x_nexus_exported.TransferID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IBCTransfer_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = github_com_axelarnetwork_axelar_core_x_nexus_exported.ChainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBCPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IBCPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundRecipient = append(m.RefundRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.RefundRecipient == nil {
				m.RefundRecipient = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
