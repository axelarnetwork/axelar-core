// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/axelarnet/v1beta1/service.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("axelar/axelarnet/v1beta1/service.proto", fileDescriptor_4bc8aaff10777fba)
}
func init() {
	golang_proto.RegisterFile("axelar/axelarnet/v1beta1/service.proto", fileDescriptor_4bc8aaff10777fba)
}

var fileDescriptor_4bc8aaff10777fba = []byte{
	// 829 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd6, 0x4f, 0x4f, 0x33, 0x45,
	0x00, 0x06, 0x70, 0xc6, 0x18, 0x4c, 0x26, 0x2f, 0x46, 0x47, 0x22, 0x06, 0x4d, 0x85, 0x0d, 0x20,
	0x14, 0xd8, 0x85, 0x02, 0x0d, 0x72, 0x30, 0xa1, 0xab, 0x26, 0x24, 0x92, 0x60, 0xe5, 0xe4, 0x65,
	0x33, 0xdd, 0x0e, 0xdb, 0x0d, 0xdb, 0x9d, 0x65, 0x66, 0x8a, 0x6d, 0x0c, 0x17, 0x13, 0xef, 0x46,
	0x4f, 0x1e, 0x4c, 0xf4, 0xea, 0xc1, 0x98, 0x78, 0x30, 0xf1, 0xe4, 0xc1, 0x18, 0x8f, 0x24, 0x5e,
	0x3c, 0x1a, 0xea, 0x07, 0x31, 0x33, 0x3b, 0x03, 0x2d, 0x65, 0xff, 0xf4, 0x3d, 0xb1, 0xa4, 0xcf,
	0xb3, 0xf3, 0x9b, 0xd9, 0xc9, 0xec, 0xc2, 0x35, 0xdc, 0x27, 0x11, 0x66, 0x4e, 0xfa, 0x27, 0x26,
	0xc2, 0xb9, 0xde, 0x6d, 0x11, 0x81, 0x77, 0x1d, 0x4e, 0xd8, 0x75, 0xe8, 0x13, 0x3b, 0x61, 0x54,
	0x50, 0xf4, 0x46, 0x1a, 0xb0, 0xef, 0x73, 0xb6, 0xce, 0x2d, 0xce, 0x07, 0x34, 0xa0, 0x2a, 0xe4,
	0xc8, 0xab, 0x34, 0xbf, 0xf8, 0x56, 0x40, 0x69, 0x10, 0x11, 0x07, 0x27, 0xa1, 0x83, 0xe3, 0x98,
	0x0a, 0x2c, 0x42, 0x1a, 0x73, 0xfd, 0xeb, 0x72, 0xe6, 0xa8, 0xa2, 0xaf, 0x23, 0x2b, 0x99, 0x91,
	0xab, 0x1e, 0x61, 0x83, 0x34, 0x55, 0xfb, 0x7e, 0x0e, 0xc2, 0x53, 0x1e, 0x7c, 0x92, 0x5a, 0x51,
	0x1f, 0xbe, 0xf8, 0x51, 0x18, 0x5f, 0xa2, 0x55, 0x3b, 0x8b, 0x6b, 0xcb, 0xdf, 0x9b, 0xe4, 0xaa,
	0x47, 0xb8, 0x58, 0x5c, 0x2b, 0x8a, 0xf1, 0x84, 0xc6, 0x9c, 0x58, 0xcb, 0x5f, 0xfc, 0xfd, 0xdf,
	0x37, 0x2f, 0xbc, 0x69, 0xbd, 0xee, 0x4c, 0xa0, 0xa2, 0x30, 0xbe, 0x3c, 0x02, 0x55, 0xf4, 0x03,
	0x80, 0x2f, 0xbb, 0x34, 0xbe, 0x08, 0x59, 0xf7, 0x7d, 0x92, 0x50, 0x1e, 0x0a, 0xe4, 0x64, 0xdf,
	0x7d, 0x3c, 0x69, 0x38, 0x3b, 0xe5, 0x0b, 0x1a, 0xb6, 0xa5, 0x60, 0x6b, 0xd6, 0xf2, 0x24, 0xcc,
	0x4f, 0x1b, 0x5e, 0x3b, 0xad, 0x48, 0xe3, 0x9f, 0x00, 0x2e, 0x7c, 0xd0, 0x27, 0x7e, 0x4f, 0x90,
	0x33, 0x12, 0xb7, 0xc3, 0x38, 0x38, 0x67, 0x38, 0xe6, 0x17, 0x84, 0x71, 0x74, 0x98, 0x3d, 0x76,
	0x46, 0xc5, 0xa8, 0xdf, 0x7d, 0x8e, 0xa6, 0xe6, 0xd7, 0x15, 0x7f, 0xc7, 0xda, 0x9c, 0xe4, 0x93,
	0xb4, 0xea, 0x25, 0x69, 0xd7, 0x13, 0xa6, 0x2c, 0x27, 0xf2, 0x2b, 0x80, 0xaf, 0x1d, 0xb7, 0xdb,
	0x2e, 0xe5, 0x5d, 0xca, 0x1b, 0x98, 0x93, 0xb6, 0xdb, 0xc1, 0x61, 0x8c, 0xf6, 0xb3, 0x29, 0x4f,
	0xc4, 0xcd, 0x04, 0x0e, 0xa6, 0x6c, 0x69, 0xfc, 0x9e, 0xc2, 0x6f, 0x5b, 0xeb, 0x93, 0x78, 0xdc,
	0x6e, 0x7b, 0xbe, 0xea, 0x79, 0x2d, 0x59, 0xf4, 0x7c, 0xd9, 0x94, 0xf2, 0xef, 0x00, 0x9c, 0x6b,
	0x92, 0x20, 0xe4, 0x82, 0xb0, 0x63, 0xce, 0x89, 0x40, 0x76, 0xf6, 0xe8, 0x63, 0x41, 0xa3, 0x75,
	0x4a, 0xe7, 0xb5, 0x73, 0x53, 0x39, 0x57, 0xad, 0xa5, 0x49, 0x27, 0xd3, 0x05, 0x0f, 0xcb, 0x86,
	0xf4, 0xfd, 0x04, 0xe0, 0xab, 0x4d, 0xda, 0x13, 0xe4, 0xa4, 0xe1, 0x3e, 0x6c, 0x8e, 0x5a, 0xce,
	0x98, 0x8f, 0xc3, 0xc6, 0xb9, 0x37, 0x55, 0x47, 0x5b, 0x77, 0x94, 0xb5, 0x6a, 0xad, 0x3e, 0x61,
	0x95, 0x25, 0x2f, 0x6c, 0xf9, 0xe3, 0x5b, 0xe1, 0x37, 0x00, 0xe7, 0xcd, 0xbc, 0x3f, 0x24, 0xc4,
	0xa5, 0x51, 0x44, 0x7c, 0x41, 0x19, 0x3a, 0x28, 0x5e, 0xa7, 0xd1, 0xbc, 0x61, 0xd7, 0xa7, 0xad,
	0x15, 0xef, 0x86, 0xfb, 0x55, 0xbe, 0x20, 0xc4, 0xf3, 0x4d, 0x53, 0xe2, 0x7f, 0x04, 0xf0, 0x95,
	0x26, 0x11, 0x6c, 0x30, 0xb2, 0x18, 0x68, 0x37, 0x4f, 0x30, 0x9e, 0x35, 0xe8, 0xda, 0x34, 0x15,
	0x0d, 0x76, 0x14, 0x78, 0xc3, 0x5a, 0x79, 0x0a, 0x2c, 0xd8, 0x60, 0x6c, 0xa9, 0x25, 0xf6, 0x5b,
	0x00, 0x9f, 0xa9, 0x27, 0x77, 0x4a, 0x38, 0xc7, 0x01, 0x41, 0xdb, 0x05, 0x4f, 0x58, 0xe7, 0x0c,
	0xd2, 0x2e, 0x1b, 0xd7, 0xc0, 0xaa, 0x02, 0xae, 0x58, 0x6f, 0x67, 0xed, 0x85, 0x6e, 0x5a, 0x30,
	0x36, 0x17, 0x47, 0x91, 0x4b, 0x63, 0xc1, 0xb0, 0x2f, 0xf2, 0x6c, 0xa3, 0xb9, 0x12, 0xb6, 0xf1,
	0x78, 0xb1, 0xcd, 0xc7, 0x51, 0xe4, 0xf9, 0xba, 0x70, 0x04, 0xaa, 0xb5, 0x9f, 0x67, 0xe1, 0xb3,
	0x8f, 0xe5, 0x2b, 0xcb, 0xbc, 0xa4, 0xfe, 0x00, 0x70, 0x41, 0x1f, 0x89, 0x23, 0x0f, 0xc6, 0xa5,
	0xbd, 0x58, 0xe4, 0x1d, 0xc3, 0x19, 0x95, 0x12, 0xc7, 0x70, 0x66, 0x53, 0xcf, 0x66, 0x5f, 0xcd,
	0xc6, 0x46, 0x5b, 0x4e, 0xe6, 0x3b, 0x77, 0x74, 0x33, 0x78, 0xbe, 0xa2, 0x7e, 0x09, 0xe0, 0xec,
	0x19, 0x66, 0xb8, 0xcb, 0xd1, 0x3b, 0x39, 0x63, 0xab, 0x84, 0x41, 0xae, 0x17, 0x07, 0xb5, 0x69,
	0x5d, 0x99, 0x2c, 0xb4, 0x94, 0x6d, 0x4a, 0xd2, 0xc1, 0xa5, 0x43, 0x9d, 0xcc, 0xb9, 0x8e, 0x34,
	0x51, 0xc2, 0x61, 0x82, 0xe5, 0x1d, 0x7e, 0x3a, 0xf8, 0xd7, 0x00, 0xbe, 0x74, 0xd2, 0x70, 0xcf,
	0xb0, 0xe8, 0xa0, 0x9c, 0xfb, 0xeb, 0x88, 0x91, 0x6c, 0x94, 0x48, 0x6a, 0x4a, 0x4d, 0x51, 0xb6,
	0x50, 0x35, 0xff, 0x31, 0x25, 0x58, 0x74, 0x9c, 0xcf, 0x15, 0xea, 0x06, 0xfd, 0x22, 0x3f, 0x4b,
	0xe4, 0x65, 0x63, 0x60, 0x6c, 0x4e, 0xc1, 0xdc, 0xef, 0x93, 0x65, 0x3e, 0x4b, 0x1e, 0x15, 0xb4,
	0xf4, 0x3d, 0x25, 0x3d, 0x44, 0xf5, 0x82, 0x45, 0xf3, 0x5a, 0xe9, 0x31, 0x93, 0x92, 0xcd, 0xd5,
	0x4d, 0xe3, 0xfc, 0xaf, 0xbb, 0x0a, 0xb8, 0xbd, 0xab, 0x80, 0x7f, 0xef, 0x2a, 0xe0, 0xab, 0x61,
	0x65, 0xe6, 0xf7, 0x61, 0x05, 0xdc, 0x0e, 0x2b, 0x33, 0xff, 0x0c, 0x2b, 0x33, 0x9f, 0xd6, 0x83,
	0x50, 0x74, 0x7a, 0x2d, 0xdb, 0xa7, 0xdd, 0x87, 0x1b, 0x7f, 0x46, 0xd9, 0xa5, 0xfe, 0x6f, 0xdb,
	0xa7, 0x8c, 0x38, 0xfd, 0x91, 0x41, 0xc5, 0x20, 0x21, 0xbc, 0x35, 0xab, 0x3e, 0x19, 0xf7, 0xfe,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x41, 0x41, 0x9a, 0xf3, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	ConfirmDeposit(ctx context.Context, in *ConfirmDepositRequest, opts ...grpc.CallOption) (*ConfirmDepositResponse, error)
	ExecutePendingTransfers(ctx context.Context, in *ExecutePendingTransfersRequest, opts ...grpc.CallOption) (*ExecutePendingTransfersResponse, error)
	AddCosmosBasedChain(ctx context.Context, in *AddCosmosBasedChainRequest, opts ...grpc.CallOption) (*AddCosmosBasedChainResponse, error)
	RegisterAsset(ctx context.Context, in *RegisterAssetRequest, opts ...grpc.CallOption) (*RegisterAssetResponse, error)
	RouteIBCTransfers(ctx context.Context, in *RouteIBCTransfersRequest, opts ...grpc.CallOption) (*RouteIBCTransfersResponse, error)
	RegisterFeeCollector(ctx context.Context, in *RegisterFeeCollectorRequest, opts ...grpc.CallOption) (*RegisterFeeCollectorResponse, error)
	RetryIBCTransfer(ctx context.Context, in *RetryIBCTransferRequest, opts ...grpc.CallOption) (*RetryIBCTransferResponse, error)
	RouteMessage(ctx context.Context, in *RouteMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
	CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*CallContractResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ConfirmDeposit(ctx context.Context, in *ConfirmDepositRequest, opts ...grpc.CallOption) (*ConfirmDepositResponse, error) {
	out := new(ConfirmDepositResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/ConfirmDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) ExecutePendingTransfers(ctx context.Context, in *ExecutePendingTransfersRequest, opts ...grpc.CallOption) (*ExecutePendingTransfersResponse, error) {
	out := new(ExecutePendingTransfersResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/ExecutePendingTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddCosmosBasedChain(ctx context.Context, in *AddCosmosBasedChainRequest, opts ...grpc.CallOption) (*AddCosmosBasedChainResponse, error) {
	out := new(AddCosmosBasedChainResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/AddCosmosBasedChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RegisterAsset(ctx context.Context, in *RegisterAssetRequest, opts ...grpc.CallOption) (*RegisterAssetResponse, error) {
	out := new(RegisterAssetResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/RegisterAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RouteIBCTransfers(ctx context.Context, in *RouteIBCTransfersRequest, opts ...grpc.CallOption) (*RouteIBCTransfersResponse, error) {
	out := new(RouteIBCTransfersResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/RouteIBCTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RegisterFeeCollector(ctx context.Context, in *RegisterFeeCollectorRequest, opts ...grpc.CallOption) (*RegisterFeeCollectorResponse, error) {
	out := new(RegisterFeeCollectorResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/RegisterFeeCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RetryIBCTransfer(ctx context.Context, in *RetryIBCTransferRequest, opts ...grpc.CallOption) (*RetryIBCTransferResponse, error) {
	out := new(RetryIBCTransferResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/RetryIBCTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RouteMessage(ctx context.Context, in *RouteMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/RouteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*CallContractResponse, error) {
	out := new(CallContractResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.MsgService/CallContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	Link(context.Context, *LinkRequest) (*LinkResponse, error)
	ConfirmDeposit(context.Context, *ConfirmDepositRequest) (*ConfirmDepositResponse, error)
	ExecutePendingTransfers(context.Context, *ExecutePendingTransfersRequest) (*ExecutePendingTransfersResponse, error)
	AddCosmosBasedChain(context.Context, *AddCosmosBasedChainRequest) (*AddCosmosBasedChainResponse, error)
	RegisterAsset(context.Context, *RegisterAssetRequest) (*RegisterAssetResponse, error)
	RouteIBCTransfers(context.Context, *RouteIBCTransfersRequest) (*RouteIBCTransfersResponse, error)
	RegisterFeeCollector(context.Context, *RegisterFeeCollectorRequest) (*RegisterFeeCollectorResponse, error)
	RetryIBCTransfer(context.Context, *RetryIBCTransferRequest) (*RetryIBCTransferResponse, error)
	RouteMessage(context.Context, *RouteMessageRequest) (*RouteMessageResponse, error)
	CallContract(context.Context, *CallContractRequest) (*CallContractResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) Link(ctx context.Context, req *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (*UnimplementedMsgServiceServer) ConfirmDeposit(ctx context.Context, req *ConfirmDepositRequest) (*ConfirmDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDeposit not implemented")
}
func (*UnimplementedMsgServiceServer) ExecutePendingTransfers(ctx context.Context, req *ExecutePendingTransfersRequest) (*ExecutePendingTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePendingTransfers not implemented")
}
func (*UnimplementedMsgServiceServer) AddCosmosBasedChain(ctx context.Context, req *AddCosmosBasedChainRequest) (*AddCosmosBasedChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCosmosBasedChain not implemented")
}
func (*UnimplementedMsgServiceServer) RegisterAsset(ctx context.Context, req *RegisterAssetRequest) (*RegisterAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAsset not implemented")
}
func (*UnimplementedMsgServiceServer) RouteIBCTransfers(ctx context.Context, req *RouteIBCTransfersRequest) (*RouteIBCTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteIBCTransfers not implemented")
}
func (*UnimplementedMsgServiceServer) RegisterFeeCollector(ctx context.Context, req *RegisterFeeCollectorRequest) (*RegisterFeeCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFeeCollector not implemented")
}
func (*UnimplementedMsgServiceServer) RetryIBCTransfer(ctx context.Context, req *RetryIBCTransferRequest) (*RetryIBCTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryIBCTransfer not implemented")
}
func (*UnimplementedMsgServiceServer) RouteMessage(ctx context.Context, req *RouteMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteMessage not implemented")
}
func (*UnimplementedMsgServiceServer) CallContract(ctx context.Context, req *CallContractRequest) (*CallContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallContract not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).Link(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ConfirmDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ConfirmDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/ConfirmDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ConfirmDeposit(ctx, req.(*ConfirmDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_ExecutePendingTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePendingTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ExecutePendingTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/ExecutePendingTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ExecutePendingTransfers(ctx, req.(*ExecutePendingTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddCosmosBasedChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCosmosBasedChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddCosmosBasedChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/AddCosmosBasedChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddCosmosBasedChain(ctx, req.(*AddCosmosBasedChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RegisterAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RegisterAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/RegisterAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RegisterAsset(ctx, req.(*RegisterAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RouteIBCTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteIBCTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RouteIBCTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/RouteIBCTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RouteIBCTransfers(ctx, req.(*RouteIBCTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RegisterFeeCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFeeCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RegisterFeeCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/RegisterFeeCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RegisterFeeCollector(ctx, req.(*RegisterFeeCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RetryIBCTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryIBCTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RetryIBCTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/RetryIBCTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RetryIBCTransfer(ctx, req.(*RetryIBCTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RouteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RouteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/RouteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RouteMessage(ctx, req.(*RouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CallContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CallContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.MsgService/CallContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CallContract(ctx, req.(*CallContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "axelar.axelarnet.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Link",
			Handler:    _MsgService_Link_Handler,
		},
		{
			MethodName: "ConfirmDeposit",
			Handler:    _MsgService_ConfirmDeposit_Handler,
		},
		{
			MethodName: "ExecutePendingTransfers",
			Handler:    _MsgService_ExecutePendingTransfers_Handler,
		},
		{
			MethodName: "AddCosmosBasedChain",
			Handler:    _MsgService_AddCosmosBasedChain_Handler,
		},
		{
			MethodName: "RegisterAsset",
			Handler:    _MsgService_RegisterAsset_Handler,
		},
		{
			MethodName: "RouteIBCTransfers",
			Handler:    _MsgService_RouteIBCTransfers_Handler,
		},
		{
			MethodName: "RegisterFeeCollector",
			Handler:    _MsgService_RegisterFeeCollector_Handler,
		},
		{
			MethodName: "RetryIBCTransfer",
			Handler:    _MsgService_RetryIBCTransfer_Handler,
		},
		{
			MethodName: "RouteMessage",
			Handler:    _MsgService_RouteMessage_Handler,
		},
		{
			MethodName: "CallContract",
			Handler:    _MsgService_CallContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axelar/axelarnet/v1beta1/service.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// PendingIBCTransferCount queries the pending ibc transfers for all chains
	PendingIBCTransferCount(ctx context.Context, in *PendingIBCTransferCountRequest, opts ...grpc.CallOption) (*PendingIBCTransferCountResponse, error)
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
	Chains(ctx context.Context, in *ChainsRequest, opts ...grpc.CallOption) (*ChainsResponse, error)
	IBCPath(ctx context.Context, in *IBCPathRequest, opts ...grpc.CallOption) (*IBCPathResponse, error)
	ChainByIBCPath(ctx context.Context, in *ChainByIBCPathRequest, opts ...grpc.CallOption) (*ChainByIBCPathResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) PendingIBCTransferCount(ctx context.Context, in *PendingIBCTransferCountRequest, opts ...grpc.CallOption) (*PendingIBCTransferCountResponse, error) {
	out := new(PendingIBCTransferCountResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.QueryService/PendingIBCTransferCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.QueryService/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Chains(ctx context.Context, in *ChainsRequest, opts ...grpc.CallOption) (*ChainsResponse, error) {
	out := new(ChainsResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.QueryService/Chains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IBCPath(ctx context.Context, in *IBCPathRequest, opts ...grpc.CallOption) (*IBCPathResponse, error) {
	out := new(IBCPathResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.QueryService/IBCPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ChainByIBCPath(ctx context.Context, in *ChainByIBCPathRequest, opts ...grpc.CallOption) (*ChainByIBCPathResponse, error) {
	out := new(ChainByIBCPathResponse)
	err := c.cc.Invoke(ctx, "/axelar.axelarnet.v1beta1.QueryService/ChainByIBCPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// PendingIBCTransferCount queries the pending ibc transfers for all chains
	PendingIBCTransferCount(context.Context, *PendingIBCTransferCountRequest) (*PendingIBCTransferCountResponse, error)
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
	Chains(context.Context, *ChainsRequest) (*ChainsResponse, error)
	IBCPath(context.Context, *IBCPathRequest) (*IBCPathResponse, error)
	ChainByIBCPath(context.Context, *ChainByIBCPathRequest) (*ChainByIBCPathResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) PendingIBCTransferCount(ctx context.Context, req *PendingIBCTransferCountRequest) (*PendingIBCTransferCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingIBCTransferCount not implemented")
}
func (*UnimplementedQueryServiceServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServiceServer) Chains(ctx context.Context, req *ChainsRequest) (*ChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chains not implemented")
}
func (*UnimplementedQueryServiceServer) IBCPath(ctx context.Context, req *IBCPathRequest) (*IBCPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCPath not implemented")
}
func (*UnimplementedQueryServiceServer) ChainByIBCPath(ctx context.Context, req *ChainByIBCPathRequest) (*ChainByIBCPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainByIBCPath not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_PendingIBCTransferCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingIBCTransferCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PendingIBCTransferCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.QueryService/PendingIBCTransferCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PendingIBCTransferCount(ctx, req.(*PendingIBCTransferCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.QueryService/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Chains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Chains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.QueryService/Chains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Chains(ctx, req.(*ChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IBCPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IBCPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IBCPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.QueryService/IBCPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IBCPath(ctx, req.(*IBCPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ChainByIBCPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainByIBCPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ChainByIBCPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.axelarnet.v1beta1.QueryService/ChainByIBCPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ChainByIBCPath(ctx, req.(*ChainByIBCPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "axelar.axelarnet.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PendingIBCTransferCount",
			Handler:    _QueryService_PendingIBCTransferCount_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _QueryService_Params_Handler,
		},
		{
			MethodName: "Chains",
			Handler:    _QueryService_Chains_Handler,
		},
		{
			MethodName: "IBCPath",
			Handler:    _QueryService_IBCPath_Handler,
		},
		{
			MethodName: "ChainByIBCPath",
			Handler:    _QueryService_ChainByIBCPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axelar/axelarnet/v1beta1/service.proto",
}
