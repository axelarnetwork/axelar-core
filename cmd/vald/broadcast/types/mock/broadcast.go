// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	broadcasttypes "github.com/axelarnetwork/axelar-core/cmd/vald/broadcast/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"
	coretypes "github.com/tendermint/tendermint/rpc/core/types"
	"sync"
)

// Ensure, that ClientMock does implement broadcasttypes.Client.
// If this is not the case, regenerate this file with moq.
var _ broadcasttypes.Client = &ClientMock{}

// ClientMock is a mock implementation of broadcasttypes.Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked broadcasttypes.Client
// 		mockedClient := &ClientMock{
// 			BroadcastTxSyncFunc: func(tx authtypes.StdTx) (*coretypes.ResultBroadcastTx, error) {
// 				panic("mock out the BroadcastTxSync method")
// 			},
// 			GetAccountNumberSequenceFunc: func(addr sdk.AccAddress) (uint64, uint64, error) {
// 				panic("mock out the GetAccountNumberSequence method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires broadcasttypes.Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// BroadcastTxSyncFunc mocks the BroadcastTxSync method.
	BroadcastTxSyncFunc func(tx authtypes.StdTx) (*coretypes.ResultBroadcastTx, error)

	// GetAccountNumberSequenceFunc mocks the GetAccountNumberSequence method.
	GetAccountNumberSequenceFunc func(addr sdk.AccAddress) (uint64, uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// BroadcastTxSync holds details about calls to the BroadcastTxSync method.
		BroadcastTxSync []struct {
			// Tx is the tx argument value.
			Tx authtypes.StdTx
		}
		// GetAccountNumberSequence holds details about calls to the GetAccountNumberSequence method.
		GetAccountNumberSequence []struct {
			// Addr is the addr argument value.
			Addr sdk.AccAddress
		}
	}
	lockBroadcastTxSync          sync.RWMutex
	lockGetAccountNumberSequence sync.RWMutex
}

// BroadcastTxSync calls BroadcastTxSyncFunc.
func (mock *ClientMock) BroadcastTxSync(tx authtypes.StdTx) (*coretypes.ResultBroadcastTx, error) {
	callInfo := struct {
		Tx authtypes.StdTx
	}{
		Tx: tx,
	}
	mock.lockBroadcastTxSync.Lock()
	mock.calls.BroadcastTxSync = append(mock.calls.BroadcastTxSync, callInfo)
	mock.lockBroadcastTxSync.Unlock()
	if mock.BroadcastTxSyncFunc == nil {
		var (
			resultBroadcastTxOut *coretypes.ResultBroadcastTx
			errOut               error
		)
		return resultBroadcastTxOut, errOut
	}
	return mock.BroadcastTxSyncFunc(tx)
}

// BroadcastTxSyncCalls gets all the calls that were made to BroadcastTxSync.
// Check the length with:
//     len(mockedClient.BroadcastTxSyncCalls())
func (mock *ClientMock) BroadcastTxSyncCalls() []struct {
	Tx authtypes.StdTx
} {
	var calls []struct {
		Tx authtypes.StdTx
	}
	mock.lockBroadcastTxSync.RLock()
	calls = mock.calls.BroadcastTxSync
	mock.lockBroadcastTxSync.RUnlock()
	return calls
}

// GetAccountNumberSequence calls GetAccountNumberSequenceFunc.
func (mock *ClientMock) GetAccountNumberSequence(addr sdk.AccAddress) (uint64, uint64, error) {
	callInfo := struct {
		Addr sdk.AccAddress
	}{
		Addr: addr,
	}
	mock.lockGetAccountNumberSequence.Lock()
	mock.calls.GetAccountNumberSequence = append(mock.calls.GetAccountNumberSequence, callInfo)
	mock.lockGetAccountNumberSequence.Unlock()
	if mock.GetAccountNumberSequenceFunc == nil {
		var (
			vOut1  uint64
			vOut2  uint64
			errOut error
		)
		return vOut1, vOut2, errOut
	}
	return mock.GetAccountNumberSequenceFunc(addr)
}

// GetAccountNumberSequenceCalls gets all the calls that were made to GetAccountNumberSequence.
// Check the length with:
//     len(mockedClient.GetAccountNumberSequenceCalls())
func (mock *ClientMock) GetAccountNumberSequenceCalls() []struct {
	Addr sdk.AccAddress
} {
	var calls []struct {
		Addr sdk.AccAddress
	}
	mock.lockGetAccountNumberSequence.RLock()
	calls = mock.calls.GetAccountNumberSequence
	mock.lockGetAccountNumberSequence.RUnlock()
	return calls
}

// Ensure, that MsgMock does implement broadcasttypes.Msg.
// If this is not the case, regenerate this file with moq.
var _ broadcasttypes.Msg = &MsgMock{}

// MsgMock is a mock implementation of broadcasttypes.Msg.
//
// 	func TestSomethingThatUsesMsg(t *testing.T) {
//
// 		// make and configure a mocked broadcasttypes.Msg
// 		mockedMsg := &MsgMock{
// 			GetSignBytesFunc: func() []byte {
// 				panic("mock out the GetSignBytes method")
// 			},
// 			GetSignersFunc: func() []sdk.AccAddress {
// 				panic("mock out the GetSigners method")
// 			},
// 			RouteFunc: func() string {
// 				panic("mock out the Route method")
// 			},
// 			TypeFunc: func() string {
// 				panic("mock out the Type method")
// 			},
// 			ValidateBasicFunc: func() error {
// 				panic("mock out the ValidateBasic method")
// 			},
// 		}
//
// 		// use mockedMsg in code that requires broadcasttypes.Msg
// 		// and then make assertions.
//
// 	}
type MsgMock struct {
	// GetSignBytesFunc mocks the GetSignBytes method.
	GetSignBytesFunc func() []byte

	// GetSignersFunc mocks the GetSigners method.
	GetSignersFunc func() []sdk.AccAddress

	// RouteFunc mocks the Route method.
	RouteFunc func() string

	// TypeFunc mocks the Type method.
	TypeFunc func() string

	// ValidateBasicFunc mocks the ValidateBasic method.
	ValidateBasicFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// GetSignBytes holds details about calls to the GetSignBytes method.
		GetSignBytes []struct {
		}
		// GetSigners holds details about calls to the GetSigners method.
		GetSigners []struct {
		}
		// Route holds details about calls to the Route method.
		Route []struct {
		}
		// Type holds details about calls to the Type method.
		Type []struct {
		}
		// ValidateBasic holds details about calls to the ValidateBasic method.
		ValidateBasic []struct {
		}
	}
	lockGetSignBytes  sync.RWMutex
	lockGetSigners    sync.RWMutex
	lockRoute         sync.RWMutex
	lockType          sync.RWMutex
	lockValidateBasic sync.RWMutex
}

// GetSignBytes calls GetSignBytesFunc.
func (mock *MsgMock) GetSignBytes() []byte {
	callInfo := struct {
	}{}
	mock.lockGetSignBytes.Lock()
	mock.calls.GetSignBytes = append(mock.calls.GetSignBytes, callInfo)
	mock.lockGetSignBytes.Unlock()
	if mock.GetSignBytesFunc == nil {
		var (
			bytesOut []byte
		)
		return bytesOut
	}
	return mock.GetSignBytesFunc()
}

// GetSignBytesCalls gets all the calls that were made to GetSignBytes.
// Check the length with:
//     len(mockedMsg.GetSignBytesCalls())
func (mock *MsgMock) GetSignBytesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSignBytes.RLock()
	calls = mock.calls.GetSignBytes
	mock.lockGetSignBytes.RUnlock()
	return calls
}

// GetSigners calls GetSignersFunc.
func (mock *MsgMock) GetSigners() []sdk.AccAddress {
	callInfo := struct {
	}{}
	mock.lockGetSigners.Lock()
	mock.calls.GetSigners = append(mock.calls.GetSigners, callInfo)
	mock.lockGetSigners.Unlock()
	if mock.GetSignersFunc == nil {
		var (
			accAddresssOut []sdk.AccAddress
		)
		return accAddresssOut
	}
	return mock.GetSignersFunc()
}

// GetSignersCalls gets all the calls that were made to GetSigners.
// Check the length with:
//     len(mockedMsg.GetSignersCalls())
func (mock *MsgMock) GetSignersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSigners.RLock()
	calls = mock.calls.GetSigners
	mock.lockGetSigners.RUnlock()
	return calls
}

// Route calls RouteFunc.
func (mock *MsgMock) Route() string {
	callInfo := struct {
	}{}
	mock.lockRoute.Lock()
	mock.calls.Route = append(mock.calls.Route, callInfo)
	mock.lockRoute.Unlock()
	if mock.RouteFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.RouteFunc()
}

// RouteCalls gets all the calls that were made to Route.
// Check the length with:
//     len(mockedMsg.RouteCalls())
func (mock *MsgMock) RouteCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRoute.RLock()
	calls = mock.calls.Route
	mock.lockRoute.RUnlock()
	return calls
}

// Type calls TypeFunc.
func (mock *MsgMock) Type() string {
	callInfo := struct {
	}{}
	mock.lockType.Lock()
	mock.calls.Type = append(mock.calls.Type, callInfo)
	mock.lockType.Unlock()
	if mock.TypeFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.TypeFunc()
}

// TypeCalls gets all the calls that were made to Type.
// Check the length with:
//     len(mockedMsg.TypeCalls())
func (mock *MsgMock) TypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockType.RLock()
	calls = mock.calls.Type
	mock.lockType.RUnlock()
	return calls
}

// ValidateBasic calls ValidateBasicFunc.
func (mock *MsgMock) ValidateBasic() error {
	callInfo := struct {
	}{}
	mock.lockValidateBasic.Lock()
	mock.calls.ValidateBasic = append(mock.calls.ValidateBasic, callInfo)
	mock.lockValidateBasic.Unlock()
	if mock.ValidateBasicFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.ValidateBasicFunc()
}

// ValidateBasicCalls gets all the calls that were made to ValidateBasic.
// Check the length with:
//     len(mockedMsg.ValidateBasicCalls())
func (mock *MsgMock) ValidateBasicCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidateBasic.RLock()
	calls = mock.calls.ValidateBasic
	mock.lockValidateBasic.RUnlock()
	return calls
}
