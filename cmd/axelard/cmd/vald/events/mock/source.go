// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/axelarnetwork/axelar-core/cmd/axelard/cmd/vald/events"
	coretypes "github.com/tendermint/tendermint/rpc/core/types"
	"sync"
)

// Ensure, that BlockSourceMock does implement events.BlockSource.
// If this is not the case, regenerate this file with moq.
var _ events.BlockSource = &BlockSourceMock{}

// BlockSourceMock is a mock implementation of events.BlockSource.
//
// 	func TestSomethingThatUsesBlockSource(t *testing.T) {
//
// 		// make and configure a mocked events.BlockSource
// 		mockedBlockSource := &BlockSourceMock{
// 			BlockResultsFunc: func(ctx context.Context) (<-chan *coretypes.ResultBlockResults, <-chan error) {
// 				panic("mock out the BlockResults method")
// 			},
// 		}
//
// 		// use mockedBlockSource in code that requires events.BlockSource
// 		// and then make assertions.
//
// 	}
type BlockSourceMock struct {
	// BlockResultsFunc mocks the BlockResults method.
	BlockResultsFunc func(ctx context.Context) (<-chan *coretypes.ResultBlockResults, <-chan error)

	// calls tracks calls to the methods.
	calls struct {
		// BlockResults holds details about calls to the BlockResults method.
		BlockResults []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockBlockResults sync.RWMutex
}

// BlockResults calls BlockResultsFunc.
func (mock *BlockSourceMock) BlockResults(ctx context.Context) (<-chan *coretypes.ResultBlockResults, <-chan error) {
	if mock.BlockResultsFunc == nil {
		panic("BlockSourceMock.BlockResultsFunc: method is nil but BlockSource.BlockResults was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBlockResults.Lock()
	mock.calls.BlockResults = append(mock.calls.BlockResults, callInfo)
	mock.lockBlockResults.Unlock()
	return mock.BlockResultsFunc(ctx)
}

// BlockResultsCalls gets all the calls that were made to BlockResults.
// Check the length with:
//     len(mockedBlockSource.BlockResultsCalls())
func (mock *BlockSourceMock) BlockResultsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockBlockResults.RLock()
	calls = mock.calls.BlockResults
	mock.lockBlockResults.RUnlock()
	return calls
}

// Ensure, that BlockClientMock does implement events.BlockClient.
// If this is not the case, regenerate this file with moq.
var _ events.BlockClient = &BlockClientMock{}

// BlockClientMock is a mock implementation of events.BlockClient.
//
// 	func TestSomethingThatUsesBlockClient(t *testing.T) {
//
// 		// make and configure a mocked events.BlockClient
// 		mockedBlockClient := &BlockClientMock{
// 			LatestBlockHeightFunc: func(ctx context.Context) (int64, error) {
// 				panic("mock out the LatestBlockHeight method")
// 			},
// 			SubscribeFunc: func(ctx context.Context, subscriber string, query string, outCapacity ...int) (<-chan coretypes.ResultEvent, error) {
// 				panic("mock out the Subscribe method")
// 			},
// 			UnsubscribeFunc: func(ctx context.Context, subscriber string, query string) error {
// 				panic("mock out the Unsubscribe method")
// 			},
// 		}
//
// 		// use mockedBlockClient in code that requires events.BlockClient
// 		// and then make assertions.
//
// 	}
type BlockClientMock struct {
	// LatestBlockHeightFunc mocks the LatestBlockHeight method.
	LatestBlockHeightFunc func(ctx context.Context) (int64, error)

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, subscriber string, query string, outCapacity ...int) (<-chan coretypes.ResultEvent, error)

	// UnsubscribeFunc mocks the Unsubscribe method.
	UnsubscribeFunc func(ctx context.Context, subscriber string, query string) error

	// calls tracks calls to the methods.
	calls struct {
		// LatestBlockHeight holds details about calls to the LatestBlockHeight method.
		LatestBlockHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Subscriber is the subscriber argument value.
			Subscriber string
			// Query is the query argument value.
			Query string
			// OutCapacity is the outCapacity argument value.
			OutCapacity []int
		}
		// Unsubscribe holds details about calls to the Unsubscribe method.
		Unsubscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Subscriber is the subscriber argument value.
			Subscriber string
			// Query is the query argument value.
			Query string
		}
	}
	lockLatestBlockHeight sync.RWMutex
	lockSubscribe         sync.RWMutex
	lockUnsubscribe       sync.RWMutex
}

// LatestBlockHeight calls LatestBlockHeightFunc.
func (mock *BlockClientMock) LatestBlockHeight(ctx context.Context) (int64, error) {
	if mock.LatestBlockHeightFunc == nil {
		panic("BlockClientMock.LatestBlockHeightFunc: method is nil but BlockClient.LatestBlockHeight was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockLatestBlockHeight.Lock()
	mock.calls.LatestBlockHeight = append(mock.calls.LatestBlockHeight, callInfo)
	mock.lockLatestBlockHeight.Unlock()
	return mock.LatestBlockHeightFunc(ctx)
}

// LatestBlockHeightCalls gets all the calls that were made to LatestBlockHeight.
// Check the length with:
//     len(mockedBlockClient.LatestBlockHeightCalls())
func (mock *BlockClientMock) LatestBlockHeightCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockLatestBlockHeight.RLock()
	calls = mock.calls.LatestBlockHeight
	mock.lockLatestBlockHeight.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *BlockClientMock) Subscribe(ctx context.Context, subscriber string, query string, outCapacity ...int) (<-chan coretypes.ResultEvent, error) {
	if mock.SubscribeFunc == nil {
		panic("BlockClientMock.SubscribeFunc: method is nil but BlockClient.Subscribe was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Subscriber  string
		Query       string
		OutCapacity []int
	}{
		Ctx:         ctx,
		Subscriber:  subscriber,
		Query:       query,
		OutCapacity: outCapacity,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, subscriber, query, outCapacity...)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedBlockClient.SubscribeCalls())
func (mock *BlockClientMock) SubscribeCalls() []struct {
	Ctx         context.Context
	Subscriber  string
	Query       string
	OutCapacity []int
} {
	var calls []struct {
		Ctx         context.Context
		Subscriber  string
		Query       string
		OutCapacity []int
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}

// Unsubscribe calls UnsubscribeFunc.
func (mock *BlockClientMock) Unsubscribe(ctx context.Context, subscriber string, query string) error {
	if mock.UnsubscribeFunc == nil {
		panic("BlockClientMock.UnsubscribeFunc: method is nil but BlockClient.Unsubscribe was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Subscriber string
		Query      string
	}{
		Ctx:        ctx,
		Subscriber: subscriber,
		Query:      query,
	}
	mock.lockUnsubscribe.Lock()
	mock.calls.Unsubscribe = append(mock.calls.Unsubscribe, callInfo)
	mock.lockUnsubscribe.Unlock()
	return mock.UnsubscribeFunc(ctx, subscriber, query)
}

// UnsubscribeCalls gets all the calls that were made to Unsubscribe.
// Check the length with:
//     len(mockedBlockClient.UnsubscribeCalls())
func (mock *BlockClientMock) UnsubscribeCalls() []struct {
	Ctx        context.Context
	Subscriber string
	Query      string
} {
	var calls []struct {
		Ctx        context.Context
		Subscriber string
		Query      string
	}
	mock.lockUnsubscribe.RLock()
	calls = mock.calls.Unsubscribe
	mock.lockUnsubscribe.RUnlock()
	return calls
}

// Ensure, that BlockResultClientMock does implement events.BlockResultClient.
// If this is not the case, regenerate this file with moq.
var _ events.BlockResultClient = &BlockResultClientMock{}

// BlockResultClientMock is a mock implementation of events.BlockResultClient.
//
// 	func TestSomethingThatUsesBlockResultClient(t *testing.T) {
//
// 		// make and configure a mocked events.BlockResultClient
// 		mockedBlockResultClient := &BlockResultClientMock{
// 			BlockResultsFunc: func(ctx context.Context, height *int64) (*coretypes.ResultBlockResults, error) {
// 				panic("mock out the BlockResults method")
// 			},
// 		}
//
// 		// use mockedBlockResultClient in code that requires events.BlockResultClient
// 		// and then make assertions.
//
// 	}
type BlockResultClientMock struct {
	// BlockResultsFunc mocks the BlockResults method.
	BlockResultsFunc func(ctx context.Context, height *int64) (*coretypes.ResultBlockResults, error)

	// calls tracks calls to the methods.
	calls struct {
		// BlockResults holds details about calls to the BlockResults method.
		BlockResults []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Height is the height argument value.
			Height *int64
		}
	}
	lockBlockResults sync.RWMutex
}

// BlockResults calls BlockResultsFunc.
func (mock *BlockResultClientMock) BlockResults(ctx context.Context, height *int64) (*coretypes.ResultBlockResults, error) {
	if mock.BlockResultsFunc == nil {
		panic("BlockResultClientMock.BlockResultsFunc: method is nil but BlockResultClient.BlockResults was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Height *int64
	}{
		Ctx:    ctx,
		Height: height,
	}
	mock.lockBlockResults.Lock()
	mock.calls.BlockResults = append(mock.calls.BlockResults, callInfo)
	mock.lockBlockResults.Unlock()
	return mock.BlockResultsFunc(ctx, height)
}

// BlockResultsCalls gets all the calls that were made to BlockResults.
// Check the length with:
//     len(mockedBlockResultClient.BlockResultsCalls())
func (mock *BlockResultClientMock) BlockResultsCalls() []struct {
	Ctx    context.Context
	Height *int64
} {
	var calls []struct {
		Ctx    context.Context
		Height *int64
	}
	mock.lockBlockResults.RLock()
	calls = mock.calls.BlockResults
	mock.lockBlockResults.RUnlock()
	return calls
}

// Ensure, that BlockNotifierMock does implement events.BlockNotifier.
// If this is not the case, regenerate this file with moq.
var _ events.BlockNotifier = &BlockNotifierMock{}

// BlockNotifierMock is a mock implementation of events.BlockNotifier.
//
// 	func TestSomethingThatUsesBlockNotifier(t *testing.T) {
//
// 		// make and configure a mocked events.BlockNotifier
// 		mockedBlockNotifier := &BlockNotifierMock{
// 			BlockHeightsFunc: func(ctx context.Context) (<-chan int64, <-chan error) {
// 				panic("mock out the BlockHeights method")
// 			},
// 		}
//
// 		// use mockedBlockNotifier in code that requires events.BlockNotifier
// 		// and then make assertions.
//
// 	}
type BlockNotifierMock struct {
	// BlockHeightsFunc mocks the BlockHeights method.
	BlockHeightsFunc func(ctx context.Context) (<-chan int64, <-chan error)

	// calls tracks calls to the methods.
	calls struct {
		// BlockHeights holds details about calls to the BlockHeights method.
		BlockHeights []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockBlockHeights sync.RWMutex
}

// BlockHeights calls BlockHeightsFunc.
func (mock *BlockNotifierMock) BlockHeights(ctx context.Context) (<-chan int64, <-chan error) {
	if mock.BlockHeightsFunc == nil {
		panic("BlockNotifierMock.BlockHeightsFunc: method is nil but BlockNotifier.BlockHeights was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBlockHeights.Lock()
	mock.calls.BlockHeights = append(mock.calls.BlockHeights, callInfo)
	mock.lockBlockHeights.Unlock()
	return mock.BlockHeightsFunc(ctx)
}

// BlockHeightsCalls gets all the calls that were made to BlockHeights.
// Check the length with:
//     len(mockedBlockNotifier.BlockHeightsCalls())
func (mock *BlockNotifierMock) BlockHeightsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockBlockHeights.RLock()
	calls = mock.calls.BlockHeights
	mock.lockBlockHeights.RUnlock()
	return calls
}
