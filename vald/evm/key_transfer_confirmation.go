package evm

import (
	"context"
	"strings"

	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
	"github.com/ethereum/go-ethereum/common"
	geth "github.com/ethereum/go-ethereum/core/types"

	"github.com/axelarnetwork/axelar-core/x/evm/types"
	voteTypes "github.com/axelarnetwork/axelar-core/x/vote/types"
	"github.com/axelarnetwork/utils/funcs"
)

// ProcessTransferKeyConfirmation votes on the correctness of an EVM chain key transfer
func (mgr Mgr) ProcessTransferKeyConfirmation(event *types.ConfirmKeyTransferStarted) error {
	if !mgr.isParticipantOf(event.Participants) {
		mgr.logger("pollID", event.PollID).Debug("ignoring key transfer confirmation poll: not a participant")
		return nil
	}

	var vote *voteTypes.VoteRequest

	txReceipt, err := mgr.GetTxReceiptIfFinalized(event.Chain, common.Hash(event.TxID), event.ConfirmationHeight)
	if err != nil {
		return err
	}
	if txReceipt.Err() != nil {
		if mgr.isStuckFileCoinKeyRotation(event) {
			events := mgr.prepareVoteForStuckFileCoinKeyRotation(event)
			vote = voteTypes.NewVoteRequest(mgr.proxy, event.PollID, types.NewVoteEvents(event.Chain, events...))

			mgr.logger().Infof("broadcasting rescue vote %v for poll %s, to get filecoin key rotation unstuck", events, event.PollID.String())
		} else {
			vote = voteTypes.NewVoteRequest(mgr.proxy, event.PollID, types.NewVoteEvents(event.Chain))

			mgr.logger().Infof("broadcasting empty vote for poll %s: %s", event.PollID.String(), txReceipt.Err().Error())
		}
	} else {
		events := mgr.processTransferKeyLogs(event, txReceipt.Ok().Logs)
		vote = voteTypes.NewVoteRequest(mgr.proxy, event.PollID, types.NewVoteEvents(event.Chain, events...))

		mgr.logger().Infof("broadcasting vote %v for poll %s", events, event.PollID.String())
	}

	_, err = mgr.broadcaster.Broadcast(context.TODO(), vote)

	return err
}

func (mgr Mgr) isStuckFileCoinKeyRotation(event *types.ConfirmKeyTransferStarted) bool {
	if mgr.chainID != "axelar-testnet-lisbon-3" {
		return false
	}
	if event.PollID.String() != "1342934" {
		return false
	}

	if event.Chain != "filecoin-2" {
		return false
	}

	if !strings.EqualFold(event.TxID.Hex(), "0xd9cc8d5f0238dfe360776ed9029835d8a470d4d30e46a43deb76f316c0bd5740") {
		return false
	}

	if !strings.EqualFold(event.GatewayAddress.Hex(), "0x999117D44220F33e0441fbAb2A5aDB8FF485c54D") {
		return false
	}

	if event.ConfirmationHeight != 10 {
		return false
	}

	return true
}

func (mgr Mgr) prepareVoteForStuckFileCoinKeyRotation(event *types.ConfirmKeyTransferStarted) []types.Event {
	multisigOperatorshipTransferred := funcs.Must(DecodeMultisigOperatorshipTransferredEvent(&filecoinTxLog))
	return []types.Event{{Chain: event.Chain,
		TxID:  event.TxID,
		Index: uint64(0),
		Event: &types.Event_MultisigOperatorshipTransferred{
			MultisigOperatorshipTransferred: &multisigOperatorshipTransferred,
		},
	}}
}

func (mgr Mgr) processTransferKeyLogs(event *types.ConfirmKeyTransferStarted, logs []*geth.Log) []types.Event {
	for i := len(logs) - 1; i >= 0; i-- {
		txlog := logs[i]

		if txlog.Topics[0] != MultisigTransferOperatorshipSig {
			continue
		}

		// Event is not emitted by the axelar gateway
		if txlog.Address != common.Address(event.GatewayAddress) {
			continue
		}

		transferOperatorshipEvent, err := DecodeMultisigOperatorshipTransferredEvent(txlog)
		if err != nil {
			mgr.logger().Debug(sdkerrors.Wrap(err, "failed decoding operatorship transferred event").Error())
			continue
		}

		if err := transferOperatorshipEvent.ValidateBasic(); err != nil {
			mgr.logger().Debug(sdkerrors.Wrap(err, "invalid event MultisigTransferOperatorship").Error())
			continue
		}

		return []types.Event{{Chain: event.Chain,
			TxID:  event.TxID,
			Index: uint64(i),
			Event: &types.Event_MultisigOperatorshipTransferred{
				MultisigOperatorshipTransferred: &transferOperatorshipEvent,
			},
		}}
	}

	return []types.Event{}
}

// received from https://calibration.filfox.info/en/tx/0xd9cc8d5f0238dfe360776ed9029835d8a470d4d30e46a43deb76f316c0bd5740
var filecoinTxLog = geth.Log{
	Address: common.HexToAddress("0x999117D44220F33e0441fbAb2A5aDB8FF485c54D"),
	Topics:  []common.Hash{common.HexToHash("0x192e759e55f359cd9832b5c0c6e38e4b6df5c5ca33f3bd5c90738e865a521872")},
	Data:    common.FromHex(filecoinVoteData),
	TxHash:  common.HexToHash("0xd9cc8d5f0238dfe360776ed9029835d8a470d4d30e46a43deb76f316c0bd5740"),
}

const filecoinVoteData = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000d20000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000000000681200000000000000000000000000000000000000000000000000000000000000320000000000000000000000000b07ca90aefb609bc86e6c25adc831493201d8cd0000000000000000000000000de4795756a5b8d37264a0ed626deb95081765f00000000000000000000000000f7bf247be3332a7c594c7495d16463238a52e300000000000000000000000000fed0325c061f51f4b33a786e463572d74a9f45d000000000000000000000000108ef4508b3590118667a074ee4cd3ed343d745b000000000000000000000000112441fc08b9eca662b0da85f21701454c57cc0700000000000000000000000015fe27558aef75a1f0b7dcfa80122e22ecdd36310000000000000000000000001a456e10b360d182e48a43f212df3ce22dd5369d0000000000000000000000001b8647ce8a9bc52d3951b04f60bc6b76401ce28900000000000000000000000022596cef717b5c0b55ab83d2a1233e73733e81930000000000000000000000002cc7ce2914c17a9f8fe43d879cd28482cf15bfab0000000000000000000000003402adfe6de6d92fc51d0cc225df2d0e37d8c7020000000000000000000000003bbda5020e5806d7be056425cf46011d60696f1700000000000000000000000045e6fd78f7350653d35c917a2d8e144c900a06c100000000000000000000000056c741e736ecd3ef34b1b7247e5d8fd9a62617260000000000000000000000005a99366e491a4d4d1cfec32161af738d6e709e900000000000000000000000005fb7430b50fce44d16797b208ba2df2456befeeb0000000000000000000000006111c9c9bf406d5fe020c4eec4146da31d9b810900000000000000000000000064815b222936a63f4c1c0ed0a1aa47d9fb10b3db0000000000000000000000006c462831facba3904f6ba799381ac50a889328d40000000000000000000000006fe12aab23ce6d1fee48d563595fef039934cebe000000000000000000000000700e2855bc181dd1612d98ae7edb1f89110687bb00000000000000000000000071e0ce7c4c4678729ce4eee2cdf4b2a4691a4ec200000000000000000000000075c0a1a74f637108cf0a2ed8f5ab36d6cb0f1bdb00000000000000000000000076b34508b24dc58cf66eade051286b864ed055340000000000000000000000007d56e2285a600e71306735134d20ad40158e79960000000000000000000000008894ce4c42626500a519091f05323702cadc1ebd000000000000000000000000890867d3d6a312258d763d020b8ab094686428dd0000000000000000000000008c186554f2e2cdbc4a2e5ae91642007ed7b2eaa30000000000000000000000008e089ef6c671a399f3fca5a9b7e0d8555025a9ce0000000000000000000000008eac7a0fa987c0b6a7380f856b110b0144868c8d0000000000000000000000008fb59b94094f63e676e9c84a04e044db0b793f8f0000000000000000000000009103e52100387bddd6d6a6aee17fcaab9af6c34e00000000000000000000000097900205513d9f8253e99148f73159f1e7d35906000000000000000000000000a3189dfecdea14c7e96f04791975083fb1ae124b000000000000000000000000a76b14b7b0e1a81ae617a8ccff22800568ddbe37000000000000000000000000aabb1f05377d014136ce5cfb1122776a761295ce000000000000000000000000b0bd759df8cbfdcbed919a5e7fdbee1df356a56b000000000000000000000000b5ce204ad598bdce0e308f8e492f928877978f63000000000000000000000000c2c63f7d45b1475f3206263e9e1fb54a5878adc0000000000000000000000000c62224017b3226499eaf0edd3997cc6d1c1b8e6e000000000000000000000000ca99aa36964787b075f29dbbb9df552f657ed214000000000000000000000000cf292af972143ad559fbb1b55636abd50db4221d000000000000000000000000d70183e31774c1fb2f51a5655ce24cbc25d2c746000000000000000000000000dd55430ce91ab6631dceeb94c8659569c22ff48f000000000000000000000000dd7e59cd4711ad2978374ec6c37ce8b85a045208000000000000000000000000ec28bb8c3993f7ff9672e0b7f93407382b4f601d000000000000000000000000f0a9d162e2895adf26a6420d0e86186d9ab020ef000000000000000000000000f89c6850e4d9ac11e1d4299c91aa41c67a09ca1c000000000000000000000000fe5771b268a4d924fd16dc99d293a2ca54e75c9e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000152000000000000000000000000000000000000000000000000000000000000014100000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000008e000000000000000000000000000000000000000000000000000000000000009100000000000000000000000000000000000000000000000000000000000001c400000000000000000000000000000000000000000000000000000000000021af0000000000000000000000000000000000000000000000000000000000000094000000000000000000000000000000000000000000000000000000000000013e00000000000000000000000000000000000000000000000000000000000002db000000000000000000000000000000000000000000000000000000000000009e000000000000000000000000000000000000000000000000000000000000008d0000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000016a00000000000000000000000000000000000000000000000000000000000000ab00000000000000000000000000000000000000000000000000000000000000960000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000910000000000000000000000000000000000000000000000000000000000000094000000000000000000000000000000000000000000000000000000000000009b00000000000000000000000000000000000000000000000000000000000000b500000000000000000000000000000000000000000000000000000000000000a40000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000002c800000000000000000000000000000000000000000000000000000000000000f400000000000000000000000000000000000000000000000000000000000001a800000000000000000000000000000000000000000000000000000000000000e700000000000000000000000000000000000000000000000000000000000003ea0000000000000000000000000000000000000000000000000000000000000099000000000000000000000000000000000000000000000000000000000000008d000000000000000000000000000000000000000000000000000000000000008d00000000000000000000000000000000000000000000000000000000000000a1000000000000000000000000000000000000000000000000000000000000031300000000000000000000000000000000000000000000000000000000000002d700000000000000000000000000000000000000000000000000000000000001e300000000000000000000000000000000000000000000000000000000000000db00000000000000000000000000000000000000000000000000000000000002660000000000000000000000000000000000000000000000000000000000002225000000000000000000000000000000000000000000000000000000000000227500000000000000000000000000000000000000000000000000000000000000b100000000000000000000000000000000000000000000000000000000000001cd000000000000000000000000000000000000000000000000000000000000009500000000000000000000000000000000000000000000000000000000000002c300000000000000000000000000000000000000000000000000000000000003b5000000000000000000000000000000000000000000000000000000000000008e000000000000000000000000000000000000000000000000000000000000023600000000000000000000000000000000000000000000000000000000000000cd00000000000000000000000000000000000000000000000000000000000002b9"
